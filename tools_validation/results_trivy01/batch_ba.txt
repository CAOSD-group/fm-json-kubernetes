
Report Summary

┌───────────────────────────────────────┬────────────┬───────────────────┐
│                Target                 │    Type    │ Misconfigurations │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role58.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role59.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role6.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role60.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role61.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role62.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role63.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role64.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role65.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role66.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role67.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role68.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role69.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role7.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role70.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role71.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role72.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role73.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role74.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role75.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role76.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role77.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role78.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role79.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role8.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role80.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role81.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role82.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role83.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role84.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role85.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role86.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role87.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role88.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role9.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role90.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role91.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role92.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role93.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role94.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role95.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role96.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role97.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role98.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role99.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding.yaml          │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding1.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding10.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding100.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding101.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding102.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding103.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding104.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding105.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding106.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding107.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding108.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding109.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding11.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding110.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding112.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding113.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding114.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding115.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding116.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding117.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding118.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding119.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding12.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding120.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding121.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding122.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding123.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding124.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding125.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding126.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding127.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding128.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding129.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding13.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding130.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding131.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding132.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding133.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding134.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding135.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding136.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding137.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding138.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding139.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding14.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding140.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding141.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding142.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding143.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding144.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding145.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding146.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding147.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding148.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding149.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding15.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding150.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding151.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding152.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding153.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding155.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding156.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding157.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding158.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding159.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding16.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding160.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding161.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding162.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding163.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding164.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding165.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding166.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding167.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding168.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding169.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding17.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding170.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding171.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding172.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding173.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding174.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding175.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding176.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding177.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding179.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding18.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding180.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding181.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding182.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding183.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding184.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding185.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding186.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding187.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding188.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding189.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding19.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding190.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding191.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding192.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding193.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding194.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding195.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding196.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding197.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding198.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding199.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding2.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding20.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding200.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding201.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding21.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding210.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding211.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding212.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding213.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding214.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding215.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding216.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding217.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding218.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding219.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding22.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding220.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding221.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding222.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding223.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding224.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding225.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding226.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding227.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding228.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding229.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding23.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding230.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding231.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding232.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding233.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding234.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding235.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding236.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding237.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding238.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding24.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding25.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding26.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding27.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding28.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding29.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding3.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding30.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding31.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding32.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding33.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding34.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding35.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding36.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding37.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding38.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding39.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding4.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding40.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding41.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding42.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding43.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding44.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding45.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding46.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding47.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding48.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding49.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding5.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding50.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding51.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding52.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding53.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding54.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding55.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding56.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding57.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding58.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding59.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding6.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding60.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding61.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding62.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding63.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding64.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding65.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding66.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding67.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding68.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding69.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding7.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding70.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding71.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding72.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding73.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding74.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding75.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding76.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding77.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding78.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding79.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding8.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding80.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding81.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding82.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding83.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding84.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding85.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding86.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding87.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding88.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding9.yaml         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding90.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding91.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding92.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding93.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding94.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding95.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding96.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding97.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding98.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_role_binding99.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service.yaml               │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service1.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service10.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service100.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service101.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service102.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service103.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service104.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service105.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service106.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service107.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service108.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service109.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service11.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service110.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service111.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service112.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service113.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service114.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service115.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service116.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service117.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service118.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service119.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service12.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service120.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service121.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service122.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service123.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service124.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service125.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service126.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service127.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service128.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service129.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service13.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service130.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service131.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service132.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service133.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service134.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service135.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service136.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service137.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service138.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service139.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service14.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service140.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service141.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service142.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service143.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service144.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service145.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service146.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service147.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service148.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service149.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service15.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service150.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service151.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service152.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service154.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service155.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service156.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service157.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service158.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service159.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service16.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service160.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service161.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service162.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service163.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service164.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service165.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service166.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service167.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service168.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service169.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service17.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service170.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service171.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service172.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service173.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service174.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service175.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service176.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service178.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service179.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service18.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service180.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service181.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service182.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service183.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service184.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service185.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service186.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service187.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service188.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service189.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service19.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service190.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service191.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service192.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service193.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service194.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service195.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service196.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service197.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service198.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service199.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service2.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service20.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service200.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service209.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service21.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service210.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service211.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service212.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service213.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service214.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service215.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service216.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service217.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service218.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service219.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service22.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service220.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service221.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service222.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service223.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service224.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service225.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service226.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service227.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service228.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service229.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service23.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service230.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service231.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service232.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service233.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service234.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service235.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service236.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service237.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service24.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service25.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service26.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service27.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service28.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service29.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service3.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service30.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service31.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service32.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service33.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service34.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service35.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service36.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service37.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service38.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service39.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service4.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service40.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service41.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service42.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service43.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service44.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service45.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service46.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service47.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service48.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service49.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service5.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service50.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service51.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service52.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service53.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service54.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service55.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service56.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service57.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service58.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service59.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service6.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service60.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service61.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service62.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service63.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service64.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service65.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service66.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service67.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service68.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service69.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service7.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service70.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service71.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service72.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service73.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service74.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service75.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service76.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service77.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service78.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service79.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service8.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service80.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service81.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service82.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service83.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service84.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service85.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service86.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service87.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service88.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service9.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service90.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service91.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service92.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service93.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service94.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service95.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service96.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service97.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service98.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_proxy_service99.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_service.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auth_service1.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-approve-csrs-for-group.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-approve-csrs-for-group1.yaml     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-approve-renewals-for-nodes.yaml  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-approve-renewals-for-nodes1.yaml │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-pause.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-pause_1.yaml                     │ kubernetes │        20         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-scaler.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-scaler_1.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-scaler_2.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-scaler_3.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-scaler_4.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-scaler_5.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto-scaling.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ auto.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autodiscovery.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autodiscovery_1.yaml                  │ kubernetes │         3         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autodiscovery_2.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autodiscovery_3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autodiscovery_4.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autodiscovery_5.yaml                  │ kubernetes │         6         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-app-deployment.yaml         │ kubernetes │        15         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-app-media-pv.yaml           │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-app-media-pvc.yaml          │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-app-netpol.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-app-pod.yaml                │ kubernetes │        12         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-app-service.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-cm.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-container-limit-ranges.yaml │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-db-data-pv.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-db-data-pvc.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-db-deployment.yaml          │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-db-pod.yaml                 │ kubernetes │        11         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-db-service.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-developer-ns.yaml           │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-nginx-service.yaml          │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-resource-quota.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-server-monitor-cronjob.yaml │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ automagic-server-monitor-pod.yaml     │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autometrics.yaml                      │ kubernetes │        16         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autometrics1.yaml                     │ kubernetes │        16         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbb.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbb1.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbb1_1.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbb_1.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbbnfs.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbbnfs1.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbbnfs1_1.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnbbnfs_1.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnk.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnk1.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnk1_1.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnk_1.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnknfs.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnknfs1.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnknfs1_1.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonnnknfs_1.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonodelabeler_editor_role.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autonodelabeler_viewer_role.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autopilot-app.yaml                    │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autopilot-postgres.yaml               │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autopilot-postgres_1.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscailing.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscailing1.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscailing2.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscailing3.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscailing4.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale-log.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale-ping.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale-rules.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale-rules1.yaml                 │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale-rules2.yaml                 │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale-rules3.yaml                 │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale-rules4.yaml                 │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale20.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale21.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale22.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale30.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale31.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale32.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale33.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale40.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale41.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale42.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscale43.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom10_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom11_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_1.yaml            │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_5.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_6.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom12_9.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom13_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom14_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom15_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom16_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_1.yaml            │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_5.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_6.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom17_9.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom18_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom19_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom1_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom1_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom1_3.yaml             │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom1_4.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom1_5.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom1_6.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom1_7.yaml             │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_1.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_5.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_6.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom20_9.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_1.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_5.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_6.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom21_9.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_1.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_10.yaml           │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_3.yaml            │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_6.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_7.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom22_9.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_1.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_5.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_6.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom23_9.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24.yaml              │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_1.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_5.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_6.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom24_9.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom25_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom25_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom25_3.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom25_4.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom25_5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom25_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom25_7.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom26_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom26_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom26_3.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom26_4.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom26_5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom26_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom26_7.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_1.yaml            │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_4.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_5.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom27_8.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom28_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom28_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom28_3.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom28_4.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom28_5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom28_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom28_7.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom29_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom29_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom29_3.yaml            │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom29_4.yaml            │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom29_5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom29_6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom29_7.yaml            │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_1.yaml             │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_3.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_4.yaml             │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_5.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_6.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_7.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom2_8.yaml             │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom3_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom3_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom3_3.yaml             │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom3_4.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom3_5.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom3_6.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom3_7.yaml             │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom4_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom4_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom4_3.yaml             │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom4_4.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom4_5.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom4_6.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom4_7.yaml             │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom5_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom5_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom5_3.yaml             │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom5_4.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom5_5.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom5_6.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom5_7.yaml             │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom6_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom6_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom6_3.yaml             │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom6_4.yaml             │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom6_5.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom6_6.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom6_7.yaml             │ kubernetes │        36         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom7_1.yaml             │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom7_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom7_3.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom7_4.yaml             │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ autoscaler-custom7_5.yaml             │ kubernetes │         2         │
└───────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


auth_proxy_service.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service1.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service1.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service10.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service10.yaml:14-20
────────────────────────────────────────
  14 ┌   ports:
  15 │   - name: https
  16 │     port: 8443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service10.yaml:14-20
────────────────────────────────────────
  14 ┌   ports:
  15 │   - name: https
  16 │     port: 8443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service100.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service100.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service100.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service101.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service101.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service101.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service102.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service102.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service102.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service103.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service103.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service103.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service104.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service104.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service104.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service105.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service105.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service105.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service106.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service106.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service106.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service107.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service107.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service107.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service108.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service108.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service108.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service109.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service109.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service109.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service11.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service11.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service11.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service110.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service110.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service110.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service111.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service111.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service111.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service112.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service112.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service112.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service113.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service113.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service113.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service114.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service114.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service114.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service115.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service115.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service115.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service116.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service116.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service116.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service117.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service117.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service117.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service118.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service118.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service118.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service119.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service119.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service119.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service12.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service12.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service12.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service120.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service120.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service120.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service121.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service121.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service121.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service122.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service122.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service122.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service123.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service123.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: metrics
   8 │     port: 443
   9 │     protocol: TCP
  10 └     targetPort: metrics
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service123.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: metrics
   8 │     port: 443
   9 │     protocol: TCP
  10 └     targetPort: metrics
────────────────────────────────────────



auth_proxy_service124.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service124.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service124.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service125.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service125.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service125.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service126.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service126.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service126.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service127.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service127.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service127.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service128.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service128.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service128.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service129.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service129.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service129.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service13.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service13.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service13.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service130.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service130.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service130.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service131.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service131.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service131.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service132.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service132.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service132.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service133.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service133.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service133.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service134.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service134.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service134.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service135.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service135.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service135.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service136.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service136.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service136.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service137.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service137.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service137.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service138.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service138.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service138.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service139.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service139.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service139.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service14.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service14.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service14.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service140.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service140.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service140.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service141.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service141.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service141.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service142.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service142.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service142.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service143.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service143.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service143.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service144.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service144.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service144.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service145.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service145.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service145.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service146.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service146.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service146.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service147.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service147.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: kubeeye-controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service147.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: kubeeye-controller-manager
────────────────────────────────────────



auth_proxy_service148.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service148.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service148.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service149.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service149.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: 8080
  13 │   selector:
  14 └     control-plane: argocd-operator
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service149.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: 8080
  13 │   selector:
  14 └     control-plane: argocd-operator
────────────────────────────────────────



auth_proxy_service15.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service15.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service15.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service150.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service150.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service150.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service151.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service151.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service151.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service152.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service152.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service152.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service154.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service154.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service154.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service155.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service155.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service155.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service156.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service156.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service156.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service157.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service157.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service157.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service158.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service158.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service158.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service159.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service159.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service159.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service16.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service16.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service16.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service160.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service160.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service160.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service161.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service161.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service161.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service162.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service162.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service162.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service163.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service163.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service163.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service164.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service164.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service164.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service165.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service165.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service165.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service166.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service166.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service166.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service167.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service167.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: https
  10 │     port: 8443
  11 │     protocol: TCP
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service167.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: https
  10 │     port: 8443
  11 │     protocol: TCP
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service168.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service168.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service168.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service169.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service169.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service169.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service17.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service17.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service17.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service170.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service170.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service170.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service171.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service171.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service171.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service172.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service172.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service172.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service173.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service173.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service173.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service174.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service174.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service174.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service175.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service175.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service175.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service176.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service176.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service176.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service178.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service178.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service178.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service179.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service179.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service179.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service18.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service18.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service18.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service180.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service180.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service180.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service181.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service181.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service181.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service182.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service182.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service182.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service183.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service183.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service183.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service184.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service184.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service184.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service185.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service185.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service185.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service186.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service186.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service186.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service187.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service187.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service187.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │     - name: https
  17 │       port: 8443
  18 │       protocol: TCP
  19 │       targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service188.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service188.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service188.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service189.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service189.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service189.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service19.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service19.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service19.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service190.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service190.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service190.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service191.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service191.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service191.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service192.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service192.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service192.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service193.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service193.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service193.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service194.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service194.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service194.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service195.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service195.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service195.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service196.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service196.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service196.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service197.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service197.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service197.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service198.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service198.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service198.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service199.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service199.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service199.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service2.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service2.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service20.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service20.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service20.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service200.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service200.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service200.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service209.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service209.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service209.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service21.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service21.yaml:14-20
────────────────────────────────────────
  14 ┌   ports:
  15 │   - name: https
  16 │     port: 8443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service21.yaml:14-20
────────────────────────────────────────
  14 ┌   ports:
  15 │   - name: https
  16 │     port: 8443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service210.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service210.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service210.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service211.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service211.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service211.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service212.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service212.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     component: antrea-mc-controller
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service212.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     component: antrea-mc-controller
────────────────────────────────────────



auth_proxy_service213.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service213.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service213.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service214.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service214.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service214.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service215.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service215.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: curve-operator
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service215.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: curve-operator
────────────────────────────────────────



auth_proxy_service216.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service216.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service216.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service217.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service217.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service217.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service218.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service218.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service218.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service219.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service219.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service219.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service22.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service22.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service22.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service220.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service220.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service220.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service221.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service221.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service221.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service222.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service222.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service222.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service223.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service223.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service223.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service224.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service224.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service224.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service225.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service225.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service225.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service226.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service226.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service226.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service227.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service227.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service227.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service228.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service228.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service228.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     targetPort: https
  13 │   selector:
  14 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service229.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service229.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service229.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service23.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service23.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service23.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service230.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service230.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service230.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service231.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service231.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service231.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service232.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service232.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service232.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service233.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service233.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service233.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service234.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service234.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service234.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service235.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service235.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service235.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service236.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service236.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service236.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service237.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service237.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service237.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service24.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service24.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service24.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service25.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service25.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service25.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service26.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service26.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service26.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service27.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service27.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service27.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service28.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service28.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service28.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service29.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service29.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service29.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service3.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service3.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service3.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service30.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service30.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service30.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service31.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service31.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service31.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service32.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service32.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service32.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service33.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service33.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service33.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service34.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service34.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service34.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service35.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service35.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service35.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service36.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service36.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service36.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service37.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service37.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service37.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service38.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service38.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service38.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service39.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service39.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service39.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service4.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service4.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service4.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service40.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service40.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service40.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service41.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service41.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service41.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service42.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service42.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service42.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service43.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service43.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service43.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service44.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service44.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service44.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service45.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service45.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service45.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service46.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service46.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service46.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service47.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service47.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service47.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service48.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service48.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service48.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service49.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service49.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service49.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service5.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service5.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service5.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service50.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service50.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service50.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service51.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service51.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service51.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service52.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service52.yaml:13-19
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: https
  15 │     port: 8443
  16 │     protocol: TCP
  17 │     targetPort: https
  18 │   selector:
  19 └     control-plane: kubelb
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service52.yaml:13-19
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: https
  15 │     port: 8443
  16 │     protocol: TCP
  17 │     targetPort: https
  18 │   selector:
  19 └     control-plane: kubelb
────────────────────────────────────────



auth_proxy_service53.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service53.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service53.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service54.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service54.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service54.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service55.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service55.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service55.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service56.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service56.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service56.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service57.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service57.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service57.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service58.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service58.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service58.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service59.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service59.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service59.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service6.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service6.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service6.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service60.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service60.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service60.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service61.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service61.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service61.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service62.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service62.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service62.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service63.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service63.yaml:14-20
────────────────────────────────────────
  14 ┌   ports:
  15 │   - name: https
  16 │     port: 8443
  17 │     targetPort: https
  18 │   selector:
  19 │     control-plane: controller-manager
  20 └     controller-tools.k8s.io: "1.0"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service63.yaml:14-20
────────────────────────────────────────
  14 ┌   ports:
  15 │   - name: https
  16 │     port: 8443
  17 │     targetPort: https
  18 │   selector:
  19 │     control-plane: controller-manager
  20 └     controller-tools.k8s.io: "1.0"
────────────────────────────────────────



auth_proxy_service64.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service64.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service64.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service65.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service65.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service65.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service66.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service66.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service66.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service67.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service67.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service67.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service68.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service68.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service68.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service69.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service69.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service69.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service7.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service7.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service7.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service70.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service70.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service70.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service71.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service71.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service71.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service72.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service72.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service72.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service73.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service73.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service73.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service74.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service74.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service74.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service75.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service75.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service75.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service76.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service76.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service76.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │   - name: https
  13 │     port: 8443
  14 │     protocol: TCP
  15 │     targetPort: https
  16 │   selector:
  17 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service77.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service77.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service77.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service78.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service78.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service78.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service79.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service79.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service79.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service8.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service8.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service8.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service80.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service80.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service80.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service81.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service81.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service81.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service82.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service82.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service82.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service83.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service83.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service83.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service84.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service84.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service84.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service85.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service85.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service85.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service86.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service86.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service86.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service87.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service87.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service87.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service88.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service88.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service88.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service9.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service9.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service9.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service90.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service90.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service90.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service91.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service91.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service91.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service92.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service92.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service92.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service93.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service93.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service93.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service94.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service94.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service94.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service95.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service95.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service95.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service96.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service96.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service96.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service97.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service97.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service97.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service98.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service98.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service98.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_proxy_service99.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_proxy_service99.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_proxy_service99.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



auth_service.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_service.yaml:7-15
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   clusterIP: None
   9 │   ports:
  10 │   - port: 50100
  11 │     protocol: TCP
  12 │     targetPort: 50100
  13 │     name: tcp-http2
  14 │   selector:
  15 └     name: auth-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_service.yaml:7-15
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   clusterIP: None
   9 │   ports:
  10 │   - port: 50100
  11 │     protocol: TCP
  12 │     targetPort: 50100
  13 │     name: tcp-http2
  14 │   selector:
  15 └     name: auth-server
────────────────────────────────────────



auth_service1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auth_service1.yaml:7-15
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   clusterIP: None
   9 │   ports:
  10 │   - port: 50100
  11 │     protocol: TCP
  12 │     targetPort: 50100
  13 │     name: tcp-http2
  14 │   selector:
  15 └     name: auth-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auth_service1.yaml:7-15
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   clusterIP: None
   9 │   ports:
  10 │   - port: 50100
  11 │     protocol: TCP
  12 │     targetPort: 50100
  13 │     name: tcp-http2
  14 │   selector:
  15 └     name: auth-server
────────────────────────────────────────



auto-pause_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'auto-pause' of Deployment 'auto-pause-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'auto-pause' of 'deployment' 'auto-pause-proxy' in 'auto-pause' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'auto-pause' of Deployment 'auto-pause-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'auto-pause-proxy' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 auto-pause_1.yaml:10-42
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: auto-pause-proxy
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 │       labels:
  18 └         app: auto-pause-proxy
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'auto-pause' of Deployment 'auto-pause-proxy' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-pause_1.yaml:10-42
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: auto-pause-proxy
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 │       labels:
  18 └         app: auto-pause-proxy
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-pause_1.yaml:10-42
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: auto-pause-proxy
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 │       labels:
  18 └         app: auto-pause-proxy
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "auto-pause" of deployment "auto-pause-proxy" in "auto-pause" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container auto-pause-proxy in auto-pause namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 auto-pause_1.yaml:30-42
────────────────────────────────────────
  30 ┌       - name: auto-pause
  31 │         image: haproxy:2.3.5-alpine
  32 │         ports:
  33 │         - name: https
  34 │           containerPort: 6443
  35 │           hostPort: 32443
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - name: ha-cfg
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment auto-pause-proxy in auto-pause namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 auto-pause_1.yaml:20-42
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: ha-cfg
  22 │         hostPath:
  23 │           path: /var/lib/minikube/haproxy.cfg
  24 │           type: File
  25 │       - name: lua-script
  26 │         hostPath:
  27 │           path: /var/lib/minikube/unpause.lua
  28 └           type: File
  ..   
────────────────────────────────────────



auto-scaler.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-scaler.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: gateway-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-scaler.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: gateway-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



auto-scaler_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-scaler_1.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: auth-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-scaler_1.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: auth-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



auto-scaler_2.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-scaler_2.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: product-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-scaler_2.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: product-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



auto-scaler_3.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-scaler_3.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: order-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-scaler_3.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: order-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



auto-scaler_4.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-scaler_4.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: inventory-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-scaler_4.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: inventory-svc-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



auto-scaler_5.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-scaler_5.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: web-app-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-scaler_5.yaml:7-13
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: web-app-pods
  11 │   minReplicas: 1
  12 │   maxReplicas: 3
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



auto-scaling.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto-scaling.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 20
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: apps/v1
  11 │     kind: Deployment
  12 │     name: php-apache
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto-scaling.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 20
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: apps/v1
  11 │     kind: Deployment
  12 │     name: php-apache
  13 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



auto.yaml (kubernetes)
======================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 auto.yaml:6-18
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: homepage-deployment
  10 │   minReplicas: 1
  11 │   maxReplicas: 5
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 auto.yaml:6-18
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: homepage-deployment
  10 │   minReplicas: 1
  11 │   maxReplicas: 5
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────



autodiscovery_1.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 114, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autodiscovery_1.yaml:97-106
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - batch
  99 │   - extensions
 100 │   resources:
 101 │   - jobs
 102 │   verbs:
 103 │   - get
 104 │   - list
 105 │   - watch
 106 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autodiscovery_1.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autodiscovery_1.yaml:29-37
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - ''
  31 │   resources:
  32 │   - endpoints
  33 │   resourceNames:
  34 │   - cluster-autoscaler
  35 │   verbs:
  36 │   - get
  37 └   - update
────────────────────────────────────────



autodiscovery_2.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autodiscovery_2.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 │   - create
  16 │   - list
  17 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autodiscovery_2.yaml:18-29
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - configmaps
  22 │   resourceNames:
  23 │   - cluster-autoscaler-status
  24 │   - cluster-autoscaler-priority-expander
  25 │   verbs:
  26 └   - delete
  ..   
────────────────────────────────────────



autodiscovery_5.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 110, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 3, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0021 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autodiscovery_5.yaml:30-59
────────────────────────────────────────
  30 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2
  31 │         name: cluster-autoscaler
  32 │         resources:
  33 │           limits:
  34 │             cpu: 100m
  35 │             memory: 600Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autodiscovery_5.yaml:9-63
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autodiscovery_5.yaml:9-63
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autodiscovery_5.yaml:9-63
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autodiscovery_5.yaml:9-63
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autodiscovery_5.yaml:30-59
────────────────────────────────────────
  30 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2
  31 │         name: cluster-autoscaler
  32 │         resources:
  33 │           limits:
  34 │             cpu: 100m
  35 │             memory: 600Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 200Mi
  ..   
────────────────────────────────────────



automagic-app-deployment.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'app' of Deployment 'automagic-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'automagic-app-deployment' in 'automagic-developer' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'automagic-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'automagic-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'automagic-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'automagic-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'automagic-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'automagic-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'automagic-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-app-deployment.yaml:12-86
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   strategy:  
  14 │    type: RollingUpdate
  15 │    rollingUpdate:
  16 │      maxUnavailable: 1
  17 │   selector:
  18 │     matchLabels:
  19 │       name: automagic-app-pod
  20 └       environment: production
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-app-deployment.yaml:12-86
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   strategy:  
  14 │    type: RollingUpdate
  15 │    rollingUpdate:
  16 │      maxUnavailable: 1
  17 │   selector:
  18 │     matchLabels:
  19 │       name: automagic-app-pod
  20 └       environment: production
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "automagic-app-deployment" in "automagic-developer" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in deployment automagic-app-deployment (namespace: automagic-developer) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 automagic-app-deployment.yaml:43-82
────────────────────────────────────────
  43 ┌         - name: app
  44 │           image: mabdelgawad94/automagic_developer:latest
  45 │           imagePullPolicy: Always
  46 │           ports:
  47 │             - containerPort: 8000
  48 │           readinessProbe:
  49 │             httpGet:
  50 │               path: /
  51 └               port: 8000
  ..   
────────────────────────────────────────



automagic-app-media-pv.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-app-media-pv.yaml:7-15
────────────────────────────────────────
   7 ┌   capacity:
   8 │     storage: 100M
   9 │   accessModes:
  10 │     - ReadWriteMany
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   storageClassName: nfs
  13 │   nfs:
  14 │     path: /mnt/nfs/automagic_stack/app_media
  15 └     server: 157.230.12.200
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-app-media-pv.yaml:7-15
────────────────────────────────────────
   7 ┌   capacity:
   8 │     storage: 100M
   9 │   accessModes:
  10 │     - ReadWriteMany
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   storageClassName: nfs
  13 │   nfs:
  14 │     path: /mnt/nfs/automagic_stack/app_media
  15 └     server: 157.230.12.200
────────────────────────────────────────



automagic-app-media-pvc.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-app-media-pvc.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 │       storage: 100M
  12 └   storageClassName: nfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-app-media-pvc.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 │       storage: 100M
  12 └   storageClassName: nfs
────────────────────────────────────────



automagic-app-netpol.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-app-netpol.yaml:7-22
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       name: automagic-app-pod
  10 │   policyTypes:
  11 │     - Ingress
  12 │     - Egress
  13 │   ingress:
  14 │     - from:
  15 └         - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-app-netpol.yaml:7-22
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       name: automagic-app-pod
  10 │   policyTypes:
  11 │     - Ingress
  12 │     - Egress
  13 │   ingress:
  14 │     - from:
  15 └         - podSelector:
  ..   
────────────────────────────────────────



automagic-app-pod.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'app' of Pod 'automagic-app-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'automagic-app-pod' in 'automagic-developer' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'automagic-app-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'automagic-app-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'automagic-app-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'automagic-app-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-app-pod.yaml:14-68
────────────────────────────────────────
  14 ┌   securityContext:
  15 │       runAsUser: 1000
  16 │       runAsGroup: 1000
  17 │       fsGroup: 1000
  18 │   imagePullSecrets:
  19 │     - name: dockerhub-secret
  20 │   restartPolicy: Always
  21 │   containers:
  22 └     - name: app
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-app-pod.yaml:14-68
────────────────────────────────────────
  14 ┌   securityContext:
  15 │       runAsUser: 1000
  16 │       runAsGroup: 1000
  17 │       fsGroup: 1000
  18 │   imagePullSecrets:
  19 │     - name: dockerhub-secret
  20 │   restartPolicy: Always
  21 │   containers:
  22 └     - name: app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "automagic-app-pod" in "automagic-developer" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in pod automagic-app-pod (namespace: automagic-developer) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 automagic-app-pod.yaml:22-64
────────────────────────────────────────
  22 ┌     - name: app
  23 │       image: mabdelgawad94/automagic_developer:app-afc1233
  24 │       imagePullPolicy: IfNotPresent
  25 │       ports:
  26 │         - containerPort: 8000
  27 │       readinessProbe:
  28 │         httpGet:
  29 │           path: /
  30 └           port: 8000
  ..   
────────────────────────────────────────



automagic-app-service.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-app-service.yaml:12-19
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 8000
  14 │     targetPort: 8000
  15 │   selector:
  16 │     name: automagic-app-pod
  17 │     environment: production
  18 │     app: automagic-developer
  19 └     service-type: application
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-app-service.yaml:12-19
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 8000
  14 │     targetPort: 8000
  15 │   selector:
  16 │     name: automagic-app-pod
  17 │     environment: production
  18 │     app: automagic-developer
  19 └     service-type: application
────────────────────────────────────────



automagic-cm.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'automagic-cm' in 'automagic-developer' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME", "EMAIL_HOST", "EMAIL_HOST_USER", "EMAIL_PORT", "EMAIL_USE_TLS"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



automagic-container-limit-ranges.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-container-limit-ranges.yaml:7-20
────────────────────────────────────────
   7 ┌   limits:
   8 │     - default: # this section defines default limits
   9 │         cpu: 1000m
  10 │         memory: 1G
  11 │       defaultRequest: # this section defines default requests
  12 │         cpu: 10m
  13 │         memory: 10M
  14 │       max: # max and min define the limit range
  15 └         cpu: 2000m
  ..   
────────────────────────────────────────



automagic-db-data-pv.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-db-data-pv.yaml:7-15
────────────────────────────────────────
   7 ┌   capacity:
   8 │     storage: 500M
   9 │   accessModes:
  10 │     - ReadWriteMany
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   storageClassName: nfs
  13 │   nfs:
  14 │     path: /mnt/nfs/automagic_stack/db_data/
  15 └     server: 157.230.12.200
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-db-data-pv.yaml:7-15
────────────────────────────────────────
   7 ┌   capacity:
   8 │     storage: 500M
   9 │   accessModes:
  10 │     - ReadWriteMany
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   storageClassName: nfs
  13 │   nfs:
  14 │     path: /mnt/nfs/automagic_stack/db_data/
  15 └     server: 157.230.12.200
────────────────────────────────────────



automagic-db-data-pvc.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-db-data-pvc.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 │       storage: 500M
  12 └   storageClassName: nfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-db-data-pvc.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 │       storage: 500M
  12 └   storageClassName: nfs
────────────────────────────────────────



automagic-db-deployment.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'db' of Deployment 'automagic-db-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'deployment' 'automagic-db-deployment' in 'automagic-developer' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'db' of Deployment 'automagic-db-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Deployment 'automagic-db-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Deployment 'automagic-db-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'db' of Deployment 'automagic-db-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Deployment 'automagic-db-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Deployment 'automagic-db-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-db-deployment.yaml:12-80
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   strategy:
  14 │    type: RollingUpdate
  15 │    rollingUpdate:
  16 │      maxUnavailable: 1
  17 │   selector:
  18 │     matchLabels:
  19 │       name: automagic-db-pod
  20 └       environment: production
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-db-deployment.yaml:12-80
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   strategy:
  14 │    type: RollingUpdate
  15 │    rollingUpdate:
  16 │      maxUnavailable: 1
  17 │   selector:
  18 │     matchLabels:
  19 │       name: automagic-db-pod
  20 └       environment: production
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of deployment "automagic-db-deployment" in "automagic-developer" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 automagic-db-deployment.yaml:41-76
────────────────────────────────────────
  41 ┌         - name: db
  42 │           image: postgres:14.8
  43 │           imagePullPolicy: IfNotPresent
  44 │           ports:
  45 │             - containerPort: 5432
  46 │           readinessProbe:
  47 │             tcpSocket:
  48 │               port: 5432
  49 └             initialDelaySeconds: 10
  ..   
────────────────────────────────────────



automagic-db-pod.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 105, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'db' of Pod 'automagic-db-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'pod' 'automagic-db-pod' in 'automagic-developer' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Pod 'automagic-db-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Pod 'automagic-db-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Pod 'automagic-db-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Pod 'automagic-db-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-db-pod.yaml:14-62
────────────────────────────────────────
  14 ┌   securityContext:
  15 │       runAsUser: 999
  16 │   imagePullSecrets:
  17 │     - name: dockerhub-secret
  18 │   restartPolicy: Always
  19 │   containers:
  20 │     - name: db
  21 │       image: postgres:14.8
  22 └       imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-db-pod.yaml:14-62
────────────────────────────────────────
  14 ┌   securityContext:
  15 │       runAsUser: 999
  16 │   imagePullSecrets:
  17 │     - name: dockerhub-secret
  18 │   restartPolicy: Always
  19 │   containers:
  20 │     - name: db
  21 │       image: postgres:14.8
  22 └       imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of pod "automagic-db-pod" in "automagic-developer" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 automagic-db-pod.yaml:20-58
────────────────────────────────────────
  20 ┌     - name: db
  21 │       image: postgres:14.8
  22 │       imagePullPolicy: IfNotPresent
  23 │       ports:
  24 │         - containerPort: 5432
  25 │       readinessProbe:
  26 │         tcpSocket:
  27 │           port: 5432
  28 └         initialDelaySeconds: 10
  ..   
────────────────────────────────────────



automagic-db-service.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-db-service.yaml:12-20
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 5432
  14 │     targetPort: 5432
  15 │   selector:
  16 │     name: automagic-db-pod
  17 │     app: automagic-developer
  18 │     environment: production
  19 │     service-type: database
  20 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-db-service.yaml:12-20
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 5432
  14 │     targetPort: 5432
  15 │   selector:
  16 │     name: automagic-db-pod
  17 │     app: automagic-developer
  18 │     environment: production
  19 │     service-type: database
  20 └   type: ClusterIP
────────────────────────────────────────



automagic-nginx-service.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-nginx-service.yaml:12-19
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 8080
  14 │     targetPort: 8080
  15 │   selector:
  16 │     name: automagic-nginx-pod
  17 │     environment: production
  18 │     app: automagic-developer
  19 └     service-type: frontend
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-nginx-service.yaml:12-19
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 8080
  14 │     targetPort: 8080
  15 │   selector:
  16 │     name: automagic-nginx-pod
  17 │     environment: production
  18 │     app: automagic-developer
  19 └     service-type: frontend
────────────────────────────────────────



automagic-resource-quota.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-resource-quota.yaml:7-11
────────────────────────────────────────
   7 ┌   hard:
   8 │     requests.cpu: 4000m
   9 │     requests.memory: 4000M
  10 │     limits.cpu: 8000m
  11 └     limits.memory: 8000M
────────────────────────────────────────



automagic-server-monitor-cronjob.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server-monitor' of CronJob 'automagic-server-monitor-cronjob' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server-monitor' of CronJob 'automagic-server-monitor-cronjob' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server-monitor' of 'cronjob' 'automagic-server-monitor-cronjob' in 'automagic-developer' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server-monitor' of CronJob 'automagic-server-monitor-cronjob' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server-monitor' of CronJob 'automagic-server-monitor-cronjob' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server-monitor' of CronJob 'automagic-server-monitor-cronjob' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server-monitor' of CronJob 'automagic-server-monitor-cronjob' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:12-53
────────────────────────────────────────
  12 ┌   schedule: '* * * * *'
  13 │   successfulJobsHistoryLimit: 3
  14 │   failedJobsHistoryLimit: 3
  15 │   concurrencyPolicy: Forbid
  16 │   suspend: false
  17 │   jobTemplate:
  18 │     spec:
  19 │       template:
  20 └         metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:12-53
────────────────────────────────────────
  12 ┌   schedule: '* * * * *'
  13 │   successfulJobsHistoryLimit: 3
  14 │   failedJobsHistoryLimit: 3
  15 │   concurrencyPolicy: Forbid
  16 │   suspend: false
  17 │   jobTemplate:
  18 │     spec:
  19 │       template:
  20 └         metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server-monitor" of cronjob "automagic-server-monitor-cronjob" in "automagic-developer" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server-monitor in cronjob automagic-server-monitor-cronjob (namespace: automagic-developer) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 automagic-server-monitor-cronjob.yaml:37-53
────────────────────────────────────────
  37 ┌             - name: server-monitor
  38 │               image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  39 │               imagePullPolicy: IfNotPresent
  40 │               resources:
  41 │                 requests:
  42 │                   memory: "10M"
  43 │                   cpu: 0.01
  44 │                 limits:
  45 └                   memory: "2G"
  ..   
────────────────────────────────────────



automagic-server-monitor-pod.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server-monitor' of Pod 'automagic-server-monitor-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server-monitor' of Pod 'automagic-server-monitor-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server-monitor' of 'pod' 'automagic-server-monitor-pod' in 'automagic-developer' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server-monitor' of Pod 'automagic-server-monitor-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server-monitor' of Pod 'automagic-server-monitor-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server-monitor' of Pod 'automagic-server-monitor-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server-monitor' of Pod 'automagic-server-monitor-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:14-36
────────────────────────────────────────
  14 ┌   securityContext:
  15 │       runAsUser: 99
  16 │   imagePullSecrets:
  17 │     - name: dockerhub-secret
  18 │   restartPolicy: Always
  19 │   containers:
  20 │     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 └       imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:14-36
────────────────────────────────────────
  14 ┌   securityContext:
  15 │       runAsUser: 99
  16 │   imagePullSecrets:
  17 │     - name: dockerhub-secret
  18 │   restartPolicy: Always
  19 │   containers:
  20 │     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 └       imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server-monitor" of pod "automagic-server-monitor-pod" in "automagic-developer" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server-monitor in pod automagic-server-monitor-pod (namespace: automagic-developer) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 automagic-server-monitor-pod.yaml:20-36
────────────────────────────────────────
  20 ┌     - name: server-monitor
  21 │       image: mabdelgawad94/automagic_developer:server_monitor-f00335e
  22 │       imagePullPolicy: IfNotPresent
  23 │       resources:
  24 │         requests:
  25 │           memory: "10M"
  26 │           cpu: 0.01
  27 │         limits:
  28 └           memory: "2G"
  ..   
────────────────────────────────────────



autometrics.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'autometrics' of Deployment 'autometrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'autometrics' of 'deployment' 'autometrics' in 'prometheus' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'autometrics' of Deployment 'autometrics' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autometrics.yaml:8-30
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: autometrics
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: autometrics
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autometrics.yaml:8-30
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: autometrics
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: autometrics
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "autometrics" of deployment "autometrics" in "prometheus" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container autometrics in prometheus namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment autometrics in prometheus namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autometrics.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container autometrics in deployment autometrics (namespace: prometheus) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autometrics.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────



autometrics1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'autometrics' of Deployment 'autometrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'autometrics' of 'deployment' 'autometrics' in 'prometheus' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'autometrics' of Deployment 'autometrics' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'autometrics' of Deployment 'autometrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autometrics1.yaml:8-30
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: autometrics
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: autometrics
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autometrics1.yaml:8-30
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: autometrics
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: autometrics
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "autometrics" of deployment "autometrics" in "prometheus" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container autometrics in prometheus namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment autometrics in prometheus namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autometrics1.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container autometrics in deployment autometrics (namespace: prometheus) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autometrics1.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: autometrics
  18 │           image: autometrics/am-proxy
  19 │           resources:
  20 │             requests:
  21 │               memory: 128Mi
  22 │               cpu: 100m
  23 │             limits:
  24 │               memory: 256Mi
  25 └               cpu: 200m
  ..   
────────────────────────────────────────



autonnbb.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-autonnbb' of 'deployment' 'autonnbb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-autonnbb' of Deployment 'autonnbb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbb.yaml:6-50
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnbb
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnbb
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbb.yaml:6-50
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnbb
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnbb
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-autonnbb" of deployment "autonnbb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment autonnbb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 autonnbb.yaml:4
────────────────────────────────────────
   4 [   name: autonnbb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container autonnbb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnbb.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment autonnbb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnbb.yaml:14-50
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 └         volumeMounts:
  ..   
────────────────────────────────────────



autonnbb1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-autonnbb' of 'deployment' 'autonnbb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-autonnbb' of Deployment 'autonnbb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-autonnbb' of Deployment 'autonnbb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbb1.yaml:6-50
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnbb
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnbb
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbb1.yaml:6-50
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnbb
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnbb
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-autonnbb" of deployment "autonnbb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment autonnbb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 autonnbb1.yaml:4
────────────────────────────────────────
   4 [   name: autonnbb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container autonnbb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnbb1.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 │         volumeMounts:
  23 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment autonnbb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnbb1.yaml:14-50
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: tango-autonnbb
  16 │         image: tango_autonn_bb
  17 │         imagePullPolicy: Never
  18 │         resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 2048Mi
  22 └         volumeMounts:
  ..   
────────────────────────────────────────



autonnbb1_1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbb1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: autonnbb
   9 │   ports:
  10 │   - port: 8087
  11 │     targetPort: 8087
  12 └     nodePort: 8087
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbb1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: autonnbb
   9 │   ports:
  10 │   - port: 8087
  11 │     targetPort: 8087
  12 └     nodePort: 8087
────────────────────────────────────────



autonnbb_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbb_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: autonnbb
   9 │   ports:
  10 │   - port: 8087
  11 │     targetPort: 8087
  12 └     nodePort: 8087
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbb_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: autonnbb
   9 │   ports:
  10 │   - port: 8087
  11 │     targetPort: 8087
  12 └     nodePort: 8087
────────────────────────────────────────



autonnbbnfs.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbbnfs.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnbb
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbbnfs.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnbb
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────



autonnbbnfs1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbbnfs1.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnbb
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbbnfs1.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnbb
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────



autonnbbnfs1_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbbnfs1_1.yaml:8-16
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   nfs:
  15 │     path: /home/etri-1/TANGO/autonn/backbone_nas
  16 └     server: 192.168.0.181
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbbnfs1_1.yaml:8-16
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   nfs:
  15 │     path: /home/etri-1/TANGO/autonn/backbone_nas
  16 └     server: 192.168.0.181
────────────────────────────────────────



autonnbbnfs_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnbbnfs_1.yaml:8-16
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   nfs:
  15 │     path: /home/etri-1/TANGO/autonn/backbone_nas
  16 └     server: 192.168.0.181
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnbbnfs_1.yaml:8-16
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   nfs:
  15 │     path: /home/etri-1/TANGO/autonn/backbone_nas
  16 └     server: 192.168.0.181
────────────────────────────────────────



autonnnk.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-autonnnk' of 'deployment' 'autonnnk' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-autonnnk' of Deployment 'autonnnk' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnk.yaml:6-48
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnnk
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnnk
  13 │     spec:
  14 └       nodeName: etri-1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnk.yaml:6-48
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnnk
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnnk
  13 │     spec:
  14 └       nodeName: etri-1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-autonnnk" of deployment "autonnnk" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment autonnnk in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 autonnnk.yaml:4
────────────────────────────────────────
   4 [   name: autonnnk
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container autonnnk in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnnk.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment autonnnk in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnnk.yaml:14-48
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 └             memory: 2048Mi
  ..   
────────────────────────────────────────



autonnnk1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-autonnnk' of 'deployment' 'autonnnk' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-autonnnk' of Deployment 'autonnnk' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-autonnnk' of Deployment 'autonnnk' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnk1.yaml:6-48
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnnk
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnnk
  13 │     spec:
  14 └       nodeName: etri-1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnk1.yaml:6-48
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: autonnnk
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: autonnnk
  13 │     spec:
  14 └       nodeName: etri-1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-autonnnk" of deployment "autonnnk" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment autonnnk in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 autonnnk1.yaml:4
────────────────────────────────────────
   4 [   name: autonnnk
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container autonnnk in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnnk1.yaml:16-36
────────────────────────────────────────
  16 ┌       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment autonnnk in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autonnnk1.yaml:14-48
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-autonnnk
  17 │         image: tango_autonn_nk
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 └             memory: 2048Mi
  ..   
────────────────────────────────────────



autonnnk1_1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnk1_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: autonnnk
   8 │   ports:
   9 │   - port: 8089
  10 └     targetPort: 8089
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnk1_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: autonnnk
   8 │   ports:
   9 │   - port: 8089
  10 └     targetPort: 8089
────────────────────────────────────────



autonnnk_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnk_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: autonnnk
   8 │   ports:
   9 │   - port: 8089
  10 └     targetPort: 8089
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnk_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: autonnnk
   8 │   ports:
   9 │   - port: 8089
  10 └     targetPort: 8089
────────────────────────────────────────



autonnnknfs.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnknfs.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnnk
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnknfs.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnnk
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────



autonnnknfs1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnknfs1.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnnk
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnknfs1.yaml:6-14
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   volumeMode: Filesystem
  10 │   selector:
  11 │     matchLabels:
  12 │       name: autonnnk
  13 │   accessModes:
  14 └   - ReadWriteMany
────────────────────────────────────────



autonnnknfs1_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnknfs1_1.yaml:8-15
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   hostPath:
  15 └     path: /home/etri-1/TANGO/autonn/neck_nas
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnknfs1_1.yaml:8-15
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   hostPath:
  15 └     path: /home/etri-1/TANGO/autonn/neck_nas
────────────────────────────────────────



autonnnknfs_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autonnnknfs_1.yaml:8-15
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   hostPath:
  15 └     path: /home/etri-1/TANGO/autonn/neck_nas
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autonnnknfs_1.yaml:8-15
────────────────────────────────────────
   8 ┌   capacity:
   9 │     storage: 5Gi
  10 │   volumeMode: Filesystem
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Recycle
  14 │   hostPath:
  15 └     path: /home/etri-1/TANGO/autonn/neck_nas
────────────────────────────────────────



autopilot-app.yaml (kubernetes)
===============================
Tests: 132 (SUCCESSES: 96, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 23, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgbench' of Deployment 'pgbench' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'pgbench' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgbench' of Deployment 'pgbench' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'pgbench' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgbench' of 'deployment' 'pgbench' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'pgbench' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgbench' of Deployment 'pgbench' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'pgbench' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgbench' of Deployment 'pgbench' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'pgbench' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgbench' of Deployment 'pgbench' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgbench' of Deployment 'pgbench' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'pgbench' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgbench' of Deployment 'pgbench' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'pgbench' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgbench' of Deployment 'pgbench' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'pgbench' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgbench' of Deployment 'pgbench' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'pgbench' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgbench' of Deployment 'pgbench' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'pgbench' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgbench' of Deployment 'pgbench' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'pgbench' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autopilot-app.yaml:8-61
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: pgbench
  11 │   strategy:
  12 │     rollingUpdate:
  13 │       maxSurge: 1
  14 │       maxUnavailable: 1
  15 │     type: RollingUpdate
  16 └   replicas: 1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autopilot-app.yaml:8-61
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: pgbench
  11 │   strategy:
  12 │     rollingUpdate:
  13 │       maxSurge: 1
  14 │       maxUnavailable: 1
  15 │     type: RollingUpdate
  16 └   replicas: 1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgbench" of deployment "pgbench" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "pgbench" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgbench in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 autopilot-app.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pgbench
   5 │   labels:
   6 └     app: pgbench
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgbench in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgbench in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autopilot-app.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 │             value: pgbench
  31 │           - name: POSTGRES_PASSWORD
  32 └             value: superpostgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgbench in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 autopilot-app.yaml:22-61
────────────────────────────────────────
  22 ┌       schedulerName: stork
  23 │       containers:
  24 │         - image: postgres:9.5
  25 │           name: postgres
  26 │           ports:
  27 │           - containerPort: 5432
  28 │           env:
  29 │           - name: POSTGRES_USER
  30 └             value: pgbench
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgbench in deployment pgbench (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autopilot-app.yaml:40-54
────────────────────────────────────────
  40 ┌         - name: pgbench
  41 │           image: portworx/torpedo-pgbench:latest
  42 │           imagePullPolicy: "Always"
  43 │           env:
  44 │             - name: PG_HOST
  45 │               value: 127.0.0.1
  46 │             - name: PG_USER
  47 │               value: pgbench
  48 └             - name: SIZE
  ..   
────────────────────────────────────────



autopilot-postgres.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autopilot-postgres.yaml:8-13
────────────────────────────────────────
   8 ┌   storageClassName: block-sc
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 10Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autopilot-postgres.yaml:8-13
────────────────────────────────────────
   8 ┌   storageClassName: block-sc
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 10Gi
────────────────────────────────────────



autopilot-postgres_1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autopilot-postgres_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: block-sc
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autopilot-postgres_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: block-sc
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



autoscailing.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscailing.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: account-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscailing.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: account-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────



autoscailing1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscailing1.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: api-gateway
  11 │   minReplicas: 1
  12 │   maxReplicas: 20
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscailing1.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: api-gateway
  11 │   minReplicas: 1
  12 │   maxReplicas: 20
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────



autoscailing2.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscailing2.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: auth-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscailing2.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: auth-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────



autoscailing3.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscailing3.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: book-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscailing3.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: book-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────



autoscailing4.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscailing4.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: progress-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscailing4.yaml:7-20
────────────────────────────────────────
   7 ┌   scaleTargetRef:
   8 │     apiVersion: apps/v1
   9 │     kind: Deployment
  10 │     name: progress-api
  11 │   minReplicas: 1
  12 │   maxReplicas: 10
  13 │   metrics:
  14 │     - type: Pods
  15 └       pods:
  ..   
────────────────────────────────────────



autoscale-log.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale-log.yaml:7-19
────────────────────────────────────────
   7 ┌  scaleTargetRef:
   8 │    apiVersion: apps/v1
   9 │    kind: Deployment
  10 │    name: log-output
  11 │  minReplicas: 1
  12 │  maxReplicas: 6
  13 │  metrics:
  14 │  - type: Resource
  15 └    resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale-log.yaml:7-19
────────────────────────────────────────
   7 ┌  scaleTargetRef:
   8 │    apiVersion: apps/v1
   9 │    kind: Deployment
  10 │    name: log-output
  11 │  minReplicas: 1
  12 │  maxReplicas: 6
  13 │  metrics:
  14 │  - type: Resource
  15 └    resource:
  ..   
────────────────────────────────────────



autoscale-ping.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale-ping.yaml:7-19
────────────────────────────────────────
   7 ┌  scaleTargetRef:
   8 │    apiVersion: apps/v1
   9 │    kind: Deployment
  10 │    name: ping-pong
  11 │  minReplicas: 1
  12 │  maxReplicas: 6
  13 │  metrics:
  14 │  - type: Resource
  15 └    resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale-ping.yaml:7-19
────────────────────────────────────────
   7 ┌  scaleTargetRef:
   8 │    apiVersion: apps/v1
   9 │    kind: Deployment
  10 │    name: ping-pong
  11 │  minReplicas: 1
  12 │  maxReplicas: 6
  13 │  metrics:
  14 │  - type: Resource
  15 └    resource:
  ..   
────────────────────────────────────────



autoscale-rules.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale-rules.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale-rules.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────



autoscale-rules1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale-rules1.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale-rules1.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────



autoscale-rules2.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale-rules2.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale-rules2.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────



autoscale-rules3.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale-rules3.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale-rules3.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────



autoscale-rules4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale-rules4.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale-rules4.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 4
   8 │   minReplicas: 1
   9 │   scaleTargetRef:
  10 │     apiVersion: extensions/v1beta1
  11 │     kind: Deployment
  12 │     name: api-gateway
  13 └   targetCPUUtilizationPercentage: 400
────────────────────────────────────────



autoscale20.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale20.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale20.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────



autoscale21.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale21.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale21.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────



autoscale22.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale22.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale22.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────



autoscale30.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale30.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale30.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────



autoscale31.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale31.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale31.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────



autoscale32.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale32.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale32.yaml:15-27
────────────────────────────────────────
  15 ┌   maxReplicas: 5
  16 │   minReplicas: 1
  17 │   scaleTargetRef:
  18 │     apiVersion: apps/v1
  19 │     kind: Deployment
  20 │     name: istiod
  21 │   metrics:
  22 │   - type: Resource
  23 └     resource:
  ..   
────────────────────────────────────────



autoscale33.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale33.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 9
   8 │   minReplicas: 5
   9 │   scaleTargetRef:
  10 │     apiVersion: apps/v1
  11 │     kind: Deployment
  12 │     name: myapp
  13 └   targetCPUUtilizationPercentage: 60
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale33.yaml:7-13
────────────────────────────────────────
   7 ┌   maxReplicas: 9
   8 │   minReplicas: 5
   9 │   scaleTargetRef:
  10 │     apiVersion: apps/v1
  11 │     kind: Deployment
  12 │     name: myapp
  13 └   targetCPUUtilizationPercentage: 60
────────────────────────────────────────



autoscale40.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale40.yaml:12-24
────────────────────────────────────────
  12 ┌   maxReplicas: dynamic_parameters
  13 │   minReplicas: dynamic_parameters
  14 │   scaleTargetRef:
  15 │     apiVersion: apps/v1
  16 │     kind: Deployment
  17 │     name: dynamic_parameters
  18 │   metrics:
  19 │   - type: Resource
  20 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale40.yaml:12-24
────────────────────────────────────────
  12 ┌   maxReplicas: dynamic_parameters
  13 │   minReplicas: dynamic_parameters
  14 │   scaleTargetRef:
  15 │     apiVersion: apps/v1
  16 │     kind: Deployment
  17 │     name: dynamic_parameters
  18 │   metrics:
  19 │   - type: Resource
  20 └     resource:
  ..   
────────────────────────────────────────



autoscale41.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale41.yaml:12-24
────────────────────────────────────────
  12 ┌   maxReplicas: dynamic_parameters
  13 │   minReplicas: dynamic_parameters
  14 │   scaleTargetRef:
  15 │     apiVersion: apps/v1
  16 │     kind: Deployment
  17 │     name: dynamic_parameters
  18 │   metrics:
  19 │   - type: Resource
  20 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale41.yaml:12-24
────────────────────────────────────────
  12 ┌   maxReplicas: dynamic_parameters
  13 │   minReplicas: dynamic_parameters
  14 │   scaleTargetRef:
  15 │     apiVersion: apps/v1
  16 │     kind: Deployment
  17 │     name: dynamic_parameters
  18 │   metrics:
  19 │   - type: Resource
  20 └     resource:
  ..   
────────────────────────────────────────



autoscale42.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale42.yaml:12-30
────────────────────────────────────────
  12 ┌   maxReplicas: dynamic_parameters
  13 │   minReplicas: dynamic_parameters
  14 │   scaleTargetRef:
  15 │     apiVersion: apps/v1
  16 │     kind: Deployment
  17 │   metrics:
  18 │   - type: Resource
  19 │     resource:
  20 └       name: cpu
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale42.yaml:12-30
────────────────────────────────────────
  12 ┌   maxReplicas: dynamic_parameters
  13 │   minReplicas: dynamic_parameters
  14 │   scaleTargetRef:
  15 │     apiVersion: apps/v1
  16 │     kind: Deployment
  17 │   metrics:
  18 │   - type: Resource
  19 │     resource:
  20 └       name: cpu
  ..   
────────────────────────────────────────



autoscale43.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscale43.yaml:6-23
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: users-service
  10 │   behavior:
  11 │     scaleDown:
  12 │       stabilizationWindowSeconds: 0
  13 │     scaleUp:
  14 └       stabilizationWindowSeconds: 0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscale43.yaml:6-23
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: users-service
  10 │   behavior:
  11 │     scaleDown:
  12 │       stabilizationWindowSeconds: 0
  13 │     scaleUp:
  14 └       stabilizationWindowSeconds: 0
  ..   
────────────────────────────────────────



autoscaler-custom10_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom10_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom10_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom10_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom10_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom10_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom10_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom10_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom10_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom10_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom10_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom10_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom10_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom10_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom10_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom10_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom10_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom10_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom10_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom11_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom11_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom11_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom11_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom11_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom11_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom11_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom11_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom11_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom11_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom11_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom11_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom11_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom11_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom11_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom11_8.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom11_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom11_8.yaml:93-134
────────────────────────────────────────
  93 ┌       - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.30.0
  94 │         name: cluster-autoscaler
  95 │         resources:
  96 │           limits:
  97 │             cpu: 100m
  98 │             memory: 300Mi
  99 │           requests:
 100 │             cpu: 100m
 101 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom11_8.yaml:45-92
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom12_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kubernetes-pki' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"ca.key", "front-proxy-ca.key", "sa.key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



autoscaler-custom12_5.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom12_5.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom12_5.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom12_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom12_5.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom12_5.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom12_5.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom12_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom12_6.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom12_6.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom12_6.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom12_9.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom12_9.yaml:9-153
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom12_9.yaml:9-153
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom12_9.yaml:9-153
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom12_9.yaml:9-153
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom12_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom12_9.yaml:92-133
────────────────────────────────────────
  92 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  93 │         name: cluster-autoscaler
  94 │         resources:
  95 │           limits:
  96 │             cpu: 100m
  97 │             memory: 300Mi
  98 │           requests:
  99 │             cpu: 100m
 100 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom12_9.yaml:45-91
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom13_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom13_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom13_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom13_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom13_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom13_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom13_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom13_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom13_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom13_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom13_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom13_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom13_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom13_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom13_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom13_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom13_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom13_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom13_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom14_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom14_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom14_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom14_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom14_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom14_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom14_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom14_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom14_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom14_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom14_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom14_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom14_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom14_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom14_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom14_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom14_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom14_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom14_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom15_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom15_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom15_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom15_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom15_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom15_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom15_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom15_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom15_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom15_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom15_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom15_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom15_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom15_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom15_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom15_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom15_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom15_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom15_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom16_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom16_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom16_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom16_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom16_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom16_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom16_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom16_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom16_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom16_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom16_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom16_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom16_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom16_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom16_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom16_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom16_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom16_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom16_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom17_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kubernetes-pki' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"ca.key", "front-proxy-ca.key", "sa.key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



autoscaler-custom17_5.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom17_5.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom17_5.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom17_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom17_5.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom17_5.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom17_5.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom17_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom17_6.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom17_6.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom17_6.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom17_9.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom17_9.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom17_9.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom17_9.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom17_9.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom17_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom17_9.yaml:95-136
────────────────────────────────────────
  95 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  96 │         name: cluster-autoscaler
  97 │         resources:
  98 │           limits:
  99 │             cpu: 100m
 100 │             memory: 300Mi
 101 │           requests:
 102 │             cpu: 100m
 103 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom17_9.yaml:45-94
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom18_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom18_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom18_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom18_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom18_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom18_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom18_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom18_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom18_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom18_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom18_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom18_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom18_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom18_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom18_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom18_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom18_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom18_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom18_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom19_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom19_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom19_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom19_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom19_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom19_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom19_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom19_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom19_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom19_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom19_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom19_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom19_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom19_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom19_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom19_8.yaml:9-148
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom19_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom19_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom19_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom1_3.yaml (kubernetes)
======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom1_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom1_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom1_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom1_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom1_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom1_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom1_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom1_4.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom1_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom1_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom1_7.yaml (kubernetes)
======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom1_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom1_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom1_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom1_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom1_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom1_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom1_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom20.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-env' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"OS_PROJECT_ID", "OS_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-env' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"OS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom20_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"      username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"      password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom20_5.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom20_5.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom20_5.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom20_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom20_5.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom20_5.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom20_5.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom20_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom20_6.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom20_6.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom20_6.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom20_9.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom20_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom20_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom20_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom20_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom20_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom20_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom20_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom21.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-env' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"OS_PROJECT_ID", "OS_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-env' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"OS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom21_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"      username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"      password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom21_5.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom21_5.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom21_5.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom21_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom21_5.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom21_5.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom21_5.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom21_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom21_6.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom21_6.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom21_6.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom21_9.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom21_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom21_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom21_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom21_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom21_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom21_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom21_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom22.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-env' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"OS_PROJECT_ID", "OS_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-env' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"OS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom22_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"      username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"      password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom22_10.yaml (kubernetes)
========================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom22_10.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom22_10.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom22_10.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom22_10.yaml:9-156
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom22_10.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom22_10.yaml:96-137
────────────────────────────────────────
  96 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  97 │         name: cluster-autoscaler
  98 │         resources:
  99 │           limits:
 100 │             cpu: 100m
 101 │             memory: 300Mi
 102 │           requests:
 103 │             cpu: 100m
 104 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom22_10.yaml:45-95
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom22_3.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kubernetes-pki' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"ca.key", "front-proxy-ca.key", "sa.key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



autoscaler-custom22_6.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom22_6.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom22_6.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom22_6.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom22_6.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom22_6.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom22_6.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom22_6.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom22_7.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom22_7.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom22_7.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom23.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-env' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"OS_PROJECT_ID", "OS_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-env' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"OS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom23_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"      username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"      password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom23_5.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom23_5.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom23_5.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom23_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom23_5.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom23_5.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom23_5.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom23_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom23_6.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom23_6.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom23_6.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom23_9.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom23_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom23_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom23_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom23_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom23_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom23_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom23_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom24.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-env' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"OS_PROJECT_ID", "OS_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-env' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"OS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom24_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"      username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'openstack-cloud-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"      password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



autoscaler-custom24_5.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom24_5.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom24_5.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom24_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom24_5.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom24_5.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom24_5.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom24_5.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom24_6.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom24_6.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom24_6.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom24_9.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom24_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom24_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom24_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom24_9.yaml:9-151
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom24_9.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom24_9.yaml:94-135
────────────────────────────────────────
  94 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  95 │         name: cluster-autoscaler
  96 │         resources:
  97 │           limits:
  98 │             cpu: 100m
  99 │             memory: 300Mi
 100 │           requests:
 101 │             cpu: 100m
 102 └             memory: 300Mi
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom24_9.yaml:45-93
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom25_3.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom25_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom25_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom25_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom25_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom25_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom25_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom25_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom25_4.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom25_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom25_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom25_7.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom25_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom25_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom25_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom25_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom25_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom25_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom25_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom26_3.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom26_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom26_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom26_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom26_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom26_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom26_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom26_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom26_4.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom26_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom26_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom26_7.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom26_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom26_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom26_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom26_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom26_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom26_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom26_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom27_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kubernetes-pki' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"ca.key", "front-proxy-ca.key", "sa.key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



autoscaler-custom27_4.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom27_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom27_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom27_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom27_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom27_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom27_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom27_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom27_5.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom27_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom27_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom27_8.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom27_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom27_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom27_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom27_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom27_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom27_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom27_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom28_3.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom28_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom28_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom28_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom28_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom28_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom28_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom28_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom28_4.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom28_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom28_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom28_7.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom28_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom28_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom28_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom28_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom28_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom28_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom28_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom29_3.yaml (kubernetes)
=======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom29_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom29_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom29_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom29_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom29_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom29_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom29_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom29_4.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom29_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom29_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom29_7.yaml (kubernetes)
=======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom29_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom29_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom29_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom29_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom29_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom29_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom29_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom2_1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kubernetes-pki' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"ca.key", "front-proxy-ca.key", "sa.key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



autoscaler-custom2_4.yaml (kubernetes)
======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom2_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom2_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom2_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom2_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom2_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom2_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom2_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom2_5.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom2_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom2_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom2_8.yaml (kubernetes)
======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom2_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom2_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom2_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom2_8.yaml:9-147
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom2_8.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom2_8.yaml:90-131
────────────────────────────────────────
  90 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  91 │         name: cluster-autoscaler
  92 │         resources:
  93 │           limits:
  94 │             cpu: 100m
  95 │             memory: 300Mi
  96 │           requests:
  97 │             cpu: 100m
  98 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom2_8.yaml:45-89
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom3_3.yaml (kubernetes)
======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom3_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom3_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom3_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom3_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom3_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom3_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom3_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom3_4.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom3_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom3_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom3_7.yaml (kubernetes)
======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom3_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom3_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom3_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom3_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom3_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom3_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom3_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom4_3.yaml (kubernetes)
======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom4_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom4_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom4_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom4_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom4_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom4_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom4_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom4_4.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom4_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom4_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom4_7.yaml (kubernetes)
======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom4_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom4_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom4_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom4_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom4_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom4_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom4_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom5_3.yaml (kubernetes)
======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom5_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom5_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom5_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom5_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom5_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom5_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom5_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom5_4.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom5_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom5_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom5_7.yaml (kubernetes)
======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom5_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom5_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom5_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom5_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom5_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom5_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom5_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom6_3.yaml (kubernetes)
======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom6_3.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom6_3.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom6_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom6_3.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom6_3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom6_3.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom6_3.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom6_4.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom6_4.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom6_4.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────



autoscaler-custom6_7.yaml (kubernetes)
======================================
Tests: 133 (SUCCESSES: 97, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 18, MEDIUM: 14, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler-init' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-cloud-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-cloud-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-autoscaler-init' of Deployment 'cluster-autoscaler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 autoscaler-custom6_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 autoscaler-custom6_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 autoscaler-custom6_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 autoscaler-custom6_7.yaml:9-142
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: cluster-autoscaler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler-init" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-cloud-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom6_7.yaml:33-43
────────────────────────────────────────
  33 ┌       - image: busybox
  34 │         name: cluster-autoscaler-init
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - /bin/sh
  39 │         - -c
  40 │         - rm -f /var/run/cluster-autoscaler/autoscaler.sock
  41 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom6_7.yaml:88-129
────────────────────────────────────────
  88 ┌       - image: fred78290/cluster-autoscaler:v1.30.0
  89 │         name: cluster-autoscaler
  90 │         resources:
  91 │           limits:
  92 │             cpu: 100m
  93 │             memory: 300Mi
  94 │           requests:
  95 │             cpu: 100m
  96 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-cloud-autoscaler in deployment cluster-autoscaler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 autoscaler-custom6_7.yaml:45-87
────────────────────────────────────────
  45 ┌       - image: fred78290/kubernetes-cloud-autoscaler:v1.30.0
  46 │         name: kubernetes-cloud-autoscaler
  47 │         resources:
  48 │           limits:
  49 │             cpu: 100m
  50 │             memory: 300Mi
  51 │           requests:
  52 │             cpu: 100m
  53 └             memory: 300Mi
  ..   
────────────────────────────────────────



autoscaler-custom7_1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kubernetes-pki' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"ca.key", "front-proxy-ca.key", "sa.key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



autoscaler-custom7_4.yaml (kubernetes)
======================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 autoscaler-custom7_4.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - secrets
  60 │   verbs:
  61 │   - get
  62 └   - delete
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cluster-autoscaler' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 autoscaler-custom7_4.yaml:148-158
────────────────────────────────────────
 148 ┌ - apiGroups:
 149 │   - nodemanager.aldunelabs.com
 150 │   resources:
 151 │   - '*'
 152 │   verbs:
 153 │   - list
 154 │   - get
 155 │   - update
 156 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom7_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 autoscaler-custom7_4.yaml:93-103
────────────────────────────────────────
  93 ┌ - apiGroups:
  94 │   - apps
  95 │   resources:
  96 │   - statefulsets
  97 │   - replicasets
  98 │   - daemonsets
  99 │   verbs:
 100 │   - watch
 101 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom7_4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom7_4.yaml:35-44
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - endpoints
  39 │   resourceNames:
  40 │   - cluster-autoscaler
  41 │   verbs:
  42 │   - get
  43 │   - update
  44 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 autoscaler-custom7_4.yaml:63-76
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - ''
  65 │   resources:
  66 │   - pods
  67 │   - namespaces
  68 │   - services
  69 │   - replicationcontrollers
  70 │   - persistentvolumeclaims
  71 └   - persistentvolumes
  ..   
────────────────────────────────────────



autoscaler-custom7_5.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 115, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom7_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 autoscaler-custom7_5.yaml:16-25
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - configmaps
  20 │   resourceNames:
  21 │   - cluster-autoscaler-status
  22 │   verbs:
  23 │   - delete
  24 │   - get
  25 └   - update
────────────────────────────────────────


