
Report Summary

┌─────────────────────────────────────────────┬────────────┬───────────────────┐
│                   Target                    │    Type    │ Misconfigurations │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ RBAC501.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ RBAC501_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ RBAC501_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rb_github-actions-kube-mode.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rb_github-actions-kube-mode1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac471_9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac472.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac472_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac472_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac472_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac473.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac473_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac474.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac474_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac475.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac475_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac476.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac476_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac477.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac477_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac477_2.yaml                              │ kubernetes │         5         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac477_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac477_4.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac477_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac478.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac478_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac478_2.yaml                              │ kubernetes │         5         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac478_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac478_4.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac478_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac479.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac479_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac47_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac47_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac480.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac480_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac481.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac481_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac482.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac482_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac483.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac483_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac484.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac484_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac485.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac485_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac486.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac486_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac487.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac487_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac488.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac488_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac489.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac489_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac490.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac490_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac491.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac491_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac492.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac492_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac493.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac493_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac493_2.yaml                              │ kubernetes │         5         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac493_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac493_4.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac493_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac494.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac494_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac494_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac495.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac495_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac495_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac496.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac496_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac496_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac497.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac497_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac497_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac498.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac498_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac498_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac499.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac499_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac499_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac4_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac5.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac50.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_13.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_15.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_17.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_18.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac500_9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac502.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac502_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac503_9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac504.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac505.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac505_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac505_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac505_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac505_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac506.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac506_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac506_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac506_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac506_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac507.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac507_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac507_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac507_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac507_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac508.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac508_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac508_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac508_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac508_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac509.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac509_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac50_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac50_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac50_3.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac50_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac510.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac510_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac510_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac511.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac511_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac512.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac512_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac512_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac513.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac513_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac514.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac514_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac514_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac515.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac515_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac515_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac516.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac516_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac516_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac517.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac517_1.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac517_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac518.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac518_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac519.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac519_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac52.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac520.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac520_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac520_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac521.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac522.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac522_1.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac522_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac523.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac523_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac524.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac525.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac526.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac526_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac52_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac53.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac53_1.yaml                               │ kubernetes │         6         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac54.yaml                                 │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac542.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac542_1.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac542_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac543.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac544.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac544_1.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac544_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_10.yaml                             │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac545_9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac546.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac546_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac546_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac546_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac548.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac548_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac549.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac549_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac54_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac55.yaml                                 │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac550.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac550_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac553.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac553_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac553_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac553_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac553_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac554.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac555.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac555_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac555_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac555_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac555_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac556.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac556_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac556_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac556_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac556_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac557.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac557_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac557_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac557_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac557_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac558.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac558_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac558_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac558_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac558_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac559.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac559_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac559_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac559_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac55_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac56.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac561.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac561_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac562.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac567.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac567_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac568.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac568_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac568_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac568_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac568_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac569.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac569_1.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac569_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac569_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac569_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac569_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac569_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac56_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac56_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac57.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac570.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac570_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac571.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac571_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac572.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac574.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac574_1.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac574_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac575.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac576.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac577.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac577_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac577_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac578.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac579.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac579_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac58.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac581.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac581_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac582.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac582_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac583.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac583_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac584.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac584_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac584_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac584_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac584_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac584_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac585.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac585_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac585_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac585_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac585_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac585_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac586.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac586_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac586_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac586_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac586_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac586_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac587.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac587_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac587_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac587_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac587_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac587_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac588.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac588_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac588_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac588_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac588_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac588_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac589.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac589_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac589_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac58_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac58_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac58_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac58_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac59.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac590.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac590_1.yaml                              │ kubernetes │         7         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac590_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac590_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac590_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac590_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac591.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac591_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac592.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac592_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac593.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac593_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac594.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac594_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac597.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac597_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac597_2.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac597_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac597_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac597_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac598.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac598_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac598_2.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac598_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac598_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac598_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac599.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac599_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac599_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac59_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac59_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac59_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac59_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac5_1.yaml                                │ kubernetes │         6         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac6.yaml                                  │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac60.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac600.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac600_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac600_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac601.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac601_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac602.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac602_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_13.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_15.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_17.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_18.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_19.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_20.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_5.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_6.yaml                              │ kubernetes │         5         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac603_9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac604.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac604_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac604_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac604_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac604_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac604_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac605.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac605_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac605_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac606.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac606_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac607.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac607_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac607_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac607_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac607_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac607_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac608.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac608_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac608_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac608_3.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac608_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac608_5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac608_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac609.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac609_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac609_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac609_3.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac609_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac60_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac60_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac60_3.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac60_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac61.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac610.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac610_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac610_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac610_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac610_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac610_5.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac610_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac612.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac612_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac612_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac613.yaml                                │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac613_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac613_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac613_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac613_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac615.yaml                                │ kubernetes │         6         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac615_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac615_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac615_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac615_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac617.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac617_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac617_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac617_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac617_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac61_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac61_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac61_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac61_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac62.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac621.yaml                                │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac621_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac621_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac621_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac621_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac622.yaml                                │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac622_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac622_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac622_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac622_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac623.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac623_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac623_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac624.yaml                                │ kubernetes │         6         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac624_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac624_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac625.yaml                                │ kubernetes │         6         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac625_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac625_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac626.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac626_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac627.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac629.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac629_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac629_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac63.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac630.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac630_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac630_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac630_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac632.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac633.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac633_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac633_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac633_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac633_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac634.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac634_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac634_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac634_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac634_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac635.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac635_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac635_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac635_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac635_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac636.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac636_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac636_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac636_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac636_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac637.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac637_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac638.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac639.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac639_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac639_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac63_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac63_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac63_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac63_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac64.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac640.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac640_1.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac640_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac641.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac641_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac642.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac642_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac643.yaml                                │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac643_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac644.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac644_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac645.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac645_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac646.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac646_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac649.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac649_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac649_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac64_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac64_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac64_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac64_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac65.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac650.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac650_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac650_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac650_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac651.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac652.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac652_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac652_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac652_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac652_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac653.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac653_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac653_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac653_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac653_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac654.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac654_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac654_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac654_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac654_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac655.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac655_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac655_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac655_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac655_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac65_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac65_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac65_3.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac65_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac66.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac660.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac661.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac661_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac661_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac661_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac661_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac662.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac662_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac662_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac662_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac662_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac663.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac663_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac663_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac663_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac663_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac664.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac664_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac664_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac664_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac664_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac665.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac665_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac665_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac666.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac666_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac666_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac666_3.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac666_4.yaml                              │ kubernetes │         9         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac667.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac667_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac667_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac668.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac668_1.yaml                              │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac668_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac669.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac669_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac66_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac66_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac66_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac66_4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac67.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac670.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac670_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac670_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac671.yaml                                │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac671_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac673.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac673_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac673_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac67_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac68.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac69.yaml                                 │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac69_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac6_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac7.yaml                                  │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac70.yaml                                 │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac70_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac7_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac8.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac84.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac84_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac84_2.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac84_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac85.yaml                                 │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac85_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac86.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac86_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac86_2.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac87.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac87_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac87_2.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac87_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac88.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac88_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac89.yaml                                 │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac89_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac8_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac8_2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac9.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac90.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac90_1.yaml                               │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac90_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac90_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac92.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac92_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac92_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac95.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac95_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac95_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac96.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac96_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac96_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac97.yaml                                 │ kubernetes │         2         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac97_1.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac98.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac98_1.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac98_2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role.yaml                              │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role1.yaml                             │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role2.yaml                             │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role3.yaml                             │ kubernetes │         4         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role4.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role4_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role4_2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role5.yaml                             │ kubernetes │         5         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role6.yaml                             │ kubernetes │         5         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role7.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role7_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role7_2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role_binding1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role_binding1_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role_binding3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role_binding3_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbac_role_binding4.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rback-test-full-access-role.yaml            │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rback-test-no-configmap-access.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rback-test-no-cr-access.yaml                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rback-test-only-main-ns-access-binding.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rback-test-only-main-ns-access.yaml         │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rback-test-role-binding.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbacuser-role-binding.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbacuser-role-binding1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbacuser-role.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbacuser-role1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbca.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbca_1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class10.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class11.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class12.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class13.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class15.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class16.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class17.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class18.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class19.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class20.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class21.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class4.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class5.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class6.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class7.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class8.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-storage-class9.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-with-secret.yaml                        │ kubernetes │        21         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-with-secret1.yaml                       │ kubernetes │        21         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd-with-secret2.yaml                       │ kubernetes │        21         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd.yaml                                    │ kubernetes │        21         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd1.yaml                                   │ kubernetes │        21         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd2.yaml                                   │ kubernetes │        21         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_ctrlplugin_cluster_role.yaml            │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_ctrlplugin_cluster_role_binding.yaml    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_ctrlplugin_role.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_ctrlplugin_role_binding.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_ctrlplugin_service_account.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_nodeplugin_cluster_role.yaml            │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_nodeplugin_cluster_role_binding.yaml    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_nodeplugin_role.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_nodeplugin_role_binding.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbd_nodeplugin_service_account.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rbmq-ingress.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-api-catalog.yaml                         │ kubernetes │        50         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-api-catalog1.yaml                        │ kubernetes │        50         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-api-catalog2.yaml                        │ kubernetes │        50         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args1.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args10.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args11.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args12.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args13.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args14.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args15.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args16.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args17.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args18.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args19.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args2.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args20.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args21.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args22.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args23.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args26.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args27.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args28.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args29.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args3.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args30.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args31.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args32.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args33.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args34.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args35.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args36.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args37.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args4.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args5.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args6.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args7.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args8.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-args9.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-configuration.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition10.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition11.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition12.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition13.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition14.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition15.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition16.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition17.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition2.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition4.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition5.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition6.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition7.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition8.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-definition9.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-demo.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-exam.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-exam1.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ rc-exam2.yaml                               │ kubernetes │        18         │
└─────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


RBAC501_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): Role 'leader-election-lease-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 RBAC501_1.yaml:7-20
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   - coordination.k8s.io
  10 │   resources:
  11 │   - endpoints
  12 │   - leases
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────



rbac477_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kiali-viewer' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac477_1.yaml:55-66
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - networking.istio.io
  57 │   - security.istio.io
  58 │   - extensions.istio.io
  59 │   - telemetry.istio.io
  60 │   - gateway.networking.k8s.io
  61 │   resources:
  62 │   - '*'
  63 └   verbs:
  ..   
────────────────────────────────────────



rbac477_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kiali' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac477_2.yaml:58-72
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - networking.istio.io
  60 │   - security.istio.io
  61 │   - extensions.istio.io
  62 │   - telemetry.istio.io
  63 │   - gateway.networking.k8s.io
  64 │   resources:
  65 │   - '*'
  66 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac477_2.yaml:16-27
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - namespaces
  20 │   - pods
  21 │   - replicationcontrollers
  22 │   - services
  23 │   verbs:
  24 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac477_2.yaml:35-47
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - extensions
  37 │   - apps
  38 │   resources:
  39 │   - daemonsets
  40 │   - deployments
  41 │   - replicasets
  42 │   - statefulsets
  43 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac477_2.yaml:48-57
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - batch
  50 │   resources:
  51 │   - cronjobs
  52 │   - jobs
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 │   - watch
  57 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'kiali' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac477_2.yaml:16-27
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - namespaces
  20 │   - pods
  21 │   - replicationcontrollers
  22 │   - services
  23 │   verbs:
  24 └   - get
  ..   
────────────────────────────────────────



rbac477_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'kiali-controlplane' shouldn't have access to manage secrets in namespace 'istio-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac477_4.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - list
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kiali-controlplane' shouldn't have access to manage secrets in namespace 'istio-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac477_4.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resourceNames:
  16 │   - cacerts
  17 │   - istio-ca-secret
  18 │   resources:
  19 │   - secrets
  20 │   verbs:
  21 └   - get
  ..   
────────────────────────────────────────



rbac478_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kiali-viewer' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac478_1.yaml:55-66
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - networking.istio.io
  57 │   - security.istio.io
  58 │   - extensions.istio.io
  59 │   - telemetry.istio.io
  60 │   - gateway.networking.k8s.io
  61 │   resources:
  62 │   - '*'
  63 └   verbs:
  ..   
────────────────────────────────────────



rbac478_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kiali' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac478_2.yaml:58-72
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - networking.istio.io
  60 │   - security.istio.io
  61 │   - extensions.istio.io
  62 │   - telemetry.istio.io
  63 │   - gateway.networking.k8s.io
  64 │   resources:
  65 │   - '*'
  66 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac478_2.yaml:16-27
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - namespaces
  20 │   - pods
  21 │   - replicationcontrollers
  22 │   - services
  23 │   verbs:
  24 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac478_2.yaml:35-47
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - extensions
  37 │   - apps
  38 │   resources:
  39 │   - daemonsets
  40 │   - deployments
  41 │   - replicasets
  42 │   - statefulsets
  43 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac478_2.yaml:48-57
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - batch
  50 │   resources:
  51 │   - cronjobs
  52 │   - jobs
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 │   - watch
  57 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'kiali' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac478_2.yaml:16-27
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - namespaces
  20 │   - pods
  21 │   - replicationcontrollers
  22 │   - services
  23 │   verbs:
  24 └   - get
  ..   
────────────────────────────────────────



rbac478_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'kiali-controlplane' shouldn't have access to manage secrets in namespace 'istio-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac478_4.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - list
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kiali-controlplane' shouldn't have access to manage secrets in namespace 'istio-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac478_4.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resourceNames:
  16 │   - cacerts
  17 │   - istio-ca-secret
  18 │   resources:
  19 │   - secrets
  20 │   verbs:
  21 └   - get
  ..   
────────────────────────────────────────



rbac479.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac479.yaml:6-24
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   - nodes
  12 │   - pods
  13 │   - services
  14 └   - serviceaccounts
  ..   
────────────────────────────────────────



rbac481_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac481_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac481_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac481_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac481_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac481_1.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac481_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac481_1.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



rbac482.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac482.yaml:6-24
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   - nodes
  12 │   - pods
  13 │   - services
  14 └   - serviceaccounts
  ..   
────────────────────────────────────────



rbac484_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac484_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac484_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac484_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac484_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac484_1.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac484_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac484_1.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



rbac485.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac485.yaml:6-24
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   - nodes
  12 │   - pods
  13 │   - services
  14 └   - serviceaccounts
  ..   
────────────────────────────────────────



rbac487_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac487_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac487_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac487_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac487_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac487_1.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac487_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac487_1.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



rbac488_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac488_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac488_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac488_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac488_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac488_1.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac488_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac488_1.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



rbac492_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac492_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac492_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac492_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac492_1.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - apps
  29 │   resources:
  30 │   - statefulsets
  31 │   verbs:
  32 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac492_1.yaml:40-46
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - pods
  44 │   verbs:
  45 │   - list
  46 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac492_1.yaml:33-39
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - configmaps
  37 │   - secrets
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac492_1.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - services
  51 │   - services/finalizers
  52 │   - endpoints
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────



rbac493_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kiali-viewer' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac493_1.yaml:55-66
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - networking.istio.io
  57 │   - security.istio.io
  58 │   - extensions.istio.io
  59 │   - telemetry.istio.io
  60 │   - gateway.networking.k8s.io
  61 │   resources:
  62 │   - '*'
  63 └   verbs:
  ..   
────────────────────────────────────────



rbac493_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kiali' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac493_2.yaml:58-72
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - networking.istio.io
  60 │   - security.istio.io
  61 │   - extensions.istio.io
  62 │   - telemetry.istio.io
  63 │   - gateway.networking.k8s.io
  64 │   resources:
  65 │   - '*'
  66 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac493_2.yaml:16-27
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - namespaces
  20 │   - pods
  21 │   - replicationcontrollers
  22 │   - services
  23 │   verbs:
  24 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac493_2.yaml:35-47
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - extensions
  37 │   - apps
  38 │   resources:
  39 │   - daemonsets
  40 │   - deployments
  41 │   - replicasets
  42 │   - statefulsets
  43 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kiali' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac493_2.yaml:48-57
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - batch
  50 │   resources:
  51 │   - cronjobs
  52 │   - jobs
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 │   - watch
  57 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'kiali' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac493_2.yaml:16-27
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - namespaces
  20 │   - pods
  21 │   - replicationcontrollers
  22 │   - services
  23 │   verbs:
  24 └   - get
  ..   
────────────────────────────────────────



rbac493_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'kiali-controlplane' shouldn't have access to manage secrets in namespace 'istio-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac493_4.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - list
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kiali-controlplane' shouldn't have access to manage secrets in namespace 'istio-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac493_4.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resourceNames:
  16 │   - cacerts
  17 │   - istio-ca-secret
  18 │   resources:
  19 │   - secrets
  20 │   verbs:
  21 └   - get
  ..   
────────────────────────────────────────



rbac495_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac495_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac495_1.yaml:33-38
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - apps
  35 │   resources:
  36 │   - statefulsets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac495_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac495_1.yaml:33-38
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - apps
  35 │   resources:
  36 │   - statefulsets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac495_1.yaml:46-52
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - pods
  50 │   verbs:
  51 │   - list
  52 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac495_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac495_1.yaml:53-63
────────────────────────────────────────
  53 ┌ - apiGroups:
  54 │   - ''
  55 │   resources:
  56 │   - services
  57 │   - services/finalizers
  58 │   - endpoints
  59 │   verbs:
  60 │   - get
  61 └   - create
  ..   
────────────────────────────────────────



rbac497_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac497_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac497_1.yaml:33-38
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - apps
  35 │   resources:
  36 │   - statefulsets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac497_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac497_1.yaml:33-38
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - apps
  35 │   resources:
  36 │   - statefulsets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac497_1.yaml:46-52
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - pods
  50 │   verbs:
  51 │   - list
  52 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac497_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac497_1.yaml:53-63
────────────────────────────────────────
  53 ┌ - apiGroups:
  54 │   - ''
  55 │   resources:
  56 │   - services
  57 │   - services/finalizers
  58 │   - endpoints
  59 │   verbs:
  60 │   - get
  61 └   - create
  ..   
────────────────────────────────────────



rbac499_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac499_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac499_1.yaml:33-38
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - apps
  35 │   resources:
  36 │   - statefulsets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac499_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac499_1.yaml:33-38
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - apps
  35 │   resources:
  36 │   - statefulsets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac499_1.yaml:46-52
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - pods
  50 │   verbs:
  51 │   - list
  52 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac499_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - configmaps
  43 │   - secrets
  44 │   verbs:
  45 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac499_1.yaml:53-63
────────────────────────────────────────
  53 ┌ - apiGroups:
  54 │   - ''
  55 │   resources:
  56 │   - services
  57 │   - services/finalizers
  58 │   - endpoints
  59 │   verbs:
  60 │   - get
  61 └   - create
  ..   
────────────────────────────────────────



rbac500_15.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'system:vpa-admission-controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac500_15.yaml:17-25
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - mutatingwebhookconfigurations
  21 │   verbs:
  22 │   - create
  23 │   - delete
  24 │   - get
  25 └   - list
────────────────────────────────────────



rbac503_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'custom-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac503_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - custom.metrics.k8s.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



rbac503_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'external-metrics-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac503_2.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - external.metrics.k8s.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



rbac509.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 110, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac509.yaml:29-36
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - ''
  31 │   resources:
  32 │   - secrets
  33 │   verbs:
  34 │   - get
  35 │   - list
  36 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac509.yaml:47-55
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - pods
  51 │   verbs:
  52 │   - get
  53 │   - list
  54 │   - watch
  55 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac509.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - configmaps
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 │   - watch
  45 │   - update
  46 └   - create
────────────────────────────────────────



rbac50_3.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): Role 'leader-locking-nfs-client-provisioner' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac50_3.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - endpoints
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



rbac510_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'vault-agent-injector-clusterrole' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac510_1.yaml:9-17
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - admissionregistration.k8s.io
  11 │   resources:
  12 │   - mutatingwebhookconfigurations
  13 │   verbs:
  14 │   - get
  15 │   - list
  16 │   - watch
  17 └   - patch
────────────────────────────────────────



rbac512_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'postgres-secret-manager-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac512_1.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   resourceNames:
  11 │   - postgres-secret
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



rbac513.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac513.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac513.yaml:38-49
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - apps
  40 │   resources:
  41 │   - statefulsets
  42 │   verbs:
  43 │   - create
  44 │   - delete
  45 │   - get
  46 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac513.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────



rbac514_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'redis-secret-manager-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac514_1.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   resourceNames:
  11 │   - redis-secret
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



rbac515_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'emqx-secret-manager-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac515_1.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   resourceNames:
  11 │   - emqx-secret
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



rbac516_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'home-automation-secret-manager-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac516_1.yaml:6-20
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   resourceNames:
  11 │   - ebusd-config-secret
  12 │   - home-assistant-config-secret
  13 │   - home-assistant-emqx-secret
  14 └   - home-assistant-postgres-dburl
  ..   
────────────────────────────────────────



rbac517_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 2, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'system:kube-vip-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac517_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - services
  18 │   - endpoints
  19 │   verbs:
  20 │   - list
  21 │   - get
  22 │   - watch
  23 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'system:kube-vip-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac517_1.yaml:44-52
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - discovery.k8s.io
  46 │   resources:
  47 │   - endpointslices
  48 │   verbs:
  49 │   - list
  50 │   - get
  51 │   - watch
  52 └   - update
────────────────────────────────────────



rbac518.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'multus' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac518.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - k8s.cni.cncf.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'multus' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac518.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   - pods/status
  17 │   verbs:
  18 │   - get
  19 │   - list
  20 │   - update
  21 └   - watch
────────────────────────────────────────



rbac519.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0046 (CRITICAL): ClusterRole 'k8s-gateway' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac519.yaml:22-28
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - gateway.networking.k8s.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 │   - watch
  28 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'k8s-gateway' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac519.yaml:29-35
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - k8s.nginx.org
  31 │   resources:
  32 │   - '*'
  33 │   verbs:
  34 │   - watch
  35 └   - list
────────────────────────────────────────



rbac52.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'resource-reader' shouldn't have access to manage secrets in namespace 'miniprojet'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac52.yaml:7-16
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   verbs:
  15 │   - get
  16 └   - list
────────────────────────────────────────



rbac520_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'volsync-secret-manager-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac520_1.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   resourceNames:
  11 │   - volsync-secret
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



rbac521.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'system-upgrade' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac521.yaml:5
────────────────────────────────────────
   5 [   name: system-upgrade
────────────────────────────────────────



rbac522_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 2, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'system:kube-vip-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac522_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - services
  18 │   - endpoints
  19 │   verbs:
  20 │   - list
  21 │   - get
  22 │   - watch
  23 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'system:kube-vip-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac522_1.yaml:44-52
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - discovery.k8s.io
  46 │   resources:
  47 │   - endpointslices
  48 │   verbs:
  49 │   - list
  50 │   - get
  51 │   - watch
  52 └   - update
────────────────────────────────────────



rbac523.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'multus' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac523.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - k8s.cni.cncf.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'multus' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac523.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   - pods/status
  17 │   verbs:
  18 │   - get
  19 │   - list
  20 │   - update
  21 └   - watch
────────────────────────────────────────



rbac524.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'system-upgrade' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac524.yaml:5
────────────────────────────────────────
   5 [   name: system-upgrade
────────────────────────────────────────



rbac53_1.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 107, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'pixie-operator-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac53_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac53_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'pixie-operator-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac53_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'pixie-operator-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac53_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'pixie-operator-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 rbac53_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'pixie-operator-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac53_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────



rbac54.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac54.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac54.yaml:23-32
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 │   - watch
  31 │   - update
  32 └   - create
────────────────────────────────────────



rbac542_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 2, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'system:kube-vip-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac542_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - services
  18 │   - endpoints
  19 │   verbs:
  20 │   - list
  21 │   - get
  22 │   - watch
  23 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'system:kube-vip-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac542_1.yaml:44-52
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - discovery.k8s.io
  46 │   resources:
  47 │   - endpointslices
  48 │   verbs:
  49 │   - list
  50 │   - get
  51 │   - watch
  52 └   - update
────────────────────────────────────────



rbac543.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'system-upgrade' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac543.yaml:5
────────────────────────────────────────
   5 [   name: system-upgrade
────────────────────────────────────────



rbac544_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0112 (CRITICAL): Role 'demo-role' shouldn't manage all resources at the namespace 'default'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 rbac544_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'demo-role' shouldn't manage all resources at the namespace 'default'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 rbac544_1.yaml:12-17
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - apps
  14 │   resources:
  15 │   - '*'
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────



rbac545_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'csi-addons-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac545_1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



rbac545_10.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'csi-addons-controller-manager-metrics-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 rbac545_10.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     app.kubernetes.io/name: csi-addons
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac545_10.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 8443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     app.kubernetes.io/name: csi-addons
────────────────────────────────────────



rbac548.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac548.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac548.yaml:38-49
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - apps
  40 │   resources:
  41 │   - statefulsets
  42 │   verbs:
  43 │   - create
  44 │   - delete
  45 │   - get
  46 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac548.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────



rbac549.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'gatus' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac549.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



rbac55.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac55.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac55.yaml:23-32
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 │   - watch
  31 │   - update
  32 └   - create
────────────────────────────────────────



rbac553_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): Role 'leader-locking-nfs-client-provisioner' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac553_3.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - endpoints
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



rbac561.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac561.yaml:6-16
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - endpoints
  11 │   - nodes
  12 │   - pods
  13 │   - secrets
  14 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ingress-nginx' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac561.yaml:41-50
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - networking.k8s.io
  43 │   resources:
  44 │   - ingresses
  45 │   - ingresses/status
  46 │   verbs:
  47 │   - get
  48 │   - list
  49 │   - watch
  50 └   - update
────────────────────────────────────────



rbac562.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'fabric8-rbac' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac562.yaml:4
────────────────────────────────────────
   4 [   name: fabric8-rbac
────────────────────────────────────────



rbac569_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 110, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'supernetes' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac569_1.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   - services
  12 │   verbs:
  13 │   - list
  14 └   - watch
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac569_1.yaml:15-21
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - pods
  19 │   - pods/status
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'supernetes' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac569_1.yaml:15-21
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - pods
  19 │   - pods/status
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────



rbac569_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'supernetes-kube-proxy' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac569_3.yaml:7-14
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - apps
   9 │   resources:
  10 │   - daemonsets
  11 │   resourceNames:
  12 │   - kube-proxy
  13 │   verbs:
  14 └   - patch
────────────────────────────────────────



rbac570.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac570.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac570.yaml:38-49
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - apps
  40 │   resources:
  41 │   - statefulsets
  42 │   verbs:
  43 │   - create
  44 │   - delete
  45 │   - get
  46 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac570.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────



rbac571.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'gatus' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac571.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



rbac572.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'system-upgrade' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac572.yaml:4
────────────────────────────────────────
   4 [   name: system-upgrade
────────────────────────────────────────



rbac574_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'rstudio-operator-clusterrole' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac574_1.yaml:25-36
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - apps
  27 │   resources:
  28 │   - deployments
  29 │   verbs:
  30 │   - get
  31 │   - list
  32 │   - watch
  33 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rstudio-operator-clusterrole' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac574_1.yaml:37-49
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - services
  41 │   - events
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



rbac577_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'nfs-client-provisioner-runner' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac577_1.yaml:43-54
────────────────────────────────────────
  43 ┌ - apiGroups:
  44 │   - ''
  45 │   resources:
  46 │   - endpoints
  47 │   verbs:
  48 │   - create
  49 │   - delete
  50 │   - get
  51 └   - list
  ..   
────────────────────────────────────────



rbac579.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'job-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac579.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - batch
   9 │   resources:
  10 │   - jobs
  11 │   verbs:
  12 │   - create
  13 │   - delete
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'job-manager' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac579.yaml:19-25
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   verbs:
  24 │   - get
  25 └   - list
────────────────────────────────────────



rbac581.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac581.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac581.yaml:23-32
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 │   - watch
  31 │   - update
  32 └   - create
────────────────────────────────────────



rbac582.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac582.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac582.yaml:38-49
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - apps
  40 │   resources:
  41 │   - statefulsets
  42 │   verbs:
  43 │   - create
  44 │   - delete
  45 │   - get
  46 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac582.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────



rbac584.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac584.yaml:7
────────────────────────────────────────
   7 [     pods: '1000'
────────────────────────────────────────



rbac584_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac584_1.yaml:36-46
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - namespaces
  40 │   - secrets
  41 │   - configmaps
  42 │   - serviceaccounts
  43 │   verbs:
  44 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac584_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - source.toolkit.fluxcd.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac584_1.yaml:12-17
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - kustomize.toolkit.fluxcd.io
  14 │   resources:
  15 │   - '*'
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac584_1.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - helm.toolkit.fluxcd.io
  20 │   resources:
  21 │   - '*'
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac584_1.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - notification.toolkit.fluxcd.io
  26 │   resources:
  27 │   - '*'
  28 │   verbs:
  29 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac584_1.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - image.toolkit.fluxcd.io
  32 │   resources:
  33 │   - '*'
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac584_1.yaml:54-65
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - configmaps
  58 │   verbs:
  59 │   - get
  60 │   - list
  61 │   - watch
  62 └   - create
  ..   
────────────────────────────────────────



rbac584_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac584_2.yaml:9-22
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - notification.toolkit.fluxcd.io
  11 │   - source.toolkit.fluxcd.io
  12 │   - helm.toolkit.fluxcd.io
  13 │   - image.toolkit.fluxcd.io
  14 │   - kustomize.toolkit.fluxcd.io
  15 │   resources:
  16 │   - '*'
  17 └   verbs:
  ..   
────────────────────────────────────────



rbac584_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac584_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - notification.toolkit.fluxcd.io
  12 │   - source.toolkit.fluxcd.io
  13 │   - helm.toolkit.fluxcd.io
  14 │   - image.toolkit.fluxcd.io
  15 │   - kustomize.toolkit.fluxcd.io
  16 │   resources:
  17 │   - '*'
  18 └   verbs:
  ..   
────────────────────────────────────────



rbac584_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac584_4.yaml:4
────────────────────────────────────────
   4 [   name: cluster-reconciler
────────────────────────────────────────



rbac585.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac585.yaml:7
────────────────────────────────────────
   7 [     pods: '1000'
────────────────────────────────────────



rbac585_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac585_1.yaml:36-46
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - namespaces
  40 │   - secrets
  41 │   - configmaps
  42 │   - serviceaccounts
  43 │   verbs:
  44 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac585_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - source.toolkit.fluxcd.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac585_1.yaml:12-17
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - kustomize.toolkit.fluxcd.io
  14 │   resources:
  15 │   - '*'
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac585_1.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - helm.toolkit.fluxcd.io
  20 │   resources:
  21 │   - '*'
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac585_1.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - notification.toolkit.fluxcd.io
  26 │   resources:
  27 │   - '*'
  28 │   verbs:
  29 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac585_1.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - image.toolkit.fluxcd.io
  32 │   resources:
  33 │   - '*'
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac585_1.yaml:54-65
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - configmaps
  58 │   verbs:
  59 │   - get
  60 │   - list
  61 │   - watch
  62 └   - create
  ..   
────────────────────────────────────────



rbac585_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac585_2.yaml:9-22
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - notification.toolkit.fluxcd.io
  11 │   - source.toolkit.fluxcd.io
  12 │   - helm.toolkit.fluxcd.io
  13 │   - image.toolkit.fluxcd.io
  14 │   - kustomize.toolkit.fluxcd.io
  15 │   resources:
  16 │   - '*'
  17 └   verbs:
  ..   
────────────────────────────────────────



rbac585_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac585_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - notification.toolkit.fluxcd.io
  12 │   - source.toolkit.fluxcd.io
  13 │   - helm.toolkit.fluxcd.io
  14 │   - image.toolkit.fluxcd.io
  15 │   - kustomize.toolkit.fluxcd.io
  16 │   resources:
  17 │   - '*'
  18 └   verbs:
  ..   
────────────────────────────────────────



rbac585_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac585_4.yaml:4
────────────────────────────────────────
   4 [   name: cluster-reconciler
────────────────────────────────────────



rbac586.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac586.yaml:7
────────────────────────────────────────
   7 [     pods: '1000'
────────────────────────────────────────



rbac586_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac586_1.yaml:36-46
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - namespaces
  40 │   - secrets
  41 │   - configmaps
  42 │   - serviceaccounts
  43 │   verbs:
  44 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac586_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - source.toolkit.fluxcd.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac586_1.yaml:12-17
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - kustomize.toolkit.fluxcd.io
  14 │   resources:
  15 │   - '*'
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac586_1.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - helm.toolkit.fluxcd.io
  20 │   resources:
  21 │   - '*'
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac586_1.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - notification.toolkit.fluxcd.io
  26 │   resources:
  27 │   - '*'
  28 │   verbs:
  29 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac586_1.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - image.toolkit.fluxcd.io
  32 │   resources:
  33 │   - '*'
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac586_1.yaml:54-65
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - configmaps
  58 │   verbs:
  59 │   - get
  60 │   - list
  61 │   - watch
  62 └   - create
  ..   
────────────────────────────────────────



rbac586_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac586_2.yaml:9-22
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - notification.toolkit.fluxcd.io
  11 │   - source.toolkit.fluxcd.io
  12 │   - helm.toolkit.fluxcd.io
  13 │   - image.toolkit.fluxcd.io
  14 │   - kustomize.toolkit.fluxcd.io
  15 │   resources:
  16 │   - '*'
  17 └   verbs:
  ..   
────────────────────────────────────────



rbac586_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac586_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - notification.toolkit.fluxcd.io
  12 │   - source.toolkit.fluxcd.io
  13 │   - helm.toolkit.fluxcd.io
  14 │   - image.toolkit.fluxcd.io
  15 │   - kustomize.toolkit.fluxcd.io
  16 │   resources:
  17 │   - '*'
  18 └   verbs:
  ..   
────────────────────────────────────────



rbac586_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac586_4.yaml:4
────────────────────────────────────────
   4 [   name: cluster-reconciler
────────────────────────────────────────



rbac587.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac587.yaml:7
────────────────────────────────────────
   7 [     pods: '1000'
────────────────────────────────────────



rbac587_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac587_1.yaml:36-46
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - namespaces
  40 │   - secrets
  41 │   - configmaps
  42 │   - serviceaccounts
  43 │   verbs:
  44 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac587_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - source.toolkit.fluxcd.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac587_1.yaml:12-17
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - kustomize.toolkit.fluxcd.io
  14 │   resources:
  15 │   - '*'
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac587_1.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - helm.toolkit.fluxcd.io
  20 │   resources:
  21 │   - '*'
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac587_1.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - notification.toolkit.fluxcd.io
  26 │   resources:
  27 │   - '*'
  28 │   verbs:
  29 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac587_1.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - image.toolkit.fluxcd.io
  32 │   resources:
  33 │   - '*'
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac587_1.yaml:54-65
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - configmaps
  58 │   verbs:
  59 │   - get
  60 │   - list
  61 │   - watch
  62 └   - create
  ..   
────────────────────────────────────────



rbac587_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac587_2.yaml:9-22
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - notification.toolkit.fluxcd.io
  11 │   - source.toolkit.fluxcd.io
  12 │   - helm.toolkit.fluxcd.io
  13 │   - image.toolkit.fluxcd.io
  14 │   - kustomize.toolkit.fluxcd.io
  15 │   resources:
  16 │   - '*'
  17 └   verbs:
  ..   
────────────────────────────────────────



rbac587_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac587_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - notification.toolkit.fluxcd.io
  12 │   - source.toolkit.fluxcd.io
  13 │   - helm.toolkit.fluxcd.io
  14 │   - image.toolkit.fluxcd.io
  15 │   - kustomize.toolkit.fluxcd.io
  16 │   resources:
  17 │   - '*'
  18 └   verbs:
  ..   
────────────────────────────────────────



rbac587_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac587_4.yaml:4
────────────────────────────────────────
   4 [   name: cluster-reconciler
────────────────────────────────────────



rbac588.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac588.yaml:7
────────────────────────────────────────
   7 [     pods: '1000'
────────────────────────────────────────



rbac588_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac588_1.yaml:36-46
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - namespaces
  40 │   - secrets
  41 │   - configmaps
  42 │   - serviceaccounts
  43 │   verbs:
  44 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac588_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - source.toolkit.fluxcd.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac588_1.yaml:12-17
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - kustomize.toolkit.fluxcd.io
  14 │   resources:
  15 │   - '*'
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac588_1.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - helm.toolkit.fluxcd.io
  20 │   resources:
  21 │   - '*'
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac588_1.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - notification.toolkit.fluxcd.io
  26 │   resources:
  27 │   - '*'
  28 │   verbs:
  29 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac588_1.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - image.toolkit.fluxcd.io
  32 │   resources:
  33 │   - '*'
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac588_1.yaml:54-65
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - configmaps
  58 │   verbs:
  59 │   - get
  60 │   - list
  61 │   - watch
  62 └   - create
  ..   
────────────────────────────────────────



rbac588_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac588_2.yaml:9-22
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - notification.toolkit.fluxcd.io
  11 │   - source.toolkit.fluxcd.io
  12 │   - helm.toolkit.fluxcd.io
  13 │   - image.toolkit.fluxcd.io
  14 │   - kustomize.toolkit.fluxcd.io
  15 │   resources:
  16 │   - '*'
  17 └   verbs:
  ..   
────────────────────────────────────────



rbac588_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac588_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - notification.toolkit.fluxcd.io
  12 │   - source.toolkit.fluxcd.io
  13 │   - helm.toolkit.fluxcd.io
  14 │   - image.toolkit.fluxcd.io
  15 │   - kustomize.toolkit.fluxcd.io
  16 │   resources:
  17 │   - '*'
  18 └   verbs:
  ..   
────────────────────────────────────────



rbac588_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac588_4.yaml:4
────────────────────────────────────────
   4 [   name: cluster-reconciler
────────────────────────────────────────



rbac589.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'flux-operator-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac589.yaml:4
────────────────────────────────────────
   4 [   name: flux-operator-cluster-admin
────────────────────────────────────────



rbac590.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac590.yaml:7
────────────────────────────────────────
   7 [     pods: '1000'
────────────────────────────────────────



rbac590_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac590_1.yaml:36-46
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - namespaces
  40 │   - secrets
  41 │   - configmaps
  42 │   - serviceaccounts
  43 │   verbs:
  44 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac590_1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - source.toolkit.fluxcd.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac590_1.yaml:12-17
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - kustomize.toolkit.fluxcd.io
  14 │   resources:
  15 │   - '*'
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac590_1.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - helm.toolkit.fluxcd.io
  20 │   resources:
  21 │   - '*'
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac590_1.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - notification.toolkit.fluxcd.io
  26 │   resources:
  27 │   - '*'
  28 │   verbs:
  29 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac590_1.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - image.toolkit.fluxcd.io
  32 │   resources:
  33 │   - '*'
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac590_1.yaml:54-65
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - configmaps
  58 │   verbs:
  59 │   - get
  60 │   - list
  61 │   - watch
  62 └   - create
  ..   
────────────────────────────────────────



rbac590_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac590_2.yaml:9-22
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - notification.toolkit.fluxcd.io
  11 │   - source.toolkit.fluxcd.io
  12 │   - helm.toolkit.fluxcd.io
  13 │   - image.toolkit.fluxcd.io
  14 │   - kustomize.toolkit.fluxcd.io
  15 │   resources:
  16 │   - '*'
  17 └   verbs:
  ..   
────────────────────────────────────────



rbac590_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac590_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - notification.toolkit.fluxcd.io
  12 │   - source.toolkit.fluxcd.io
  13 │   - helm.toolkit.fluxcd.io
  14 │   - image.toolkit.fluxcd.io
  15 │   - kustomize.toolkit.fluxcd.io
  16 │   resources:
  17 │   - '*'
  18 └   verbs:
  ..   
────────────────────────────────────────



rbac590_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac590_4.yaml:4
────────────────────────────────────────
   4 [   name: cluster-reconciler
────────────────────────────────────────



rbac591.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac591.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac591.yaml:38-49
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - apps
  40 │   resources:
  41 │   - statefulsets
  42 │   verbs:
  43 │   - create
  44 │   - delete
  45 │   - get
  46 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac591.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────



rbac593.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'gatus' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac593.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



rbac597_2.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'akri-controller-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac597_2.yaml:9-21
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   - services
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'akri-controller-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac597_2.yaml:22-34
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - batch
  24 │   resources:
  25 │   - jobs
  26 │   verbs:
  27 │   - get
  28 │   - list
  29 │   - watch
  30 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'akri-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac597_2.yaml:9-21
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   - services
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 └   - watch
  ..   
────────────────────────────────────────



rbac598_2.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'akri-controller-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac598_2.yaml:9-21
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   - services
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'akri-controller-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac598_2.yaml:22-34
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - batch
  24 │   resources:
  25 │   - jobs
  26 │   verbs:
  27 │   - get
  28 │   - list
  29 │   - watch
  30 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'akri-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac598_2.yaml:9-21
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   - services
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 └   - watch
  ..   
────────────────────────────────────────



rbac599_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'modify-pods-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac599_1.yaml:8-17
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - pods
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 │   - delete
  16 │   - update
  17 └   - patch
────────────────────────────────────────



rbac5_1.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 107, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'pixie-operator-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac5_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac5_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'pixie-operator-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac5_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'pixie-operator-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac5_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'pixie-operator-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 rbac5_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'pixie-operator-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac5_1.yaml:6-44
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - rbac.authorization.k8s.io
  10 │   - extensions
  11 │   - etcd.database.coreos.com
  12 │   - batch
  13 │   - nats.io
  14 └   - policy
  ..   
────────────────────────────────────────



rbac6.yaml (kubernetes)
=======================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac6.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac6.yaml:23-32
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 │   - watch
  31 │   - update
  32 └   - create
────────────────────────────────────────



rbac600.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'dynamic_parameters-manager-rolebinding' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac600.yaml:4
────────────────────────────────────────
   4 [   name: dynamic_parameters-manager-rolebinding
────────────────────────────────────────



rbac601.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac601.yaml:32-41
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - pods
  36 │   verbs:
  37 │   - delete
  38 │   - get
  39 │   - list
  40 │   - watch
  41 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac601.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - endpoints
  10 │   - events
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 │   - update
  15 └   - patch
────────────────────────────────────────



rbac602.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac602.yaml:32-41
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - pods
  36 │   verbs:
  37 │   - delete
  38 │   - get
  39 │   - list
  40 │   - watch
  41 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac602.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - endpoints
  10 │   - events
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 │   - update
  15 └   - patch
────────────────────────────────────────



rbac603_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac603_2.yaml:27-37
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - ''
  29 │   resources:
  30 │   - secrets
  31 │   verbs:
  32 │   - get
  33 │   - list
  34 │   - watch
  35 └   - create
  ..   
────────────────────────────────────────



rbac603_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac603_3.yaml:27-37
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - ''
  29 │   resources:
  30 │   - secrets
  31 │   verbs:
  32 │   - get
  33 │   - list
  34 │   - watch
  35 └   - create
  ..   
────────────────────────────────────────



rbac603_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac603_4.yaml:49-60
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - ''
  51 │   resources:
  52 │   - secrets
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 │   - watch
  57 └   - create
  ..   
────────────────────────────────────────



rbac603_5.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac603_5.yaml:50-57
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 └   - watch
────────────────────────────────────────



rbac603_6.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac603_6.yaml:36-43
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - secrets
  40 │   verbs:
  41 │   - get
  42 │   - list
  43 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac603_6.yaml:96-103
────────────────────────────────────────
  96 ┌ - apiGroups:
  97 │   - ''
  98 │   resources:
  99 │   - secrets
 100 │   verbs:
 101 │   - get
 102 │   - list
 103 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dynamic_parameters-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac603_6.yaml:51-61
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - pods
  55 │   - services
  56 │   verbs:
  57 │   - get
  58 │   - list
  59 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dynamic_parameters-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac603_6.yaml:51-61
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - pods
  55 │   - services
  56 │   verbs:
  57 │   - get
  58 │   - list
  59 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dynamic_parameters-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac603_6.yaml:62-72
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - networking.k8s.io
  64 │   resources:
  65 │   - ingresses
  66 │   verbs:
  67 │   - get
  68 │   - list
  69 │   - watch
  70 └   - create
  ..   
────────────────────────────────────────



rbac604_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'dynamic_parameters:domain-solver' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac604_4.yaml:11-16
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - dynamic_parameters
  13 │   resources:
  14 │   - '*'
  15 │   verbs:
  16 └   - create
────────────────────────────────────────



rbac606.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 rbac606.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'clusterpedia' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac606.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



rbac607_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'contour-secrets-root' shouldn't have access to manage secrets in namespace 'root-httpproxy'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac607_1.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 │   - watch
  13 └   - list
────────────────────────────────────────



rbac607_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'contour-secrets' shouldn't have access to manage secrets in namespace 'projectcontour'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac607_2.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 │   - watch
  13 └   - list
────────────────────────────────────────



rbac608_3.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-watch' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac608_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - namespaces
  14 │   - services
  15 │   - secrets
  16 │   - configmaps
  17 │   - endpoints
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'dynamic_parameters-watch' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac608_3.yaml:22-34
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - getambassador.io
  24 │   - gateway.getambassador.io
  25 │   resources:
  26 │   - '*'
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'dynamic_parameters-watch' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac608_3.yaml:50-57
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - networking.x-k8s.io
  52 │   resources:
  53 │   - '*'
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 └   - watch
────────────────────────────────────────



rbac609_3.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'emissary-apiext' shouldn't have access to manage secrets in namespace 'emissary-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac609_3.yaml:12-19
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 │   - create
  18 │   - list
  19 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'emissary-apiext' shouldn't have access to manage secrets in namespace 'emissary-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac609_3.yaml:20-28
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   resourceNames:
  25 │   - emissary-ingress-webhook-ca
  26 │   verbs:
  27 │   - get
  28 └   - update
────────────────────────────────────────



rbac60_3.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): Role 'external-provisioner-cfg' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac60_3.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - endpoints
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 │   - list
  15 └   - delete
  ..   
────────────────────────────────────────



rbac610.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'my-release-external-secrets-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac610.yaml:75-86
────────────────────────────────────────
  75 ┌ - apiGroups:
  76 │   - ''
  77 │   resources:
  78 │   - secrets
  79 │   verbs:
  80 │   - get
  81 │   - list
  82 │   - watch
  83 └   - create
  ..   
────────────────────────────────────────



rbac610_5.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'my-release-external-secrets-leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac610_5.yaml:13-22
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   resourceNames:
  18 │   - external-secrets-controller
  19 │   verbs:
  20 │   - get
  21 │   - update
  22 └   - patch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'my-release-external-secrets-leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac610_5.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



rbac612.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 110, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'fabedge-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac612.yaml:28-41
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - pods
  32 │   - configmaps
  33 │   - secrets
  34 │   verbs:
  35 │   - get
  36 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'fabedge-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac612.yaml:28-41
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - pods
  32 │   - configmaps
  33 │   - secrets
  34 │   verbs:
  35 │   - get
  36 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'fabedge-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac612.yaml:28-41
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - pods
  32 │   - configmaps
  33 │   - secrets
  34 │   verbs:
  35 │   - get
  36 └   - list
  ..   
────────────────────────────────────────



rbac613.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'alluxioruntime-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac613.yaml:103-117
────────────────────────────────────────
 103 ┌ - apiGroups:
 104 │   - apps
 105 │   resources:
 106 │   - daemonsets
 107 │   - statefulsets
 108 │   - daemonsets/status
 109 │   - statefulsets/status
 110 │   verbs:
 111 └   - get
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'alluxioruntime-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac613.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'alluxioruntime-controller' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 rbac613.yaml:54-59
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - pods/exec
  58 │   verbs:
  59 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'alluxioruntime-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac613.yaml:76-85
────────────────────────────────────────
  76 ┌ - apiGroups:
  77 │   - ''
  78 │   resources:
  79 │   - services
  80 │   verbs:
  81 │   - create
  82 │   - delete
  83 │   - list
  84 │   - watch
  85 └   - get
────────────────────────────────────────



rbac615.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dataset-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac615.yaml:23-36
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - batch
  25 │   resources:
  26 │   - jobs
  27 │   - jobs/status
  28 │   - cronjobs
  29 │   - cronjobs/status
  30 │   verbs:
  31 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dataset-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac615.yaml:112-126
────────────────────────────────────────
 112 ┌ - apiGroups:
 113 │   - apps
 114 │   resources:
 115 │   - daemonsets
 116 │   - statefulsets
 117 │   - daemonsets/status
 118 │   - statefulsets/status
 119 │   verbs:
 120 └   - get
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dataset-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac615.yaml:127-138
────────────────────────────────────────
 127 ┌ - apiGroups:
 128 │   - apps
 129 │   resources:
 130 │   - deployments
 131 │   - deployments/scale
 132 │   - deployments/status
 133 │   verbs:
 134 │   - get
 135 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'dataset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac615.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - configmaps
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 │   - watch
  45 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'dataset-controller' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 rbac615.yaml:64-69
────────────────────────────────────────
  64 ┌ - apiGroups:
  65 │   - ''
  66 │   resources:
  67 │   - pods/exec
  68 │   verbs:
  69 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dataset-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac615.yaml:48-55
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - services
  52 │   verbs:
  53 │   - create
  54 │   - get
  55 └   - delete
────────────────────────────────────────



rbac617.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 110, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'fluidapp-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac617.yaml:25-34
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   verbs:
  30 │   - get
  31 │   - list
  32 │   - patch
  33 │   - update
  34 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'fluidapp-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac617.yaml:35-46
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - configmaps
  39 │   verbs:
  40 │   - get
  41 │   - list
  42 │   - watch
  43 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'fluidapp-controller' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 rbac617.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - pods/exec
  18 │   verbs:
  19 │   - get
  20 │   - create
  21 │   - list
  22 └   - patch
  ..   
────────────────────────────────────────



rbac621.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'thinruntime-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac621.yaml:129-143
────────────────────────────────────────
 129 ┌ - apiGroups:
 130 │   - apps
 131 │   resources:
 132 │   - daemonsets
 133 │   - statefulsets
 134 │   - daemonsets/status
 135 │   - statefulsets/status
 136 │   verbs:
 137 └   - get
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'thinruntime-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac621.yaml:14-25
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'thinruntime-controller' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 rbac621.yaml:56-61
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - pods/exec
  60 │   verbs:
  61 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'thinruntime-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac621.yaml:78-87
────────────────────────────────────────
  78 ┌ - apiGroups:
  79 │   - ''
  80 │   resources:
  81 │   - services
  82 │   verbs:
  83 │   - create
  84 │   - delete
  85 │   - list
  86 │   - watch
  87 └   - get
────────────────────────────────────────



rbac622.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'vineyardruntime-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac622.yaml:46-55
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - pods
  50 │   verbs:
  51 │   - create
  52 │   - delete
  53 │   - get
  54 │   - list
  55 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'vineyardruntime-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac622.yaml:97-111
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - apps
  99 │   resources:
 100 │   - daemonsets
 101 │   - statefulsets
 102 │   - daemonsets/status
 103 │   - statefulsets/status
 104 │   verbs:
 105 └   - get
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'vineyardruntime-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac622.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'vineyardruntime-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac622.yaml:72-81
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - ''
  74 │   resources:
  75 │   - services
  76 │   verbs:
  77 │   - create
  78 │   - delete
  79 │   - list
  80 │   - watch
  81 └   - get
────────────────────────────────────────



rbac623.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'dynamic_parameters' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac623.yaml:15-23
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - pods
  19 │   - pods/exec
  20 │   verbs:
  21 │   - get
  22 │   - create
  23 └   - list
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'dynamic_parameters' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 rbac623.yaml:15-23
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - pods
  19 │   - pods/exec
  20 │   verbs:
  21 │   - get
  22 │   - create
  23 └   - list
────────────────────────────────────────



rbac624.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 2, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'alluxioruntime-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac624.yaml:6-27
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - persistentvolumeclaims
  10 │   - persistentvolumes
  11 │   - services
  12 │   - endpoints
  13 │   - configmaps
  14 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'alluxioruntime-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac624.yaml:6-27
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - persistentvolumeclaims
  10 │   - persistentvolumes
  11 │   - services
  12 │   - endpoints
  13 │   - configmaps
  14 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'alluxioruntime-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac624.yaml:45-59
────────────────────────────────────────
  45 ┌ - apiGroups:
  46 │   - apps
  47 │   resources:
  48 │   - daemonsets
  49 │   - statefulsets
  50 │   - daemonsets/status
  51 │   - statefulsets/status
  52 │   verbs:
  53 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'alluxioruntime-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac624.yaml:6-27
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - persistentvolumeclaims
  10 │   - persistentvolumes
  11 │   - services
  12 │   - endpoints
  13 │   - configmaps
  14 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'alluxioruntime-controller' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 rbac624.yaml:6-27
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - persistentvolumeclaims
  10 │   - persistentvolumes
  11 │   - services
  12 │   - endpoints
  13 │   - configmaps
  14 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'alluxioruntime-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac624.yaml:6-27
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - persistentvolumeclaims
  10 │   - persistentvolumes
  11 │   - services
  12 │   - endpoints
  13 │   - configmaps
  14 └   - events
  ..   
────────────────────────────────────────



rbac625.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 2, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dataset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac625.yaml:19-40
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumes
  24 │   - services
  25 │   - endpoints
  26 │   - configmaps
  27 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dataset-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac625.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - batch
   8 │   resources:
   9 │   - jobs
  10 │   - jobs/status
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dataset-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac625.yaml:19-40
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumes
  24 │   - services
  25 │   - endpoints
  26 │   - configmaps
  27 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'dataset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac625.yaml:19-40
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumes
  24 │   - services
  25 │   - endpoints
  26 │   - configmaps
  27 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'dataset-controller' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 rbac625.yaml:19-40
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumes
  24 │   - services
  25 │   - endpoints
  26 │   - configmaps
  27 └   - events
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dataset-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac625.yaml:19-40
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumes
  24 │   - services
  25 │   - endpoints
  26 │   - configmaps
  27 └   - events
  ..   
────────────────────────────────────────



rbac630.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'dynamic_parameters-cluster-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac630.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - cr.kanister.io
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



rbac630_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'dynamic_parameters-edit-role' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac630_1.yaml:4-5
────────────────────────────────────────
   4 ┌   labels: null
   5 └   name: dynamic_parameters-edit-role
────────────────────────────────────────



rbac639_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'home-assistant-store-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac639_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 └   - watch
────────────────────────────────────────



rbac640_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dummysite-controller' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac640_1.yaml:14-22
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - apps
  16 │   resources:
  17 │   - deployments
  18 │   verbs:
  19 │   - create
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dummysite-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac640_1.yaml:23-31
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - services
  27 │   verbs:
  28 │   - create
  29 │   - get
  30 │   - list
  31 └   - watch
────────────────────────────────────────



rbac641.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 110, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac641.yaml:29-36
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - ''
  31 │   resources:
  32 │   - secrets
  33 │   verbs:
  34 │   - get
  35 │   - list
  36 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac641.yaml:47-55
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - pods
  51 │   verbs:
  52 │   - get
  53 │   - list
  54 │   - watch
  55 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac641.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - configmaps
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 │   - watch
  45 │   - update
  46 └   - create
────────────────────────────────────────



rbac642_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'heavy-ops-runner' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac642_1.yaml:4
────────────────────────────────────────
   4 [   name: heavy-ops-runner
────────────────────────────────────────



rbac643.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac643.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac643.yaml:38-49
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - apps
  40 │   resources:
  41 │   - statefulsets
  42 │   verbs:
  43 │   - create
  44 │   - delete
  45 │   - get
  46 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac643.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────



rbac645.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'capacitor' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac645.yaml:6-22
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - networking.k8s.io
   8 │   - apps
   9 │   - ''
  10 │   resources:
  11 │   - pods
  12 │   - pods/log
  13 │   - ingresses
  14 └   - deployments
  ..   
────────────────────────────────────────



rbac646.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'gatus' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac646.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



rbac650.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0049 (MEDIUM): Role 'operator-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac650.yaml:7-28
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - org.acme
   9 │   - ''
  10 │   - apps
  11 │   - autoscaling
  12 │   - batch
  13 │   - extensions
  14 │   - policy
  15 └   - rbac.authorization.k8s.io
  ..   
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'operator-role' shouldn't manage all resources at the namespace 'default'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 rbac650.yaml:7-28
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - org.acme
   9 │   - ''
  10 │   - apps
  11 │   - autoscaling
  12 │   - batch
  13 │   - extensions
  14 │   - policy
  15 └   - rbac.authorization.k8s.io
  ..   
────────────────────────────────────────



rbac65_3.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): Role 'external-provisioner-cfg' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac65_3.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - endpoints
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 │   - list
  15 └   - delete
  ..   
────────────────────────────────────────



rbac665.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 rbac665.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



rbac666_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac666_2.yaml:10-28
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - secrets
  15 │   - nodes
  16 │   - pods
  17 │   - services
  18 └   - serviceaccounts
  ..   
────────────────────────────────────────



rbac666_3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-state-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 rbac666_3.yaml:11-20
────────────────────────────────────────
  11 ┌   clusterIP: None
  12 │   ports:
  13 │   - name: http-metrics
  14 │     port: 8080
  15 │     targetPort: http-metrics
  16 │   - name: telemetry
  17 │     port: 8081
  18 │     targetPort: telemetry
  19 │   selector:
  20 └     app.kubernetes.io/name: kube-state-metrics
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac666_3.yaml:11-20
────────────────────────────────────────
  11 ┌   clusterIP: None
  12 │   ports:
  13 │   - name: http-metrics
  14 │     port: 8080
  15 │     targetPort: http-metrics
  16 │   - name: telemetry
  17 │     port: 8081
  18 │     targetPort: telemetry
  19 │   selector:
  20 └     app.kubernetes.io/name: kube-state-metrics
────────────────────────────────────────



rbac666_4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 104, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rbac666_4.yaml:24-52
────────────────────────────────────────
  24 ┌       - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             path: /healthz
  28 │             port: 8080
  29 │           initialDelaySeconds: 5
  30 │           timeoutSeconds: 5
  31 │         name: kube-state-metrics
  32 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rbac666_4.yaml:24-52
────────────────────────────────────────
  24 ┌       - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             path: /healthz
  28 │             port: 8080
  29 │           initialDelaySeconds: 5
  30 │           timeoutSeconds: 5
  31 │         name: kube-state-metrics
  32 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rbac666_4.yaml:24-52
────────────────────────────────────────
  24 ┌       - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             path: /healthz
  28 │             port: 8080
  29 │           initialDelaySeconds: 5
  30 │           timeoutSeconds: 5
  31 │         name: kube-state-metrics
  32 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rbac666_4.yaml:24-52
────────────────────────────────────────
  24 ┌       - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             path: /healthz
  28 │             port: 8080
  29 │           initialDelaySeconds: 5
  30 │           timeoutSeconds: 5
  31 │         name: kube-state-metrics
  32 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rbac666_4.yaml:24-52
────────────────────────────────────────
  24 ┌       - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             path: /healthz
  28 │             port: 8080
  29 │           initialDelaySeconds: 5
  30 │           timeoutSeconds: 5
  31 │         name: kube-state-metrics
  32 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kube-state-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 rbac666_4.yaml:11-55
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app.kubernetes.io/name: kube-state-metrics
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/component: exporter
  19 └         app.kubernetes.io/name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbac666_4.yaml:11-55
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app.kubernetes.io/name: kube-state-metrics
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/component: exporter
  19 └         app.kubernetes.io/name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbac666_4.yaml:22-55
────────────────────────────────────────
  22 ┌       automountServiceAccountToken: true
  23 │       containers:
  24 │       - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             path: /healthz
  28 │             port: 8080
  29 │           initialDelaySeconds: 5
  30 └           timeoutSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rbac666_4.yaml:24-52
────────────────────────────────────────
  24 ┌       - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             path: /healthz
  28 │             port: 8080
  29 │           initialDelaySeconds: 5
  30 │           timeoutSeconds: 5
  31 │         name: kube-state-metrics
  32 └         ports:
  ..   
────────────────────────────────────────



rbac667.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 rbac667.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



rbac668_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'hello-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac668_1.yaml:31-38
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - apps
  33 │   resources:
  34 │   - deployments
  35 │   verbs:
  36 │   - list
  37 │   - create
  38 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'hello-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac668_1.yaml:23-30
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - list
  29 │   - create
  30 └   - delete
────────────────────────────────────────



rbac67.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'default-pod-reader' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac67.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   verbs:
  14 │   - get
  15 │   - list
  16 └   - delete
────────────────────────────────────────



rbac671.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac671.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac671.yaml:23-32
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 │   - watch
  31 │   - update
  32 └   - create
────────────────────────────────────────



rbac673_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'pod-reaper-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac673_1.yaml:7-15
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - '*'
   9 │   resources:
  10 │   - pods
  11 │   verbs:
  12 │   - list
  13 │   - delete
  14 │   - get
  15 └   - watch
────────────────────────────────────────



rbac68.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'rbac-tools-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac68.yaml:4-7
────────────────────────────────────────
   4 ┌   name: rbac-tools-admin
   5 │   namespace: default
   6 │   labels:
   7 └     kiamol: ch17
────────────────────────────────────────



rbac69.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'exam-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac69.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'exam-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac69.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'exam-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac69.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'exam-role' shouldn't have access to manage secrets in namespace 'exam'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac69.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────



rbac7.yaml (kubernetes)
=======================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nginx-ingress' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac7.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'nginx-ingress' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac7.yaml:23-32
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - get
  29 │   - list
  30 │   - watch
  31 │   - update
  32 └   - create
────────────────────────────────────────



rbac70.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'tailscale' shouldn't have access to manage secrets in namespace 'prometheus'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac70.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'tailscale' shouldn't have access to manage secrets in namespace 'prometheus'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 rbac70.yaml:13-22
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 │   - update
  20 │   - patch
  21 │   resourceNames:
  22 └   - tailscale-state
────────────────────────────────────────



rbac84_2.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'smb-external-provisioner-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac84_2.yaml:71-76
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - secrets
  75 │   verbs:
  76 └   - get
────────────────────────────────────────



rbac85.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac85.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac85.yaml:38-49
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - apps
  40 │   resources:
  41 │   - statefulsets
  42 │   verbs:
  43 │   - create
  44 │   - delete
  45 │   - get
  46 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac85.yaml:25-37
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - create
  32 │   - delete
  33 └   - get
  ..   
────────────────────────────────────────



rbac86_2.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'system-upgrade' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 rbac86_2.yaml:4
────────────────────────────────────────
   4 [   name: system-upgrade
────────────────────────────────────────



rbac87_2.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'gatus' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac87_2.yaml:11-19
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   verbs:
  17 │   - get
  18 │   - watch
  19 └   - list
────────────────────────────────────────



rbac89.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'multus' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac89.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - k8s.cni.cncf.io
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'multus' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac89.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   - pods/status
  17 │   verbs:
  18 │   - get
  19 │   - list
  20 │   - update
  21 └   - watch
────────────────────────────────────────



rbac90_1.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 rbac90_1.yaml:19-24
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - apps
  21 │   resources:
  22 │   - deployments
  23 │   verbs:
  24 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'benk' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac90_1.yaml:19-24
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - apps
  21 │   resources:
  22 │   - deployments
  23 │   verbs:
  24 └   - '*'
────────────────────────────────────────



rbac97.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 rbac97.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - '*'
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'system-admin' shouldn't manage all resources at the namespace 'replace-me'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 rbac97.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - '*'
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



rbac97_1.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0123 (CRITICAL): RoleBinding 'system-admin' should not bind to roles {"system:masters"}
════════════════════════════════════════
Binding to system:masters group to any clusterrole or role is a security risk.

See https://avd.aquasec.com/misconfig/ksv0123
────────────────────────────────────────
 rbac97_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: system-admin
   5 └   namespace: replace-me
────────────────────────────────────────



rbac98_1.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 rbac98_1.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   - namespaces
  ..   
────────────────────────────────────────



rbac_role.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 3)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role.yaml:14-21
────────────────────────────────────────
  14 ┌   - apiGroups:
  15 │       - extensions
  16 │     resources: ["*"]
  17 │     verbs:
  18 │       - get
  19 │       - list
  20 │       - watch
  21 └       - update
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role.yaml:22-29
────────────────────────────────────────
  22 ┌   - apiGroups:
  23 │       - apps
  24 │     resources: ["*"]
  25 │     verbs:
  26 │       - get
  27 │       - list
  28 │       - watch
  29 └       - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role.yaml:38-49
────────────────────────────────────────
  38 ┌   - apiGroups:
  39 │       - ""
  40 │     resources:
  41 │       - "configmaps"
  42 │       - "events"
  43 │     verbs:
  44 │       - get
  45 │       - list
  46 └       - watch
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac_role.yaml:74-87
────────────────────────────────────────
  74 ┌   - apiGroups:
  75 │       - admissionregistration.k8s.io
  76 │     resources:
  77 │       - mutatingwebhookconfigurations
  78 │       - validatingwebhookconfigurations
  79 │     verbs:
  80 │       - get
  81 │       - list
  82 └       - watch
  ..   
────────────────────────────────────────



rbac_role1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 3)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role1.yaml:14-21
────────────────────────────────────────
  14 ┌   - apiGroups:
  15 │       - extensions
  16 │     resources: ["*"]
  17 │     verbs:
  18 │       - get
  19 │       - list
  20 │       - watch
  21 └       - update
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role1.yaml:22-29
────────────────────────────────────────
  22 ┌   - apiGroups:
  23 │       - apps
  24 │     resources: ["*"]
  25 │     verbs:
  26 │       - get
  27 │       - list
  28 │       - watch
  29 └       - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role1.yaml:30-41
────────────────────────────────────────
  30 ┌   - apiGroups:
  31 │       - ""
  32 │     resources:
  33 │       - "configmaps"
  34 │       - "events"
  35 │     verbs:
  36 │       - get
  37 │       - list
  38 └       - watch
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac_role1.yaml:67-80
────────────────────────────────────────
  67 ┌   - apiGroups:
  68 │       - admissionregistration.k8s.io
  69 │     resources:
  70 │       - mutatingwebhookconfigurations
  71 │       - validatingwebhookconfigurations
  72 │     verbs:
  73 │       - get
  74 │       - list
  75 └       - watch
  ..   
────────────────────────────────────────



rbac_role2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 3)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role2.yaml:14-21
────────────────────────────────────────
  14 ┌   - apiGroups:
  15 │       - extensions
  16 │     resources: ["*"]
  17 │     verbs:
  18 │       - get
  19 │       - list
  20 │       - watch
  21 └       - update
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role2.yaml:22-29
────────────────────────────────────────
  22 ┌   - apiGroups:
  23 │       - apps
  24 │     resources: ["*"]
  25 │     verbs:
  26 │       - get
  27 │       - list
  28 │       - watch
  29 └       - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role2.yaml:38-49
────────────────────────────────────────
  38 ┌   - apiGroups:
  39 │       - ""
  40 │     resources:
  41 │       - "configmaps"
  42 │       - "events"
  43 │     verbs:
  44 │       - get
  45 │       - list
  46 └       - watch
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac_role2.yaml:74-87
────────────────────────────────────────
  74 ┌   - apiGroups:
  75 │       - admissionregistration.k8s.io
  76 │     resources:
  77 │       - mutatingwebhookconfigurations
  78 │       - validatingwebhookconfigurations
  79 │     verbs:
  80 │       - get
  81 │       - list
  82 └       - watch
  ..   
────────────────────────────────────────



rbac_role3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 3)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role3.yaml:14-21
────────────────────────────────────────
  14 ┌   - apiGroups:
  15 │       - extensions
  16 │     resources: ["*"]
  17 │     verbs:
  18 │       - get
  19 │       - list
  20 │       - watch
  21 └       - update
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 rbac_role3.yaml:22-29
────────────────────────────────────────
  22 ┌   - apiGroups:
  23 │       - apps
  24 │     resources: ["*"]
  25 │     verbs:
  26 │       - get
  27 │       - list
  28 │       - watch
  29 └       - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role3.yaml:30-41
────────────────────────────────────────
  30 ┌   - apiGroups:
  31 │       - ""
  32 │     resources:
  33 │       - "configmaps"
  34 │       - "events"
  35 │     verbs:
  36 │       - get
  37 │       - list
  38 └       - watch
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'kubernetes-cronhpa-controller-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac_role3.yaml:67-80
────────────────────────────────────────
  67 ┌   - apiGroups:
  68 │       - admissionregistration.k8s.io
  69 │     resources:
  70 │       - mutatingwebhookconfigurations
  71 │       - validatingwebhookconfigurations
  72 │     verbs:
  73 │       - get
  74 │       - list
  75 └       - watch
  ..   
────────────────────────────────────────



rbac_role4.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 110, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'alb-ingress-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac_role4.yaml:26-38
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   - extensions
  29 │   resources:
  30 │   - nodes
  31 │   - pods
  32 │   - secrets
  33 │   - services
  34 └   - namespaces
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'alb-ingress-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role4.yaml:8-25
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   - extensions
  11 │   resources:
  12 │   - configmaps
  13 │   - endpoints
  14 │   - events
  15 │   - ingresses
  16 └   - ingresses/status
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'alb-ingress-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac_role4.yaml:8-25
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   - extensions
  11 │   resources:
  12 │   - configmaps
  13 │   - endpoints
  14 │   - events
  15 │   - ingresses
  16 └   - ingresses/status
  ..   
────────────────────────────────────────



rbac_role5.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 108, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-manager-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac_role5.yaml:55-66
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ""
  57 │   resources:
  58 │   - secrets
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - watch
  63 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dynamic_parameters-manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac_role5.yaml:8-21
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ""
  10 │   resources:
  11 │   - pods
  12 │   - configmaps
  13 │   - persistentvolumeclaims
  14 │   - events
  15 │   verbs:
  16 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'dynamic_parameters-manager-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role5.yaml:8-21
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ""
  10 │   resources:
  11 │   - pods
  12 │   - configmaps
  13 │   - persistentvolumeclaims
  14 │   - events
  15 │   verbs:
  16 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dynamic_parameters-manager-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac_role5.yaml:67-78
────────────────────────────────────────
  67 ┌ - apiGroups:
  68 │   - ""
  69 │   resources:
  70 │   - services
  71 │   verbs:
  72 │   - get
  73 │   - list
  74 │   - watch
  75 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'dynamic_parameters-manager-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac_role5.yaml:42-54
────────────────────────────────────────
  42 ┌ - apiGroups:
  43 │   - admissionregistration.k8s.io
  44 │   resources:
  45 │   - mutatingwebhookconfigurations
  46 │   - validatingwebhookconfigurations
  47 │   verbs:
  48 │   - get
  49 │   - list
  50 └   - watch
  ..   
────────────────────────────────────────



rbac_role6.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 108, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynamic_parameters-manager-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac_role6.yaml:54-65
────────────────────────────────────────
  54 ┌ - apiGroups:
  55 │   - ''
  56 │   resources:
  57 │   - secrets
  58 │   verbs:
  59 │   - get
  60 │   - list
  61 │   - watch
  62 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dynamic_parameters-manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 rbac_role6.yaml:7-20
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   - persistentvolumeclaims
  13 │   - events
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'dynamic_parameters-manager-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role6.yaml:7-20
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   - persistentvolumeclaims
  13 │   - events
  14 │   verbs:
  15 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dynamic_parameters-manager-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac_role6.yaml:66-77
────────────────────────────────────────
  66 ┌ - apiGroups:
  67 │   - ''
  68 │   resources:
  69 │   - services
  70 │   verbs:
  71 │   - get
  72 │   - list
  73 │   - watch
  74 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'dynamic_parameters-manager-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 rbac_role6.yaml:41-53
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - admissionregistration.k8s.io
  43 │   resources:
  44 │   - mutatingwebhookconfigurations
  45 │   - validatingwebhookconfigurations
  46 │   verbs:
  47 │   - get
  48 │   - list
  49 └   - watch
  ..   
────────────────────────────────────────



rbac_role7.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 110, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'alb-ingress-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbac_role7.yaml:26-38
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   - extensions
  29 │   resources:
  30 │   - nodes
  31 │   - pods
  32 │   - secrets
  33 │   - services
  34 └   - namespaces
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'alb-ingress-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rbac_role7.yaml:8-25
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   - extensions
  11 │   resources:
  12 │   - configmaps
  13 │   - endpoints
  14 │   - events
  15 │   - ingresses
  16 └   - ingresses/status
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'alb-ingress-controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 rbac_role7.yaml:8-25
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   - extensions
  11 │   resources:
  12 │   - configmaps
  13 │   - endpoints
  14 │   - events
  15 │   - ingresses
  16 └   - ingresses/status
  ..   
────────────────────────────────────────



rback-test-full-access-role.yaml (kubernetes)
=============================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): ClusterRole 'rbac-behavior' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rback-test-full-access-role.yaml:10-12
────────────────────────────────────────
  10 ┌   - apiGroups: [ "" ]
  11 │     resources: [ "configmaps" ]
  12 └     verbs: [ "get", "watch", "list","post", "delete", "create","patch" ]
────────────────────────────────────────



rback-test-no-cr-access.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): ClusterRole 'rbac-behavior' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rback-test-no-cr-access.yaml:7-9
────────────────────────────────────────
   7 ┌   - apiGroups: [""]
   8 │     resources: [ "configmaps" ]
   9 └     verbs: [ "get", "watch", "list","post", "delete","create","patch"]
────────────────────────────────────────



rback-test-only-main-ns-access.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'rbac-behavior' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 rback-test-only-main-ns-access.yaml:9-11
────────────────────────────────────────
   9 ┌   - apiGroups: [ "" ]
  10 │     resources: [ "configmaps" ]
  11 └     verbs: [ "get", "watch", "list","post", "delete", "create","patch" ]
────────────────────────────────────────



rbd-with-secret.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 93, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rbd-rw' of Pod 'rbd2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rbd-rw' of 'pod' 'rbd2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'rbd2' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 rbd-with-secret.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbd-with-secret.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rbd-rw" of pod "rbd2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod rbd2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rbd-with-secret.yaml:4
────────────────────────────────────────
   4 [   name: rbd2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rbd2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod rbd2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd-with-secret.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rbd-rw in pod rbd2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rbd-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────



rbd-with-secret1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 93, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rbd-rw' of Pod 'rbd2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rbd-rw' of 'pod' 'rbd2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'rbd2' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 rbd-with-secret1.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbd-with-secret1.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rbd-rw" of pod "rbd2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod rbd2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rbd-with-secret1.yaml:4
────────────────────────────────────────
   4 [   name: rbd2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rbd2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod rbd2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd-with-secret1.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rbd-rw in pod rbd2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rbd-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────



rbd-with-secret2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 93, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rbd-rw' of Pod 'rbd2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rbd-rw' of 'pod' 'rbd2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rbd-rw' of Pod 'rbd2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rbd-rw' of Pod 'rbd2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'rbd2' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 rbd-with-secret2.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbd-with-secret2.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rbd-rw" of pod "rbd2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod rbd2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rbd-with-secret2.yaml:4
────────────────────────────────────────
   4 [   name: rbd2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rbd2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod rbd2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd-with-secret2.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rbd-rw in pod rbd2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rbd-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────



rbd.yaml (kubernetes)
=====================
Tests: 114 (SUCCESSES: 93, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rbd-rw' of Pod 'rbd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rbd-rw' of 'pod' 'rbd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'rbd' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 rbd.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbd.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rbd-rw" of pod "rbd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod rbd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rbd.yaml:4
────────────────────────────────────────
   4 [   name: rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rbd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod rbd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rbd-rw in pod rbd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rbd.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────



rbd1.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 93, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rbd-rw' of Pod 'rbd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rbd-rw' of 'pod' 'rbd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'rbd' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 rbd1.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbd1.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rbd-rw" of pod "rbd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod rbd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rbd1.yaml:4
────────────────────────────────────────
   4 [   name: rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rbd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod rbd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd1.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rbd-rw in pod rbd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rbd1.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────



rbd2.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 93, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rbd-rw' of Pod 'rbd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rbd-rw' of 'pod' 'rbd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rbd-rw' of Pod 'rbd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rbd-rw' of Pod 'rbd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'rbd' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 rbd2.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbd2.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rbd-rw" of pod "rbd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod rbd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rbd2.yaml:4
────────────────────────────────────────
   4 [   name: rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rbd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod rbd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rbd2.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 │         mountPath: /mnt/rbd
  12 │   volumes:
  13 │     - name: rbdpd
  14 └       rbd:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rbd-rw in pod rbd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rbd2.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: kubernetes/pause
   8 │       name: rbd-rw
   9 │       volumeMounts:
  10 │       - name: rbdpd
  11 └         mountPath: /mnt/rbd
────────────────────────────────────────



rbd_ctrlplugin_cluster_role.yaml (kubernetes)
=============================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-ctrlplugin-cr' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbd_ctrlplugin_cluster_role.yaml:6-8
────────────────────────────────────────
   6 ┌   - apiGroups: [""]
   7 │     resources: ["secrets"]
   8 └     verbs: ["get", "list", "watch"]
────────────────────────────────────────



rbd_nodeplugin_cluster_role.yaml (kubernetes)
=============================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-nodeplugin-cr' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 rbd_nodeplugin_cluster_role.yaml:6-8
────────────────────────────────────────
   6 ┌   - apiGroups: [""]
   7 │     resources: ["secrets"]
   8 └     verbs: ["get", "list"]
────────────────────────────────────────



rbmq-ingress.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rbmq-ingress.yaml:10-24
────────────────────────────────────────
  10 ┌    tls:
  11 │    - hosts:
  12 │      - rabbitmq.gaenari.kr
  13 │      secretName: rabbitmq-ingress-tls
  14 │    rules:
  15 │    - host: rabbitmq.gaenari.kr
  16 │      http:
  17 │        paths:
  18 └        - pathType: Prefix
  ..   
────────────────────────────────────────



rc-api-catalog.yaml (kubernetes)
================================
Tests: 144 (SUCCESSES: 94, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 32, MEDIUM: 11, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api-catalog' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'database-check' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbit-check' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-api-catalog.yaml:6-58
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     app: api-catalog
   9 │   template:
  10 │     metadata:
  11 │       creationTimestamp: null
  12 │       labels:
  13 │         app: api-catalog
  14 └         environment: test
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api-catalog" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "database-check" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbit-check" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller api-catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-api-catalog.yaml:4
────────────────────────────────────────
   4 [   name: api-catalog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller api-catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog.yaml:19-58
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 └         - name: AppSettings__DatabaseType
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api-catalog in replicationcontroller api-catalog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rc-api-catalog.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────



rc-api-catalog1.yaml (kubernetes)
=================================
Tests: 144 (SUCCESSES: 94, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 32, MEDIUM: 11, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api-catalog' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'database-check' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbit-check' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-api-catalog1.yaml:6-58
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     app: api-catalog
   9 │   template:
  10 │     metadata:
  11 │       creationTimestamp: null
  12 │       labels:
  13 │         app: api-catalog
  14 └         environment: test
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api-catalog" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "database-check" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbit-check" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller api-catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-api-catalog1.yaml:4
────────────────────────────────────────
   4 [   name: api-catalog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog1.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog1.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller api-catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog1.yaml:19-58
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 └         - name: AppSettings__DatabaseType
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api-catalog in replicationcontroller api-catalog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rc-api-catalog1.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────



rc-api-catalog2.yaml (kubernetes)
=================================
Tests: 144 (SUCCESSES: 94, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 32, MEDIUM: 11, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api-catalog' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'database-check' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbit-check' of 'replicationcontroller' 'api-catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api-catalog' of ReplicationController 'api-catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api-catalog' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'database-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbit-check' of ReplicationController 'api-catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-api-catalog2.yaml:6-58
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     app: api-catalog
   9 │   template:
  10 │     metadata:
  11 │       creationTimestamp: null
  12 │       labels:
  13 │         app: api-catalog
  14 └         environment: test
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api-catalog" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "database-check" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbit-check" of replicationcontroller "api-catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller api-catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-api-catalog2.yaml:4
────────────────────────────────────────
   4 [   name: api-catalog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog2.yaml:56-58
────────────────────────────────────────
  56 ┌       - name: rabbit-check
  57 │         image: busybox:1.28
  58 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.6 5672; do echo aguardando rabbitmq; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog2.yaml:53-55
────────────────────────────────────────
  53 ┌       - name: database-check
  54 │         image: busybox:1.28
  55 └         command: ['sh', '-c', "until nc -z -v -w5 172.17.0.4 1433; do echo aguardando banco de dados; sleep 1; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller api-catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-api-catalog2.yaml:19-58
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 └         - name: AppSettings__DatabaseType
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api-catalog in replicationcontroller api-catalog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 rc-api-catalog2.yaml:20-49
────────────────────────────────────────
  20 ┌       - image: desenvolvedorio/devstore-api-catalog:latest
  21 │         name: api-catalog
  22 │         env: 
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Docker
  25 │         - name: CUSTOMCONNSTR_DefaultConnection
  26 │           value: "Server=172.17.0.4;Database=DSCatalog;MultipleActiveResultSets=true;User Id=sa;Password=Teste@123"
  27 │         - name: AppSettings__DatabaseType
  28 └           value: SqlServer
  ..   
────────────────────────────────────────



rc-args.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args1.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args1.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args1.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args10.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args10.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args10.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args10.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args11.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args11.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args11.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args11.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args12.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args12.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args12.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args12.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args12.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args13.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args13.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args13.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args13.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args14.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args14.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args14.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args14.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args14.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args15.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args15.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args15.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args15.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args16.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args16.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args16.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args16.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args16.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args17.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args17.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args17.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args17.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args18.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args18.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args18.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args18.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args18.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args19.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args19.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args19.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args19.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args19.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args2.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args2.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args2.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args20.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args20.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args20.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args20.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args20.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args21.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args21.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args21.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args21.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args21.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args22.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args22.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args22.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args22.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args22.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args23.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args23.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args23.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args23.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args23.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args26.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args26.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args26.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args26.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args26.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args27.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args27.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args27.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args27.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args27.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args28.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args28.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args28.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args28.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args28.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args29.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args29.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args29.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args29.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args29.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args3.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args3.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args3.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args3.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args30.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args30.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args30.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args30.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args30.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args31.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args31.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args31.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args31.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args31.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args32.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args32.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args32.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args32.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args32.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args33.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args33.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args33.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args33.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args33.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args34.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args34.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args34.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args34.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args34.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args35.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args35.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args35.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args35.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args35.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args36.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args36.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args36.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args36.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args36.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args37.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args37.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args37.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args37.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args37.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args4.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args4.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args4.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args4.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args5.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args5.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args5.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args5.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args6.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args6.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args6.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args7.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args7.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args7.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args7.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args8.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args8.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args8.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args8.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-args9.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-rc' of 'replicationcontroller' 'test-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-rc' of ReplicationController 'test-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-rc' of ReplicationController 'test-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-args9.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         name: test-rc
  13 │     spec:
  14 │       containers:
  15 │         - name: test-rc
  16 └           image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-rc" of replicationcontroller "test-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller test-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-args9.yaml:4-6
────────────────────────────────────────
   4 ┌   name: test-rc
   5 │   labels:
   6 └     name: test-rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller test-rc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args9.yaml:15-20
────────────────────────────────────────
  15 ┌         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller test-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-args9.yaml:14-20
────────────────────────────────────────
  14 ┌       containers:
  15 │         - name: test-rc
  16 │           image: nginx
  17 │           args:
  18 │           - -random_flag=%s@domain.com
  19 │           ports:
  20 └           - containerPort: 80
────────────────────────────────────────



rc-configuration.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpha' of ReplicationController 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpha' of ReplicationController 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpha' of 'replicationcontroller' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpha' of ReplicationController 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpha' of ReplicationController 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpha' of ReplicationController 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpha' of ReplicationController 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpha' of ReplicationController 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpha' of ReplicationController 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpha' of ReplicationController 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpha' of ReplicationController 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpha' of ReplicationController 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-configuration.yaml:10-22
────────────────────────────────────────
  10 ┌   replicas: 5
  11 │   selector:
  12 │     app: frontend
  13 │ 
  14 │   template:
  15 │     metadata:
  16 │       name: alnafi
  17 │       labels:
  18 └         app: frontend
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpha" of replicationcontroller "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-configuration.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp
   5 │   labels:
   6 │     app: frontend-rc
   7 └     type: development
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-configuration.yaml:21-22
────────────────────────────────────────
  21 ┌       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-configuration.yaml:20-22
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: alpha
  22 └         image: nginx 
────────────────────────────────────────



rc-definition.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp
  12 │       labels:
  13 │         app: myapp
  14 │ 
  15 │     spec:
  16 │       containers:
  17 └         - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────



rc-definition1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition1.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp
  12 │       labels:
  13 │         app: myapp
  14 │ 
  15 │     spec:
  16 │       containers:
  17 └         - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition1.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────



rc-definition10.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition10.yaml:9-21
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │         app: myapp
  14 │         type: front-end
  15 │     spec:
  16 │       containers:
  17 └         - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition10.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition10.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition10.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────



rc-definition11.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition11.yaml:9-20
────────────────────────────────────────
   9 ┌   template: # Set the template for the Pods and their replicas
  10 │     metadata: # Pod metadata
  11 │       name: myapp-pod # String value, Pod name
  12 │       namespace: ckad-practice # Namespace here doesn't apply'
  13 │       labels: # Dictonary
  14 │         app: myapp
  15 │         type: front-end
  16 │     spec: # Pod specification
  17 └       containers: # List/Array
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition11.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition11.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition11.yaml:17-19
────────────────────────────────────────
  17 ┌       containers: # List/Array
  18 │         - name: nginx-container # First item, Container name
  19 └           image: nginx
────────────────────────────────────────



rc-definition12.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition12.yaml:10-21
────────────────────────────────────────
  10 ┌   template:
  11 │     
  12 │     metadata:
  13 │       name: nginx
  14 │       labels:
  15 │         app: nginx
  16 │         tier: frontend
  17 │     spec:
  18 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition12.yaml:5-8
────────────────────────────────────────
   5 ┌   name: myapp-rc
   6 │   labels:
   7 │     app: myapp
   8 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition12.yaml:19-20
────────────────────────────────────────
  19 ┌        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition12.yaml:18-20
────────────────────────────────────────
  18 ┌       containers:
  19 │        -  name: nginx
  20 └           image: nginx
────────────────────────────────────────



rc-definition13.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition13.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │         app: myapp
  14 │         type: front-end
  15 │     spec:
  16 │       containers:
  17 └       - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition13.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition13.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition13.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────



rc-definition14.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition14.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │         app: myapp
  14 │         type: front-end
  15 │     spec:
  16 │       containers:
  17 └       - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition14.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition14.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition14.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────



rc-definition15.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-container' of ReplicaSet 'busybox-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-container' of 'replicaset' 'busybox-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-container' of ReplicaSet 'busybox-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-container' of ReplicaSet 'busybox-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition15.yaml:8-20
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       env: development
  11 │   template:
  12 │     metadata:
  13 │       name: busybox-name
  14 │       labels:
  15 │         env: development
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-container" of replicaset "busybox-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset busybox-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: busybox-rc
   5 │   labels:
   6 └     app: busybox-rc-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition15.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset busybox-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition15.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: busybox-container
  19 └           image: busybox
────────────────────────────────────────



rc-definition16.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition16.yaml:11-22
────────────────────────────────────────
  11 ┌   template:
  12 │ # Pod Metadata
  13 │     metadata:
  14 │       labels:
  15 │         app: myapp
  16 │         tier: front-end
  17 │ # Pod Spec
  18 │     spec:
  19 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition16.yaml:5-8
────────────────────────────────────────
   5 ┌   name: myapp-rc
   6 │   labels:
   7 │     app: myapp
   8 └     tier: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition16.yaml:20-21
────────────────────────────────────────
  20 ┌         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition16.yaml:19-21
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: nginx-container
  21 └           image: nginx
────────────────────────────────────────



rc-definition17.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition17.yaml:9-19
────────────────────────────────────────
   9 ┌   replicas: 3
  10 │   template:
  11 │     metadata:
  12 │       name: myapp-pod
  13 │       labels:
  14 │         app: myapp
  15 │         type: front-end
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition17.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition17.yaml:18-19
────────────────────────────────────────
  18 ┌         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition17.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nginx-container
  19 └           image: nginx
────────────────────────────────────────



rc-definition2.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-controller' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-controller' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-controller' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-controller' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition2.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │         app: myapp
  14 │         type: front-end
  15 │     spec:
  16 │       containers:
  17 └         - name: nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-controller" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition2.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx-controller
  18 └           image: nginx
────────────────────────────────────────



rc-definition4.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition4.yaml:9-18
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │         app: myapp
  14 │     spec:
  15 │       containers:
  16 │         - name: nginx-container
  17 │           image: nginx
  18 └   replicas: 3
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition4.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition4.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition4.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: nginx-container
  17 └           image: nginx
────────────────────────────────────────



rc-definition5.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition5.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │         app: myapp
  14 │         type: front-end
  15 │     spec:
  16 │       containers:
  17 └         - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition5.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition5.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────



rc-definition6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition6.yaml:9-21
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │         app: myapp
  14 │         type: front-end
  15 │     spec:
  16 │       containers:
  17 └         - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition6.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition6.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition6.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx-container
  18 └           image: nginx
────────────────────────────────────────



rc-definition7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition7.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: nginx-2
  12 │       labels:
  13 │         name: frontend
  14 │         env: production
  15 │     spec:
  16 │       containers:
  17 └         - name: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition7.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: nginx
  18 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition7.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx
  18 └           image: nginx
────────────────────────────────────────



rc-definition8.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition8.yaml:9-20
────────────────────────────────────────
   9 ┌   template:
  10 │     metadata:
  11 │       name: myapp-pod
  12 │       labels:
  13 │          app: myapp
  14 │          type: front-end
  15 │     spec:
  16 │       containers:
  17 └       - name: nginx-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition8.yaml:4-7
────────────────────────────────────────
   4 ┌   name: myapp-rc
   5 │   labels:
   6 │     app: myapp
   7 └     type: front-end
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition8.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition8.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx-container
  18 └         image: nginx
────────────────────────────────────────



rc-definition9.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of ReplicationController 'myapp-replicaset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'replicationcontroller' 'myapp-replicaset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of ReplicationController 'myapp-replicaset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of ReplicationController 'myapp-replicaset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-definition9.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     metadata:
   9 │       labels:
  10 │         app: myapp
  11 │     spec:
  12 │       containers:
  13 │       - name: myapp
  14 │         image: nginx
  15 └   replicas: 3
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of replicationcontroller "myapp-replicaset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-replicaset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-definition9.yaml:4
────────────────────────────────────────
   4 [   name: myapp-replicaset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-replicaset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition9.yaml:13-14
────────────────────────────────────────
  13 ┌       - name: myapp
  14 └         image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-replicaset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-definition9.yaml:12-14
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: myapp
  14 └         image: nginx
────────────────────────────────────────



rc-demo.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-demo' of ReplicationController 'rc-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-demo' of 'replicationcontroller' 'rc-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-demo' of ReplicationController 'rc-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-demo' of ReplicationController 'rc-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   replicas: 3
  10 │   template:
  11 │     metadata:
  12 │       labels: 
  13 │         app: rc
  14 │     spec:
  15 │       containers:
  16 │       - name: nginx-demo
  17 └         image: nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-demo" of replicationcontroller "rc-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller rc-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-demo.yaml:5-7
────────────────────────────────────────
   5 ┌   name: rc-demo
   6 │   labels:
   7 └     app: rc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller rc-demo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 rc-demo.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rc-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-demo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller rc-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-demo.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx-demo
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



rc-exam.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-redis' of 'replicaset' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-exam.yaml:10-21
────────────────────────────────────────
  10 ┌   replicas: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       tier: frontend
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         tier: frontend
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-redis" of replicaset "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-exam.yaml:4-7
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 │     app: guestbook
   7 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-exam.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-exam.yaml:19-21
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────



rc-exam1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-redis' of 'replicaset' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-exam1.yaml:10-21
────────────────────────────────────────
  10 ┌   replicas: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       tier: frontend
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         tier: frontend
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-redis" of replicaset "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-exam1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 │     app: guestbook
   7 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-exam1.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-exam1.yaml:19-21
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────



rc-exam2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-redis' of 'replicaset' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-redis' of ReplicaSet 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 rc-exam2.yaml:10-21
────────────────────────────────────────
  10 ┌   replicas: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       tier: frontend
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         tier: frontend
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-redis" of replicaset "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 rc-exam2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 │     app: guestbook
   7 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-exam2.yaml:20-21
────────────────────────────────────────
  20 ┌       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 rc-exam2.yaml:19-21
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: php-redis
  21 └         image: gcr.io/google_samples/gb-frontend:v3
────────────────────────────────────────


