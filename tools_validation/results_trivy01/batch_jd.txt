
Report Summary

┌───────────────────────────────────┬────────────┬───────────────────┐
│              Target               │    Type    │ Misconfigurations │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret.base64-data.yaml           │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret.db-migrator-password.yaml  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret.db-password.yaml           │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret.dockerconfigjson.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret.string-data.yaml           │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret1054.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret1055.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret1101.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ Secret1151.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-mount.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-mysql1.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-oci-helm.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-opaque.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-opaque1.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-open-api-key.yaml          │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-operator.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-orderqueue.yaml            │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-orders.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-passwd.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-patch.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-patch1.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-patched.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-patched1.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-patched2.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-patched3.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-patched4.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pgadmin.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pgadmin1.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pgadmin2.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pgadmin3.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pgadmin4.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pixaby.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-plain.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-plain1.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-plain2.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-plain3.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-plain4.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-plain5.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod-definition.yaml        │ kubernetes │        33         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod-volume.yaml            │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod-volume1.yaml           │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod.yaml                   │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod1.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod11.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod12.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod1_1.yaml                │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod2.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod3.yaml                  │ kubernetes │        17         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod4.yaml                  │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pod_1.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pods.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pods1.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pods1_1.yaml               │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pods1_2.yaml               │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pods_1.yaml                │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-pods_2.yaml                │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-postgres-credentials.yaml  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-postgres-credentials1.yaml │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-postgres.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-postgresql.yaml            │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-postgresql1.yaml           │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-postgresql2.yaml           │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-products.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-qa.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-rabbitmq.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-rabbitmq1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-rabbitmq2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-rabbitmq3.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-read-role-binging.yaml     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-read-role.yaml             │ kubernetes │         1         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-reader1.yaml               │ kubernetes │         1         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-reader1_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-redis-password.yaml        │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-sa.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-sa1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-sa2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-sample.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-service-account.yaml       │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-simple.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-simple1.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-ssl.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-ssl1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-stringdata.yaml            │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-superuser.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls-configmap.yaml         │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls.yaml                   │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls10.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls10_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls11.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls12.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls13.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls14.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls15.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls16.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls17.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls18.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls4.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls5.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls6.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls7.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls8.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-tls9.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-token.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-token1.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-token2.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-usage-pod.yaml             │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-user.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-v1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-v11.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-v2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-v21.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-v22.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-v23.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-var.yaml                   │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-var1.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-vault.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-vol.yaml                   │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-vol1.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-volume-from-all.yaml       │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-volume-from-selective.yaml │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-volume-pod.yaml            │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-web-api.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret-webserver-key.yaml         │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.auth-sa-token.yaml         │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc10.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc12.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc15.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc16.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc17.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc18.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc20.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc21.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc22.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc23.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc25.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc26.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc27.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc28.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc2_1.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc30.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc31.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc33.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc34.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc4.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc5.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc6.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc7.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc8.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.enc9.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sample.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops100.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops101.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops102.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops103.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops104.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops105.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops106.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops106_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops106_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops107.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops107_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops107_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops107_3.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops108.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops109.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops109_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops11.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops110.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops112.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops112_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops112_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops112_3.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops112_4.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops113.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops114.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops115.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops116.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops117.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops118.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops118_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops119.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops12.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops120.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops120_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops120_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops121.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops122.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops122_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops122_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops123.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops123_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops124.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops124_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops124_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops125.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops125_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops125_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops126.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops126_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops126_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops127.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops127_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops128.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops129.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops129_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops129_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops129_3.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops13.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops130.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops131.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops131_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops131_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops132.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops132_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops132_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops133.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops133_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops134.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops135.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops136.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops137.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops138.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops139.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops14.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops140.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops141.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops142.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops143.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops144.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops145.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops146.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops146_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops147.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops148.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops148_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops148_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops149.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops15.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops150.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops151.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops152.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops153.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops154.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops156.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops157.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops158.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops159.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops16.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops160.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops161.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops162.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops163.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops164.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops165.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops165_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops166.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops167.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops168.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops169.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops17.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops170.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops171.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops172.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops173.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops174.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops175.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops176.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops177.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops178.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops179.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops18.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops180.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops181.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops182.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops183.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops184.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops185.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops186.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops187.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops188.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops189.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops19.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops190.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops191.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops192.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops193.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops194.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops195.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops196.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops197.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops198.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops199.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops20.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops200.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops201.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops202.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops203.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops204.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops205.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops206.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops207.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops208.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops209.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops21.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops210.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops211.yaml               │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops22.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops23.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops24.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops25.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops26.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops27.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops28.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops32.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops32_1.yaml              │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops33.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops34.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops35.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops36.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops37.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops38.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops39.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops4.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops40.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops41.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops42.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops43.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops44.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops45.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops46.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops47.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops48.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops49.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops5.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops50.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops51.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops52.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops53.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops54.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops55.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops56.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops57.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops58.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops59.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops6.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops60.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops61.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops62.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops63.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops64.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops65.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops66.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops67.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops68.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops69.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops7.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops70.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops71.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops72.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops73.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops74.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops75.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops76.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops77.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops78.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops79.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops8.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops80.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops81.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops82.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops83.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops84.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops85.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops86.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops87.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops88.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops89.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops9.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops90.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops91.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops92.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops93.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops94.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops95.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops96.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops97.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops98.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.sops99.yaml                │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com.yaml       │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com1.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com10.yaml     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com11.yaml     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com2.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com3.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com4.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com5.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com6.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com7.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com8.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.tls-example-com9.yaml      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.yaml                       │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret.yaml.verified.yaml         │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1-pod.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret10.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret100.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1007.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1008.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1009.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret101.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1010.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1011.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1013.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1014.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1015.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1016.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1017.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1018.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1019.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret102.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1020.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1022.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1029.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret103.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1030.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1031.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1032.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1033.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1034.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1035.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1041.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1042.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1043.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1044.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1045.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1046.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1047.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1048.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1049.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1050.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1051.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1052.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1056.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1057.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1058.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1060.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1061.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1062.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1063.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1064.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1065.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1066.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1069.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1070.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1075.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1075_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1075_2.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1075_3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1079.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret108.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1080.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1081.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret109.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1092.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1092_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1092_2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1096.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1096_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1096_2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1098.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret11.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret110.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1100.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1102.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1103.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1103_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1104.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1106.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1107.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret111.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1110.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1111.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1114.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1117.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1117_1.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1119.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret112.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1120.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1121.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1122.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1123.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1124.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1125.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1126.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1127.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1128.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret113.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1130.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1132.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1133.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1134.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1135.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1136.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1137.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1139.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1140.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1141.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1143.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1144.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1145.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1146.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1149.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1152.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1153.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1154.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1155.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1156.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1157.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1158.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1159.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1160.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1160_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1161.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1162.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1163.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1164.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1165.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1167.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1168.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1169.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret117.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1170.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1171.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1172.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1173.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1174.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1175.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret118.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1180.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1181.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1181_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1182.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1182_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1182_2.yaml                 │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1182_3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1183.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1184.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1185.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1186.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1187.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1188.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1189.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1190.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1191.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret12.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1201.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1202.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1205.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1206.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1207.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1208.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1209.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret121.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1211.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1212.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1212_1.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1213.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1214.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1215.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1216.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1216_1.yaml                 │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1217.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1218.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1219.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret122.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1220.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1221.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1222.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1223.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1224.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1225.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1226.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1227.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1227_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1229.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret122_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret122_2.yaml                  │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret122_3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret123.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1230.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1231.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1232.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1233.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1234.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1235.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1236.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1237.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1238.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1239.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret124.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1240.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1241.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1242.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret125.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1250.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1251.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret1252.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret126.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret127.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret128.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret129.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret13.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret130.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret131.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret132.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret133.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret134.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret135.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret136.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret137.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret139.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret140.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret142.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret143.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret144.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret145.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret146.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret147.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret148.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret151.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret152.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret153.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret157.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret158.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret159.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret160.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret161.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret161_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret161_2.yaml                  │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret161_3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret162.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret163.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret164.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret165.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret166.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret167.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret168.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret17.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret170.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret171.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret172.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret173.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret173_1.yaml                  │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret173_2.yaml                  │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret174.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret175.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret177.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret178.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret18.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret182.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret187.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret188.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret189.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret191.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret194.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret194_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret195.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret196.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret197.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret198.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret199.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret2-pod.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret200.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret202.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret205.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret205_1.yaml                  │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret205_2.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret205_3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret209.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret21.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret210.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret2100.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret211.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret212.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret213.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret214.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret215.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret215_1.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret215_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret215_3.yaml                  │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret216.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret217.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret218.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret219.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret22.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret228.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret229.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret22_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret22_2.yaml                   │ kubernetes │        19         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret22_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret23.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret231.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret235.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret236.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret237.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret238.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret24.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret240.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret241.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret242.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret243.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret244.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret248.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret249.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret25.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret250.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret251.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret253.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret254.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret256.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret257.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret26.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret268.yaml                    │ kubernetes │        18         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret269.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret27.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret272.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret274.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret275.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret276.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret277.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret28.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret280.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret281.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret282.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret283.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret284.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret284_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret285.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret286.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret287.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret288.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret289.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret29.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret290.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret291.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret292.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret293.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret30.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret304.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret305.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret306.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret307.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret308.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret31.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret310.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret314.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret315.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret316.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret317.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret319.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret32.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret320.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret321.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret322.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret323.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret324.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret33.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret337.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret338.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret339.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret34.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret340.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret341.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret342.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret346.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret349.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret35.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret350.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret351.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret352.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret353.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret355.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret356.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret359.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret36.yaml                     │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret364.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret366.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret367.yaml                    │ kubernetes │         0         │
├───────────────────────────────────┼────────────┼───────────────────┤
│ secret369.yaml                    │ kubernetes │         0         │
└───────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


secret-mount.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretmount' of Pod 'secretmount' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretmount' of Pod 'secretmount' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretmount' of 'pod' 'secretmount' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretmount' of Pod 'secretmount' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretmount' of Pod 'secretmount' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretmount' of Pod 'secretmount' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretmount' of Pod 'secretmount' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretmount' of Pod 'secretmount' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretmount' of Pod 'secretmount' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretmount' of Pod 'secretmount' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretmount' of Pod 'secretmount' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretmount' of Pod 'secretmount' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretmount" of pod "secretmount" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secretmount in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-mount.yaml:4
────────────────────────────────────────
   4 [   name: secretmount
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretmount in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-mount.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 └         readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secretmount in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-mount.yaml:6-16
────────────────────────────────────────
   6 ┌   containers: 
   7 │     - name: secretmount 
   8 │       image: nginx 
   9 │       volumeMounts:
  10 │       - name: foo
  11 │         mountPath: "/etc/foo"
  12 │         readOnly: true
  13 │   volumes: 
  14 └   - name: foo
  ..   
────────────────────────────────────────



secret-pod-definition.yaml (kubernetes)
=======================================
Tests: 129 (SUCCESSES: 96, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-controller' of 'pod' 'webapp-pod' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-controller' of 'pod' 'webapp-pod' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-controller' of Pod 'webapp-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-controller' of Pod 'webapp-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-controller' of Pod 'webapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-controller' of Pod 'webapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-controller" of pod "webapp-pod" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-controller" of pod "webapp-pod" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-pod in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod-definition.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 └           name: app-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-pod in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod-definition.yaml:16-28
────────────────────────────────────────
  16 ┌   - name: busybox-controller
  17 │     image: busybox
  18 │     env:
  19 │       - name: APP_COLOR
  20 │         valueFrom:
  21 │             secretKeyRef:
  22 │                name: app-config
  23 │                key: APP_COLOR
  24 └     # OR Volume mount secret add to pod
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-pod in dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod-definition.yaml:10-32
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: nginx-controller
  12 │     image: nginx
  13 │     envFrom:
  14 │       - secretRef:
  15 │           name: app-config
  16 │   - name: busybox-controller
  17 │     image: busybox
  18 └     env:
  ..   
────────────────────────────────────────



secret-pod-volume.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secret' of Pod 'secret-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secret' of Pod 'secret-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secret' of 'pod' 'secret-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secret' of Pod 'secret-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secret' of Pod 'secret-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secret' of Pod 'secret-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret' of Pod 'secret-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret' of Pod 'secret-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secret" of pod "secret-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod-volume.yaml:4-6
────────────────────────────────────────
   4 ┌   name: secret-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: secret-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod-volume.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 │           readOnly: true
  16 └   volumes:
  ..   
────────────────────────────────────────



secret-pod-volume1.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secret' of Pod 'secret-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secret' of Pod 'secret-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secret' of 'pod' 'secret-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secret' of Pod 'secret-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secret' of Pod 'secret-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secret' of Pod 'secret-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret' of Pod 'secret-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret' of Pod 'secret-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret' of Pod 'secret-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secret" of pod "secret-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod-volume1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: secret-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: secret-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod-volume1.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod-volume1.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: secret
  10 │       image: busybox
  11 │       command: ["sh", "-c", "sleep 3600"]
  12 │       volumeMounts:
  13 │         - name: auth-secret
  14 │           mountPath: "/var/secrets"
  15 │           readOnly: true
  16 └   volumes:
  ..   
────────────────────────────────────────



secret-pod.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp' of Pod 'webapp-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp' of 'pod' 'webapp-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp' of Pod 'webapp-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp" of pod "webapp-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-3
   6 │   name: webapp-3
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────



secret-pod1.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp' of Pod 'webapp-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp' of 'pod' 'webapp-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp' of Pod 'webapp-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp' of Pod 'webapp-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp" of pod "webapp-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-3
   6 │   name: webapp-3
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod1.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - secretRef:
  16 └         name: app-secret
────────────────────────────────────────



secret-pod11.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'secret-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'secret-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "secret-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod11.yaml:4
────────────────────────────────────────
   4 [   name: secret-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod11.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod11.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────



secret-pod12.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'secret-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'secret-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "secret-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod12.yaml:4
────────────────────────────────────────
   4 [   name: secret-pod 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod12.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod12.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - secretRef:
  12 └         name: my-pwd
────────────────────────────────────────



secret-pod1_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp-pod' of 'pod' 'webapp-4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp-pod" of pod "webapp-4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod1_1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-4
   6 │   name: webapp-4
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-4 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-4 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod1_1.yaml:9-19
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 └         secretKeyRef:
  ..   
────────────────────────────────────────



secret-pod2.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'giropops-container' of Pod 'giropops-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'giropops-container' of Pod 'giropops-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'giropops-container' of 'pod' 'giropops-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'giropops-container' of Pod 'giropops-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'giropops-container' of Pod 'giropops-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'giropops-container' of Pod 'giropops-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'giropops-container' of Pod 'giropops-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'giropops-container' of Pod 'giropops-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'giropops-container' of Pod 'giropops-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'giropops-container' of Pod 'giropops-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'giropops-container' of Pod 'giropops-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'giropops-container' of Pod 'giropops-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "giropops-container" of pod "giropops-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod giropops-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod2.yaml:4
────────────────────────────────────────
   4 [   name: giropops-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container giropops-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod2.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 │           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  15 └     - name: PASSWORD # Nome da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod giropops-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: giropops-container
   8 │     image: nginx
   9 │     env: # Inicio da definição das variáveis de ambiente
  10 │     - name: USERNAME # Nome da variável de ambiente que será usada no Pod
  11 │       valueFrom: # Inicio da definição de onde o valor da variável de ambiente será buscado
  12 │         secretKeyRef: # Inicio da definição de que o valor da variável de ambiente será buscado em um Secret, através de uma chave
  13 │           name: giropops-secret # Nome do Secret que contém o valor da variável de ambiente que será usada no Pod
  14 └           key: username # Nome da chave do campo do Secret que contém o valor da variável de ambiente que será usada no Pod
  ..   
────────────────────────────────────────



secret-pod3.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secret-pod' of Pod 'secret-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secret-pod' of Pod 'secret-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secret-pod' of 'pod' 'secret-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-pod' of Pod 'secret-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secret-pod' of Pod 'secret-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secret-pod' of Pod 'secret-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-pod' of Pod 'secret-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-pod' of Pod 'secret-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-pod' of Pod 'secret-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-pod' of Pod 'secret-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-pod' of Pod 'secret-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secret-pod" of pod "secret-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod3.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: secret-pod
   7 └   name: secret-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod3.yaml:10-26
────────────────────────────────────────
  10 ┌   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 │             key: monkey
  18 └             name: secret-text
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod3.yaml:9-28
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx:alpine
  11 │     name: secret-pod
  12 │     resources: {}
  13 │     env:
  14 │       - name: fruit
  15 │         valueFrom:
  16 │           secretKeyRef:
  17 └             key: monkey
  ..   
────────────────────────────────────────



secret-pod4.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'foo' of Pod 'foo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'foo' of Pod 'foo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'foo' of 'pod' 'foo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'foo' of Pod 'foo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'foo' of Pod 'foo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'foo' of Pod 'foo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'foo' of Pod 'foo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'foo' of Pod 'foo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'foo' of Pod 'foo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'foo' of Pod 'foo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'foo' of Pod 'foo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'foo' of Pod 'foo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "foo" of pod "foo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod foo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod4.yaml:4
────────────────────────────────────────
   4 [   name: foo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container foo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod foo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod4.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: foo
   8 │     image: 192.168.1.100:5000/test:v1
   9 │   imagePullSecretes:
  10 └   - name: myregistry
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container foo in pod foo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret-pod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: foo
   8 └     image: 192.168.1.100:5000/test:v1
────────────────────────────────────────



secret-pod_1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp-pod' of 'pod' 'webapp-4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp-pod' of Pod 'webapp-4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp-pod" of pod "webapp-4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pod_1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-4
   6 │   name: webapp-4
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-4 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 │         secretKeyRef:
  18 │           name: app-secret
  19 └           key: DB_PASSWORD
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-4 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pod_1.yaml:9-19
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: DB_PASSWORD
  16 │       valueFrom:
  17 └         secretKeyRef:
  ..   
────────────────────────────────────────



secret-pods.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretcontainer' of 'pod' 'secretvolumepod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretcontainer' of Pod 'secretvolumepod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretcontainer" of pod "secretvolumepod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secretvolumepod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pods.yaml:4
────────────────────────────────────────
   4 [   name: secretvolumepod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretvolumepod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secretvolumepod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 │       mountPath: /secret
  12 │   volumes:
  13 │   - name: secret-vol
  14 │     secret:
  15 └       secretName: mysecret
────────────────────────────────────────



secret-pods1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretcontainer' of 'pod' 'secretvolumepod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretcontainer' of Pod 'secretvolumepod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretcontainer' of Pod 'secretvolumepod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretcontainer" of pod "secretvolumepod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secretvolumepod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pods1.yaml:4
────────────────────────────────────────
   4 [   name: secretvolumepod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretvolumepod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 └       mountPath: /secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secretvolumepod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secretcontainer
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: secret-vol
  11 │       mountPath: /secret
  12 │   volumes:
  13 │   - name: secret-vol
  14 │     secret:
  15 └       secretName: mysecret
────────────────────────────────────────



secret-pods1_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretcontainer' of 'pod' 'secretenvpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvpod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretcontainer" of pod "secretenvpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secretenvpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pods1_1.yaml:4
────────────────────────────────────────
   4 [   name: secretenvpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretenvpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods1_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secretenvpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods1_1.yaml:6-24
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 └           key: db_username
  ..   
────────────────────────────────────────



secret-pods1_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretcontainer' of 'pod' 'secretenvallpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvallpod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretcontainer" of pod "secretenvallpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secretenvallpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pods1_2.yaml:4
────────────────────────────────────────
   4 [   name: secretenvallpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretenvallpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secretenvallpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods1_2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────



secret-pods_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretcontainer' of 'pod' 'secretenvpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvpod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretcontainer' of Pod 'secretenvpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretcontainer" of pod "secretenvpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secretenvpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pods_1.yaml:4
────────────────────────────────────────
   4 [   name: secretenvpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretenvpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods_1.yaml:7-24
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 │           key: db_username
  15 └     - name: password
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secretenvpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods_1.yaml:6-24
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secretcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: username
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: mysecret
  14 └           key: db_username
  ..   
────────────────────────────────────────



secret-pods_2.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretcontainer' of 'pod' 'secretenvallpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretcontainer' of Pod 'secretenvallpod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretcontainer' of Pod 'secretenvallpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretcontainer" of pod "secretenvallpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secretenvallpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-pods_2.yaml:4
────────────────────────────────────────
   4 [   name: secretenvallpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretenvallpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secretenvallpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-pods_2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secretcontainer
   8 │     image: nginx
   9 │     envFrom:
  10 │     - secretRef:
  11 └         name: mysecret
────────────────────────────────────────



secret-read-role.yaml (kubernetes)
==================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'secret-reader' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 secret-read-role.yaml:7-9
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   resources: ["secrets"]
   9 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



secret-reader1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'secret-reader' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 secret-reader1.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 └   - get
────────────────────────────────────────



secret-tls.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-tls.yaml:8-10
────────────────────────────────────────
   8 ┌   name: nginx
   9 │   labels:
  10 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-tls.yaml:13-23
────────────────────────────────────────
  13 ┌     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 │           mountPath: /etc/nginx/nginx.conf
  21 └           subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-tls.yaml:12-35
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: nginx
  14 │       image: nginx
  15 │       ports:
  16 │         - containerPort: 80
  17 │         - containerPort: 443
  18 │       volumeMounts:
  19 │         - name: nginx-config-volume
  20 └           mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────



secret-usage-pod.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'secret-usage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'secret-usage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'secret-usage' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'secret-usage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'secret-usage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'secret-usage' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'secret-usage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'secret-usage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'secret-usage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'secret-usage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'secret-usage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'secret-usage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "secret-usage" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-usage in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-usage-pod.yaml:6
────────────────────────────────────────
   6 [   name: secret-usage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-usage in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-usage-pod.yaml:9-13
────────────────────────────────────────
   9 ┌     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-usage in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-usage-pod.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: my-container
  10 │       image: nginx  
  11 │       envFrom:
  12 │         - secretRef:
  13 └             name: passwords
────────────────────────────────────────



secret-var.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-var.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-var.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-var.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 └             key: username
  ..   
────────────────────────────────────────



secret-var1.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-var1.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-var1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 │             key: username
  15 └       - name: SECRET_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-var1.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     env:
  10 │       - name: SECRET_USERNAME
  11 │         valueFrom:
  12 │           secretKeyRef:
  13 │             name: mysecret
  14 └             key: username
  ..   
────────────────────────────────────────



secret-vol.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-vol.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-vol.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-vol.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 │       readOnly: true
  13 │   volumes:
  14 └   - name: foo
  ..   
────────────────────────────────────────



secret-vol1.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-vol1.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-vol1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-vol1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: foo
  11 │       mountPath: "/etc/foo"
  12 │       readOnly: true
  13 │   volumes:
  14 └   - name: foo
  ..   
────────────────────────────────────────



secret-volume-from-all.yaml (kubernetes)
========================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'secret-volume-from-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'secret-volume-from-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'secret-volume-from-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'secret-volume-from-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'secret-volume-from-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'secret-volume-from-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'secret-volume-from-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'secret-volume-from-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'secret-volume-from-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'secret-volume-from-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'secret-volume-from-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'secret-volume-from-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "secret-volume-from-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-volume-from-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-volume-from-all.yaml:4
────────────────────────────────────────
   4 [   name: secret-volume-from-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-volume-from-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-volume-from-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-volume-from-all.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 │           mountPath: /etc/secret ## 컨테이너의 디렉터리
  13 │   volumes:
  14 └     - name: secret-volume ## 볼륨 이름
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in pod secret-volume-from-all (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret-volume-from-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts: ## 볼륨을 컨테이너에 마운트(매핑)
  11 │         - name: secret-volume ## 마운트할 볼륨 이름
  12 └           mountPath: /etc/secret ## 컨테이너의 디렉터리
────────────────────────────────────────



secret-volume-from-selective.yaml (kubernetes)
==============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'secret-volume-from-selective' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'secret-volume-from-selective' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'secret-volume-from-selective' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'secret-volume-from-selective' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "secret-volume-from-selective" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-volume-from-selective in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-volume-from-selective.yaml:4
────────────────────────────────────────
   4 [   name: secret-volume-from-selective
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-volume-from-selective in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-volume-from-selective in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-volume-from-selective.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 │           mountPath: /etc/secret
  13 │   volumes:
  14 └     - name: secret-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in pod secret-volume-from-selective (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret-volume-from-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: secret-volume
  12 └           mountPath: /etc/secret
────────────────────────────────────────



secret-volume-pod.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp-container' of Pod 'secret-volume-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp-container' of 'pod' 'secret-volume-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp-container' of Pod 'secret-volume-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp-container' of Pod 'secret-volume-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp-container" of pod "secret-volume-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-volume-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret-volume-pod.yaml:4
────────────────────────────────────────
   4 [   name: secret-volume-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-volume-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-volume-pod.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 │       mountPath: "/etc/secret"
  15 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-volume-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret-volume-pod.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp-container
   8 │     image: busybox
   9 │     command:
  10 │       - sleep
  11 │       - "3600"  # Keeps the pod alive for 3600 seconds (1 hour)
  12 │     volumeMounts:
  13 │     - name: secret-volume
  14 └       mountPath: "/etc/secret"
  ..   
────────────────────────────────────────



secret1-pod.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secret1' of Pod 'secret1-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secret1' of Pod 'secret1-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secret1' of 'pod' 'secret1-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret1' of Pod 'secret1-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secret1' of Pod 'secret1-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secret1' of Pod 'secret1-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secret1' of Pod 'secret1-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret1' of Pod 'secret1-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret1' of Pod 'secret1-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret1' of Pod 'secret1-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret1' of Pod 'secret1-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret1' of Pod 'secret1-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secret1" of pod "secret1-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret1-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret1-pod.yaml:4
────────────────────────────────────────
   4 [   name: secret1-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret1-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1-pod.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 │           name: mysecret
  15 └           key: username
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret1-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1-pod.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secret1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: USERNAME
  12 │       valueFrom:
  13 │         secretKeyRef:
  14 └           name: mysecret
  ..   
────────────────────────────────────────



secret1075_2.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-flask' of 'replicaset' 'simple-flask' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-flask' of ReplicaSet 'simple-flask' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-flask" of replicaset "simple-flask" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset simple-flask in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret1075_2.yaml:4
────────────────────────────────────────
   4 [   name: simple-flask
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container simple-flask in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset simple-flask in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1075_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-flask in replicaset simple-flask (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret1075_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: simple-flask
  18 │         image: localhost:5000/simple-flask
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: simple-flask-config
  24 │         - secretRef:
  25 └             name: simple-flask-secret
────────────────────────────────────────



secret1117_1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'secret-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'secret-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'secret-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'secret-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'secret-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'secret-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'secret-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'secret-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'secret-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'secret-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'secret-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'secret-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "secret-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret1117_1.yaml:4
────────────────────────────────────────
   4 [   name: secret-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1117_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1117_1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /etc/secret
  11 │       name: secret-volume
  12 │       readOnly: true
  13 │   volumes:
  14 └   - name: secret-volume
  ..   
────────────────────────────────────────



secret1182_2.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret1182_2.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1182_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret1182_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────



secret1212_1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'nginx-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "nginx-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret1212_1.yaml:4
────────────────────────────────────────
   4 [   name: nginx-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1212_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1212_1.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: sensitive-secret
  14 └           key: username
  ..   
────────────────────────────────────────



secret1216_1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret1216_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1216_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret1216_1.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 └         secretKeyRef:
  ..   
────────────────────────────────────────



secret122_2.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret122_2.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret122_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret122_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────



secret161_2.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret161_2.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret161_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret161_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────



secret173_1.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-secret-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-secret-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-secret-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret173_1.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-secret-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-secret-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-secret-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret173_1.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 └               key: SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-secret-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret173_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────



secret173_2.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-secret-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-secret-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-secret-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret173_2.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-secret-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-secret-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-secret-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret173_2.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 │           subPath: config.json
  22 │       volumes:
  23 └       - name: secret-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-secret-volume (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret173_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────



secret2-pod.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secret2' of Pod 'secret2-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secret2' of Pod 'secret2-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secret2' of 'pod' 'secret2-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret2' of Pod 'secret2-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secret2' of Pod 'secret2-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secret2' of Pod 'secret2-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secret2' of Pod 'secret2-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret2' of Pod 'secret2-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret2' of Pod 'secret2-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret2' of Pod 'secret2-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret2' of Pod 'secret2-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret2' of Pod 'secret2-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secret2" of pod "secret2-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret2-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret2-pod.yaml:4
────────────────────────────────────────
   4 [   name: secret2-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret2-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret2-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret2-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret2-pod.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: secret2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "ls /etc/secrets"]
  10 │     volumeMounts:
  11 │     - name: secrets
  12 │       mountPath: /etc/secrets
  13 │   volumes:
  14 └   - name: secrets
  ..   
────────────────────────────────────────



secret205_1.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-cm' of Pod 'hello-cm' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-cm' of 'pod' 'hello-cm' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-cm' of Pod 'hello-cm' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-cm" of pod "hello-cm" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-cm in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret205_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-cm
   5 │   labels:
   6 └     app: application
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-cm in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-cm in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret205_1.yaml:8-21
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello-cm in pod hello-cm (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret205_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────



secret205_2.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Pod 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Pod 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'pod' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Pod 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Pod 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Pod 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Pod 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Pod 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of pod "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret205_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: postgres
   5 │   labels:
   6 └     app: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret205_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret205_2.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - secretRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────



secret215_1.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycon' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycon' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycon' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycon' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycon" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret215_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod
   5 │   labels:
   6 └     sang: ghe
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret215_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret215_1.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - secretRef:
  13 │         name: mysecret
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────



secret215_3.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycon' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycon' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycon' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycon' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycon" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret215_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod
   5 │   labels:
   6 └     sang: ghe
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret215_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 │           name: mysecret
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret215_3.yaml:8-24
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         secretRef:
  15 │           key: sangamesh
  16 └           name: mysecret
  ..   
────────────────────────────────────────



secret22_2.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret22_2.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret22_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret22_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────



secret268.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secret' of Pod 'secret' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secret' of Pod 'secret' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secret' of 'pod' 'secret' in 'secretns102' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret' of Pod 'secret' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secret' of Pod 'secret' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secret' of Pod 'secret' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secret' of Pod 'secret' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret' of Pod 'secret' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret' of Pod 'secret' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret' of Pod 'secret' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret' of Pod 'secret' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret' of Pod 'secret' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secret" of pod "secret" in "secretns102" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret in secretns102 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret in secretns102 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret268.yaml:10-23
────────────────────────────────────────
  10 ┌   volumes:
  11 │   - name: shared-secret
  12 │     secret:
  13 │       secretName: consumable
  14 │   containers:
  15 │   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 └     - name: shared-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret in pod secret (namespace: secretns102) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret268.yaml:15-21
────────────────────────────────────────
  15 ┌   - image: bitnami/nginx
  16 │     name: secret
  17 │     volumeMounts:
  18 │     - name: shared-secret
  19 │       readOnly: true
  20 │       mountPath: /var/src
  21 └     resources: {}
────────────────────────────────────────


