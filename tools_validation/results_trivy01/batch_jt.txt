
Report Summary

┌────────────────────┬────────────┬───────────────────┐
│       Target       │    Type    │ Misconfigurations │
├────────────────────┼────────────┼───────────────────┤
│ Service5081.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service5379.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service5407.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service555.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service5596.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service5746.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service5769.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service5882.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ Service5883.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4900.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4901.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4902.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4903.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4904.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4905.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4906.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4907.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4908.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4909.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4910.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4911.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4912.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4914.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4915.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4916.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4922.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4923.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4924.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4925.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4926.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service493.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service494.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4948.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4949.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4949_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4949_2.yaml │ kubernetes │        19         │
├────────────────────┼────────────┼───────────────────┤
│ service495.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4950.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4951.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4952.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4953.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4954.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4955.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4956.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4957.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4958.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service496.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4960.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4961.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4967.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4968.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4969.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service497.yaml    │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service4970.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4971.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4972.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4973.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4974.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4975.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4976.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4977.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4978.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4979.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4983.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4984.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4985.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4986.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4987.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4988.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4989.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4990.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4991.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4992.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4993.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4993_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4994.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4995.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4996.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4997.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4998.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service4999.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5.yaml      │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service50.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5000.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5001.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5003.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5004.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5005.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5006.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5007.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5008.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5009.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5010.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5011.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5012.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5013.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5014.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5015.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5016.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5017.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5018.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5019.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5020.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5021.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5022.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5023.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5025.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5026.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5027.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5028.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5029.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service503.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5030.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5031.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5032.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5034.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5035.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5036.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5037.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5038.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service504.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service505.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service506.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service507.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5071.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5072.yaml   │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5072_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5075.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5076.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5077.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5078.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5079.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5080.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5082.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5083.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5084.yaml   │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service5085.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5087.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5088.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5089.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service509.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5090.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5091.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5092.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5094.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5095.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5096.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5097.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5098.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5099.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service51.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service510.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5102.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5107.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5108.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5109.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5109_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service511.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5110.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5111.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5112.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5113.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5113_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5113_2.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5114.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5115.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5116.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service512.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5121.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5122.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5123.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5124.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5125.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5126.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service513.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5132.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5133.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5134.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5135.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5136.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5137.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5138.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5139.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service514.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5140.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5141.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5142.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5143.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5146.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5147.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5149.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service515.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5150.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5152.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5153.yaml   │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service5154.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5155.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5157.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5158.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5159.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service516.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service517.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service518.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service519.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service52.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service520.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5203.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5205.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5206.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5207.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5208.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5209.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service521.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5210.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5211.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5212.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5213.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5214.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5215.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5216.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5217.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5218.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5219.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service522.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5220.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5221.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5222.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5223.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5224.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5225.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5226.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5227.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5228.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5229.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service523.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5230.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5231.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5234.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5237.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5239.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service524.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5241.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5246.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5247.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service525.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5252.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5253.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5254.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5255.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5256.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5257.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5258.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5259.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service526.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5260.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5261.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5262.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5263.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5264.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5265.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5266.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5267.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5268.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5269.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service527.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5274.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5276.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5277.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5278.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service528.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5280.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5281.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5282.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5283.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5284.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5285.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5286.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5287.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service529.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service530.yaml    │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service531.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service532.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service533.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5333.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5334.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5337.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service534.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5340.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5341.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5342.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5344.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5345.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5346.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service535.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5352.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5355.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5356.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5357.yaml   │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service5358.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5359.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service536.yaml    │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5360.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5361.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5362.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5363.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5364.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5365.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5366.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5367.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5368.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service536_1.yaml  │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5373.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5374.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5376.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5377.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5378.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service538.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5380.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5381.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5383.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5384.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5385.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5386.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5388.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5389.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service539.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5391.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5392.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5394.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5396.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5397.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5398.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service54.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5404.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5406.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5408.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5409.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5412.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5414.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5415.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5417.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5418.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5419.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5420.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5421.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5423.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5424.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5426.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5428.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5429.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service543.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5430.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5431.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5432.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5434.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5435.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5436.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5437.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5438.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5439.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service544.yaml    │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service5442.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5443.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5444.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5448.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service545.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5450.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5451.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5452.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5453.yaml   │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service5454.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5454_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5455.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5455_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5456.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5456_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5457.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5458.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5458_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5459.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5459_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service545_1.yaml  │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service545_3.yaml  │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5460.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5463.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5463_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5464.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5469.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service547.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5471.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5475.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5476.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5477.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5478.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5479.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service547_1.yaml  │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service548.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5480.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5481.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5482.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5483.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5484.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5485.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5486.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5487.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5488.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5489.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service549.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5490.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5494.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5496.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5498.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5499.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5499_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service55.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service550.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5500.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5500_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5501.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5502.yaml   │ kubernetes │        17         │
├────────────────────┼────────────┼───────────────────┤
│ service5502_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5502_2.yaml │ kubernetes │        17         │
├────────────────────┼────────────┼───────────────────┤
│ service5503.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5504.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5505.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5506.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5507.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5508.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5509.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service551.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5510.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5513.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5514.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5515.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5519.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service551_1.yaml  │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service552.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5521.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5528.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5528_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5529.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service553.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5531.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5532.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service554.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5545.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5546.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5553.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5554.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5554_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5555.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5555_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5556.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5556_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5557.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5557_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5558.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5558_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5559.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5559_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service556.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5560.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5560_1.yaml │ kubernetes │        17         │
├────────────────────┼────────────┼───────────────────┤
│ service5561.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5561_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5562.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5562_1.yaml │ kubernetes │        19         │
├────────────────────┼────────────┼───────────────────┤
│ service5563.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5563_1.yaml │ kubernetes │        19         │
├────────────────────┼────────────┼───────────────────┤
│ service5564.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5564_1.yaml │ kubernetes │        34         │
├────────────────────┼────────────┼───────────────────┤
│ service5565.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5565_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5566.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5566_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5567.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5567_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5568.yaml   │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5569.yaml   │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service557.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5570.yaml   │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5571.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5571_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5572.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5572_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5573.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5573_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5574.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5574_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5575.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5575_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5576.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5576_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5577.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5577_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5578.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5578_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5579.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5579_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service558.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5580.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5580_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5581.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5581_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5582.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5582_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5583.yaml   │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5584.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5584_1.yaml │ kubernetes │        18         │
├────────────────────┼────────────┼───────────────────┤
│ service5586.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5587.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5589.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5590.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5591.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5592.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5594.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service56.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5609.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5610.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5612.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5641.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5641_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5642.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5643.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5645.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5646.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5648.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service565.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5650.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5651.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5652.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5653.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5654.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5657.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5658.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5659.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5660.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5661.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5662.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5663.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5664.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5665.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5666.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5667.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5671.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5672.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5673.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5674.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5675.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5676.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5677.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5678.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5679.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5680.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5681.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5682.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5683.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5684.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5685.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5686.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5687.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5688.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5689.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5690.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5691.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5691_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5692.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5693.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5694.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5695.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5696.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5696_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5697.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5698.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5699.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service57.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service570.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5700.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5702.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5703.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5707.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5708.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5709.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service571.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5710.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5711.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5713.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5714.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5716.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5716_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5718.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5719.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service571_1.yaml  │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service572.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5720.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5721.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5722.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5723.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5725.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5726.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5727.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5728.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5729.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service572_1.yaml  │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5730.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5733.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5734.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5736.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5737.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5739.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service574.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5740.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5743.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5744.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5745.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5747.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5748.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5749.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service575.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5750.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5751.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5752.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5753.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5754.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5754_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5755.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5756.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5757.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5758.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5759.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service576.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5761.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5762.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5763.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5764.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5765.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5766.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5767.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service577.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5770.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5771.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5772.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5773.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5775.yaml   │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service5776.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5777.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5778.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5779.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service578.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5780.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5781.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5782.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5783.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5785.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5786.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5789.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service579.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5791.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5794.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5795.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5796.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5797.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5798.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service58.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5800.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5802.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5804.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service581.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5813.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5814.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5815.yaml   │ kubernetes │        19         │
├────────────────────┼────────────┼───────────────────┤
│ service5815_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5817.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5821.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5822.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service583.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5830.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5832.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5834.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5835.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5836.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5836_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5836_2.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5836_3.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5838.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5839.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service584.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5842.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5843.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5844.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5845.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5846.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5848.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service585.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5859.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service586.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5860.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5861.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5865.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service587.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5872.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5873.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5874.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5875.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5876.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5877.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5878.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service588.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5880.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5881.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5884.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5885.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5886.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5887.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5888.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service589.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5890.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5897.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5898.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5899.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service59.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service590.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5900.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5901.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5902.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5903.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5904.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5905.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5905_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5906.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5907.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5908.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5909.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service591.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5910.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5911.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5912.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5913.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5914.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5915.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5916.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5917.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5918.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5919.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service592.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5920.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5921.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5922.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5923.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service593.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5936.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service594.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5941.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5942.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service595.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service596.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5969.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service597.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5970.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5971.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5972.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5973.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5974.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5975.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5976.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5977.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5978.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service598.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5989.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service599.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5990.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5991.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5992.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5993.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5993_1.yaml │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5994.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5995.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5996.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5997.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service5999.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6.yaml      │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service60.yaml     │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service600.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6000.yaml   │ kubernetes │         1         │
├────────────────────┼────────────┼───────────────────┤
│ service6001.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6002.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6003.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6004.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6006.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6007.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6008.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service601.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6014.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6015.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6016.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6017.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6018.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6019.yaml   │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service602.yaml    │ kubernetes │         0         │
├────────────────────┼────────────┼───────────────────┤
│ service6020.yaml   │ kubernetes │         0         │
└────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


service4949_2.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'authentication' of Deployment 'authentication' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'authentication' of Deployment 'authentication' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'authentication' of 'deployment' 'authentication' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'authentication' of Deployment 'authentication' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'authentication' of Deployment 'authentication' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'authentication' of Deployment 'authentication' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'authentication' of Deployment 'authentication' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'authentication' of Deployment 'authentication' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'authentication' of Deployment 'authentication' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'authentication' of Deployment 'authentication' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'authentication' of Deployment 'authentication' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'authentication' of Deployment 'authentication' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "authentication" of deployment "authentication" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment authentication in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service4949_2.yaml:4-8
────────────────────────────────────────
   4 ┌   name: authentication
   5 │   labels:
   6 │     app: authentication
   7 │     version: v1
   8 └     service: authentication
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container authentication in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment authentication in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service4949_2.yaml:23-65
────────────────────────────────────────
  23 ┌       serviceAccountName: authentication
  24 │       containers:
  25 │       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 └           periodSeconds: 15
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container authentication in deployment authentication (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service4949_2.yaml:25-65
────────────────────────────────────────
  25 ┌       - name: authentication
  26 │         livenessProbe:
  27 │           httpGet:
  28 │             port: http
  29 │             path: /health
  30 │           initialDelaySeconds: 10
  31 │           periodSeconds: 15
  32 │         image: localhost:5050/authentication:latest
  33 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────



service497.yaml (kubernetes)
============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-state-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service497.yaml:10-19
────────────────────────────────────────
  10 ┌   clusterIP: None
  11 │   ports:
  12 │   - name: http-metrics
  13 │     port: 8080
  14 │     targetPort: http-metrics
  15 │   - name: telemetry
  16 │     port: 8081
  17 │     targetPort: telemetry
  18 │   selector:
  19 └     app.kubernetes.io/name: kube-state-metrics
────────────────────────────────────────



service5072.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5072.yaml:4-8
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kubernetes.io/change-cause: change port 80
   6 │   name: deployment-test
   7 │   labels:
   8 └     app: front
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment deployment-test in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5072.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5072.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: nginx
  21 │         image: nginx:alpine
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────



service5084.yaml (kubernetes)
=============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-state-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service5084.yaml:11-20
────────────────────────────────────────
  11 ┌   clusterIP: None
  12 │   ports:
  13 │   - name: http-metrics
  14 │     port: 8080
  15 │     targetPort: http-metrics
  16 │   - name: telemetry
  17 │     port: 8081
  18 │     targetPort: telemetry
  19 │   selector:
  20 └     app.kubernetes.io/name: kube-state-metrics
────────────────────────────────────────



service5153.yaml (kubernetes)
=============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'aws-docker' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service530.yaml (kubernetes)
============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-state-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service530.yaml:11-20
────────────────────────────────────────
  11 ┌   clusterIP: None
  12 │   ports:
  13 │   - name: http-metrics
  14 │     port: 8080
  15 │     targetPort: http-metrics
  16 │   - name: telemetry
  17 │     port: 8081
  18 │     targetPort: telemetry
  19 │   selector:
  20 └     app.kubernetes.io/name: kube-state-metrics
────────────────────────────────────────



service5357.yaml (kubernetes)
=============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'k8s-webhook' in 'k8s-webhook' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────
 service5357.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



service536.yaml (kubernetes)
============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service536.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service536.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service536.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx:1.14.2
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service544.yaml (kubernetes)
============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-state-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service544.yaml:12-21
────────────────────────────────────────
  12 ┌   clusterIP: None
  13 │   ports:
  14 │     - name: http-metrics
  15 │       port: 8080
  16 │       targetPort: http-metrics
  17 │     - name: telemetry
  18 │       port: 8081
  19 │       targetPort: telemetry
  20 │   selector:
  21 └     app.kubernetes.io/name: kube-state-metrics
────────────────────────────────────────



service5453.yaml (kubernetes)
=============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'k8s-update-deployment-ecr-tag' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service5453.yaml:7-13
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   selector:
   9 │     app: k8s-update-deployment-ecr-tag
  10 │   ports:
  11 │     - protocol: TCP
  12 │       port: 443
  13 └       targetPort: 8000
────────────────────────────────────────



service5502.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 80, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mynginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mynginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mynginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mynginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mynginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mynginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mynginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mynginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mynginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mynginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mynginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5502.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5502.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5502.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mynginx
  18 │         image: nginx:latest
  19 │         resources:
  20 │           limits:
  21 │             memory: 64Mi
  22 │             cpu: 250m
  23 │         ports:
  24 └         - containerPort: 80
────────────────────────────────────────



service5502_2.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 80, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5502_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5502_2.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5502_2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: curl
  10 │     image: ashryramadhan10/nginx-curl:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 64Mi
  14 └         cpu: 100m
────────────────────────────────────────



service5554_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'actorapp' of Deployment 'stateapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'actorapp' of 'deployment' 'stateapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "actorapp" of deployment "stateapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stateapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5554_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: stateapp
   5 │   labels:
   6 └     testapp: actorapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stateapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stateapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5554_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container actorapp in deployment stateapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5554_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5555_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'actorclientapp' of Deployment 'actorclient' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'actorclientapp' of Deployment 'actorclient' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'actorclientapp' of 'deployment' 'actorclient' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'actorclientapp' of Deployment 'actorclient' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'actorclientapp' of Deployment 'actorclient' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'actorclientapp' of Deployment 'actorclient' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'actorclientapp' of Deployment 'actorclient' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'actorclientapp' of Deployment 'actorclient' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'actorclientapp' of Deployment 'actorclient' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'actorclientapp' of Deployment 'actorclient' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'actorclientapp' of Deployment 'actorclient' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "actorclientapp" of deployment "actorclient" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment actorclient in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5555_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: actorclient
   5 │   labels:
   6 └     testapp: actorclientapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container actorclient in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment actorclient in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5555_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container actorclientapp in deployment actorclient (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5555_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorclientapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorclientapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5556_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'actorapp' of Deployment 'stateapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'actorapp' of 'deployment' 'stateapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'actorapp' of Deployment 'stateapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "actorapp" of deployment "stateapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stateapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5556_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: stateapp
   5 │   labels:
   6 └     testapp: actorapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stateapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stateapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5556_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container actorapp in deployment stateapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5556_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5557_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'actorinvocationapp' of Deployment 'stateapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'actorinvocationapp' of 'deployment' 'stateapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'actorinvocationapp' of Deployment 'stateapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "actorinvocationapp" of deployment "stateapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stateapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5557_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: stateapp
   5 │   labels:
   6 └     testapp: actorinvocationapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stateapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stateapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5557_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container actorinvocationapp in deployment stateapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5557_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorinvocationapp
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorinvocationapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5558_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'actorreentrancy' of Deployment 'reentrantactor' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'actorreentrancy' of 'deployment' 'reentrantactor' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'actorreentrancy' of Deployment 'reentrantactor' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "actorreentrancy" of deployment "reentrantactor" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment reentrantactor in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5558_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: reentrantactor
   5 │   labels:
   6 └     testapp: reentrantactor
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container reentrantactor in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment reentrantactor in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5558_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container actorreentrancy in deployment reentrantactor (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5558_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorreentrancy
  23 │         image: halspang/e2e-actorreentrancy:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5559_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'actorstate' of Deployment 'stateapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'actorstate' of Deployment 'stateapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'actorstate' of 'deployment' 'stateapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'actorstate' of Deployment 'stateapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'actorstate' of Deployment 'stateapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'actorstate' of Deployment 'stateapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'actorstate' of Deployment 'stateapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'actorstate' of Deployment 'stateapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'actorstate' of Deployment 'stateapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'actorstate' of Deployment 'stateapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'actorstate' of Deployment 'stateapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "actorstate" of deployment "stateapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stateapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5559_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: stateapp
   5 │   labels:
   6 └     testapp: actorstate
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stateapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stateapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5559_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container actorstate in deployment stateapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5559_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: actorstate
  23 │         image: docker.io/YOUR_ALIAS/e2e-actorstate:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5560_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 80, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bindinginput' of Deployment 'bindinginput' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bindinginput' of Deployment 'bindinginput' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bindinginput' of 'deployment' 'bindinginput' in 'dapr-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bindinginput' of Deployment 'bindinginput' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bindinginput' of Deployment 'bindinginput' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bindinginput' of Deployment 'bindinginput' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bindinginput' of Deployment 'bindinginput' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bindinginput' of Deployment 'bindinginput' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bindinginput' of Deployment 'bindinginput' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bindinginput' of Deployment 'bindinginput' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bindinginput' of Deployment 'bindinginput' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bindinginput" of deployment "bindinginput" in "dapr-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bindinginput in dapr-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment bindinginput in dapr-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5560_1.yaml:22-27
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bindinginput in deployment bindinginput (namespace: dapr-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5560_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: bindinginput
  24 │         image: YOUR_REGISTRY/e2e-binding_input:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────



service5561_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bindingoutput' of Deployment 'bindingoutput' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bindingoutput' of 'deployment' 'bindingoutput' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bindingoutput' of Deployment 'bindingoutput' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bindingoutput" of deployment "bindingoutput" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment bindingoutput in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5561_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: bindingoutput
   5 │   labels:
   6 └     testapp: bindingoutput
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bindingoutput in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment bindingoutput in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5561_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bindingoutput in deployment bindingoutput (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5561_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: bindingoutput
  23 │         image: YOUR_REGISTRY/e2e-binding_output:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5562_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configurationapp' of Deployment 'configurationapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configurationapp' of Deployment 'configurationapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configurationapp' of 'deployment' 'configurationapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'configurationapp' of Deployment 'configurationapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configurationapp' of Deployment 'configurationapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'configurationapp' of Deployment 'configurationapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configurationapp' of Deployment 'configurationapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configurationapp' of Deployment 'configurationapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configurationapp' of Deployment 'configurationapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'configurationapp' of Deployment 'configurationapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configurationapp' of Deployment 'configurationapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configurationapp' of Deployment 'configurationapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configurationapp" of deployment "configurationapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment configurationapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5562_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: configurationapp
   5 │   labels:
   6 └     testapp: configurationapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configurationapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment configurationapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5562_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container configurationapp in deployment configurationapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5562_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: configurationapp
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5563_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hellodapr' of Deployment 'hellodapr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hellodapr' of Deployment 'hellodapr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hellodapr' of 'deployment' 'hellodapr' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hellodapr' of Deployment 'hellodapr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hellodapr' of Deployment 'hellodapr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hellodapr' of Deployment 'hellodapr' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hellodapr' of Deployment 'hellodapr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hellodapr' of Deployment 'hellodapr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hellodapr' of Deployment 'hellodapr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hellodapr' of Deployment 'hellodapr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hellodapr' of Deployment 'hellodapr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hellodapr' of Deployment 'hellodapr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hellodapr" of deployment "hellodapr" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hellodapr in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5563_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hellodapr
   5 │   labels:
   6 └     testapp: hellodapr
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hellodapr in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hellodapr in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5563_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hellodapr in deployment hellodapr (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5563_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: hellodapr
  23 │         image: dapriotest/e2e-hellodapr
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5564_1.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 78, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 19, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'injectorapp' of Deployment 'injectorapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'injectorapp' of Deployment 'injectorapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'injectorapp-init' of Deployment 'injectorapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'injectorapp' of 'deployment' 'injectorapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'injectorapp-init' of 'deployment' 'injectorapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'injectorapp' of Deployment 'injectorapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'injectorapp' of Deployment 'injectorapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'injectorapp-init' of Deployment 'injectorapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'injectorapp' of Deployment 'injectorapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'injectorapp' of Deployment 'injectorapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'injectorapp' of Deployment 'injectorapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'injectorapp' of Deployment 'injectorapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'injectorapp' of Deployment 'injectorapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'injectorapp-init' of Deployment 'injectorapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "injectorapp" of deployment "injectorapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "injectorapp-init" of deployment "injectorapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment injectorapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5564_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: injectorapp
   5 │   labels:
   6 └     testapp: injectorapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container injectorapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container injectorapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment injectorapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5564_1.yaml:22-42
────────────────────────────────────────
  22 ┌       initContainers:
  23 │       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 │           name: storage-volume
  28 │       containers:
  29 │       - name: injectorapp
  30 └         image: dapriotest/e2e-injectorapp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container injectorapp in deployment injectorapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5564_1.yaml:29-37
────────────────────────────────────────
  29 ┌       - name: injectorapp
  30 │         image: dapriotest/e2e-injectorapp
  31 │         ports:
  32 │         - containerPort: 3000
  33 │         imagePullPolicy: Always
  34 │         resources:
  35 │           limits:
  36 │             cpu: '0.5'
  37 └             memory: 128Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container injectorapp-init in deployment injectorapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5564_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: injectorapp-init
  24 │         image: dapriotest/e2e-injectorapp-init
  25 │         volumeMounts:
  26 │         - mountPath: /tmp/storage
  27 └           name: storage-volume
────────────────────────────────────────



service5565_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'job-publisher' of Job 'job-publisher' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'job-publisher' of Job 'job-publisher' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'job-publisher' of 'job' 'job-publisher' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'job-publisher' of Job 'job-publisher' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'job-publisher' of Job 'job-publisher' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'job-publisher' of Job 'job-publisher' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'job-publisher' of Job 'job-publisher' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'job-publisher' of Job 'job-publisher' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'job-publisher' of Job 'job-publisher' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'job-publisher' of Job 'job-publisher' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'job-publisher' of Job 'job-publisher' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "job-publisher" of job "job-publisher" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): job job-publisher in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5565_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: job-publisher
   5 │   labels:
   6 └     testapp: job-publisher
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container job-publisher in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job job-publisher in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5565_1.yaml:20-25
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container job-publisher in job job-publisher (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5565_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: job-publisher
  22 │         image: docker.io/YOUR ID/e2e-job-publisher:dev
  23 │         ports:
  24 │         - containerPort: 3000
  25 └         imagePullPolicy: Always
────────────────────────────────────────



service5566_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metadataapp' of Deployment 'metadataapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metadataapp' of Deployment 'metadataapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metadataapp' of 'deployment' 'metadataapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metadataapp' of Deployment 'metadataapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metadataapp' of Deployment 'metadataapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metadataapp' of Deployment 'metadataapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metadataapp' of Deployment 'metadataapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metadataapp' of Deployment 'metadataapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metadataapp' of Deployment 'metadataapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metadataapp' of Deployment 'metadataapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metadataapp' of Deployment 'metadataapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metadataapp" of deployment "metadataapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment metadataapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5566_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: metadataapp
   5 │   labels:
   6 └     testapp: metadataapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container metadataapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metadataapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5566_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metadataapp in deployment metadataapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5566_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: metadataapp
  23 │         image: YOUR_REGISTRY/e2e-metadata:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5567_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'middleware' of Deployment 'middleware' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'middleware' of Deployment 'middleware' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'middleware' of 'deployment' 'middleware' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'middleware' of Deployment 'middleware' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'middleware' of Deployment 'middleware' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'middleware' of Deployment 'middleware' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'middleware' of Deployment 'middleware' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'middleware' of Deployment 'middleware' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'middleware' of Deployment 'middleware' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'middleware' of Deployment 'middleware' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'middleware' of Deployment 'middleware' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "middleware" of deployment "middleware" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment middleware in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5567_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: middleware
   5 │   labels:
   6 └     testapp: middleware
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container middleware in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment middleware in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5567_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container middleware in deployment middleware (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5567_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: middleware
  23 │         image: docker.io/[YOUR ALIAS]/e2e-middleware:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5568.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'perf-service-invocation-grpc' of 'deployment' 'perf-service-invocation-grpc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'perf-service-invocation-grpc' of Deployment 'perf-service-invocation-grpc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "perf-service-invocation-grpc" of deployment "perf-service-invocation-grpc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment perf-service-invocation-grpc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5568.yaml:7-9
────────────────────────────────────────
   7 ┌   name: perf-service-invocation-grpc
   8 │   labels:
   9 └     testapp: perf-service-invocation-grpc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container perf-service-invocation-grpc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment perf-service-invocation-grpc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5568.yaml:25-30
────────────────────────────────────────
  25 ┌       containers:
  26 │       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container perf-service-invocation-grpc in deployment perf-service-invocation-grpc (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5568.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: perf-service-invocation-grpc
  27 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_grpc:dev
  28 │         ports:
  29 │         - containerPort: 3000
  30 └         imagePullPolicy: Always
────────────────────────────────────────



service5569.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'perf-service-invocation' of 'deployment' 'perf-service-invocation' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'perf-service-invocation' of Deployment 'perf-service-invocation' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "perf-service-invocation" of deployment "perf-service-invocation" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment perf-service-invocation in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5569.yaml:7-9
────────────────────────────────────────
   7 ┌   name: perf-service-invocation
   8 │   labels:
   9 └     testapp: perf-service-invocation
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container perf-service-invocation in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment perf-service-invocation in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5569.yaml:24-29
────────────────────────────────────────
  24 ┌       containers:
  25 │       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container perf-service-invocation in deployment perf-service-invocation (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5569.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-service-invocation
  26 │         image: docker.io/[YOUR ALIAS]/perf-service_invocation_http:dev
  27 │         ports:
  28 │         - containerPort: 3000
  29 └         imagePullPolicy: Always
────────────────────────────────────────



service5570.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'perf-tester' of Deployment 'perf-tester' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'perf-tester' of Deployment 'perf-tester' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'perf-tester' of 'deployment' 'perf-tester' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'perf-tester' of Deployment 'perf-tester' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'perf-tester' of Deployment 'perf-tester' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'perf-tester' of Deployment 'perf-tester' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'perf-tester' of Deployment 'perf-tester' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'perf-tester' of Deployment 'perf-tester' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'perf-tester' of Deployment 'perf-tester' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'perf-tester' of Deployment 'perf-tester' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'perf-tester' of Deployment 'perf-tester' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "perf-tester" of deployment "perf-tester" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment perf-tester in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5570.yaml:7-9
────────────────────────────────────────
   7 ┌   name: perf-tester
   8 │   labels:
   9 └     testapp: perf-tester
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container perf-tester in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment perf-tester in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5570.yaml:24-29
────────────────────────────────────────
  24 ┌       containers:
  25 │       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container perf-tester in deployment perf-tester (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5570.yaml:25-29
────────────────────────────────────────
  25 ┌       - name: perf-tester
  26 │         image: docker.io/[YOUR ALIAS]/perf-tester:dev
  27 │         ports:
  28 │         - containerPort: 3001
  29 └         imagePullPolicy: Always
────────────────────────────────────────



service5571_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pubsub-bulk-subscriber' of 'deployment' 'pubsub-bulk-subscriber' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pubsub-bulk-subscriber' of Deployment 'pubsub-bulk-subscriber' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pubsub-bulk-subscriber" of deployment "pubsub-bulk-subscriber" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pubsub-bulk-subscriber in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5571_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pubsub-bulk-subscriber
   5 │   labels:
   6 └     testapp: pubsub-bulk-subscriber
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pubsub-bulk-subscriber in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pubsub-bulk-subscriber in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5571_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pubsub-bulk-subscriber in deployment pubsub-bulk-subscriber (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5571_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-bulk-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5572_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pubsub-publisher' of 'deployment' 'pubsub-publisher' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pubsub-publisher' of Deployment 'pubsub-publisher' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pubsub-publisher" of deployment "pubsub-publisher" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pubsub-publisher in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5572_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pubsub-publisher
   5 │   labels:
   6 └     testapp: pubsub-publisher
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pubsub-publisher in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pubsub-publisher in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5572_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pubsub-publisher in deployment pubsub-publisher (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5572_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-publisher
  23 │         image: docker.io/YOUR ID/e2e-pubsub-publisher:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5573_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pubsub-subscriber' of 'deployment' 'pubsub-subscriber' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pubsub-subscriber' of Deployment 'pubsub-subscriber' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pubsub-subscriber" of deployment "pubsub-subscriber" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pubsub-subscriber in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5573_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pubsub-subscriber
   5 │   labels:
   6 └     testapp: pubsub-subscriber
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pubsub-subscriber in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pubsub-subscriber in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5573_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pubsub-subscriber in deployment pubsub-subscriber (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5573_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: pubsub-subscriber
  23 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5574_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pubsub-subscriber-routing' of 'deployment' 'pubsub-subscriber-routing' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pubsub-subscriber-routing" of deployment "pubsub-subscriber-routing" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pubsub-subscriber-routing in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5574_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pubsub-subscriber-routing
   5 │   labels:
   6 └     testapp: pubsub-subscriber-routing
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pubsub-subscriber-routing in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pubsub-subscriber-routing in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5574_1.yaml:22-27
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pubsub-subscriber-routing in deployment pubsub-subscriber-routing (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5574_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: pubsub-subscriber-routing
  24 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────



service5575_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pubsub-subscriber-routing' of 'deployment' 'pubsub-subscriber-routing' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pubsub-subscriber-routing' of Deployment 'pubsub-subscriber-routing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pubsub-subscriber-routing" of deployment "pubsub-subscriber-routing" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pubsub-subscriber-routing in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5575_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pubsub-subscriber-routing
   5 │   labels:
   6 └     testapp: pubsub-subscriber-routing
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pubsub-subscriber-routing in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pubsub-subscriber-routing in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5575_1.yaml:23-28
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pubsub-subscriber-routing in deployment pubsub-subscriber-routing (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5575_1.yaml:24-28
────────────────────────────────────────
  24 ┌       - name: pubsub-subscriber-routing
  25 │         image: docker.io/YOUR ID/e2e-pubsub-subscriber_grpc:dev
  26 │         ports:
  27 │         - containerPort: 3000
  28 └         imagePullPolicy: Always
────────────────────────────────────────



service5576_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'runtime' of Deployment 'runtime' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'runtime' of Deployment 'runtime' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'runtime' of 'deployment' 'runtime' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'runtime' of Deployment 'runtime' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'runtime' of Deployment 'runtime' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'runtime' of Deployment 'runtime' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'runtime' of Deployment 'runtime' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'runtime' of Deployment 'runtime' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'runtime' of Deployment 'runtime' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'runtime' of Deployment 'runtime' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'runtime' of Deployment 'runtime' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "runtime" of deployment "runtime" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment runtime in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5576_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: runtime
   5 │   labels:
   6 └     testapp: runtime
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container runtime in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment runtime in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5576_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container runtime in deployment runtime (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5576_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime
  23 │         image: docker.io/YOUR ID/e2e-runtime:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5577_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'runtime_init' of Deployment 'runtime_init' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'runtime_init' of Deployment 'runtime_init' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'runtime_init' of 'deployment' 'runtime_init' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'runtime_init' of Deployment 'runtime_init' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'runtime_init' of Deployment 'runtime_init' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'runtime_init' of Deployment 'runtime_init' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'runtime_init' of Deployment 'runtime_init' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'runtime_init' of Deployment 'runtime_init' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'runtime_init' of Deployment 'runtime_init' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'runtime_init' of Deployment 'runtime_init' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'runtime_init' of Deployment 'runtime_init' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "runtime_init" of deployment "runtime_init" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment runtime_init in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5577_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: runtime_init
   5 │   labels:
   6 └     testapp: runtime_init
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container runtime_init in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment runtime_init in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5577_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container runtime_init in deployment runtime_init (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5577_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: runtime_init
  23 │         image: docker.io/YOUR ID/e2e-runtime_init:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5578_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretapp' of Deployment 'secretapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretapp' of Deployment 'secretapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretapp' of 'deployment' 'secretapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretapp' of Deployment 'secretapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretapp' of Deployment 'secretapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretapp' of Deployment 'secretapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretapp' of Deployment 'secretapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretapp' of Deployment 'secretapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretapp' of Deployment 'secretapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretapp' of Deployment 'secretapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretapp' of Deployment 'secretapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretapp" of deployment "secretapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment secretapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5578_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: secretapp
   5 │   labels:
   6 └     testapp: secretapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment secretapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5578_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secretapp in deployment secretapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5578_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: secretapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-secretapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5579_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-invocation' of 'deployment' 'service-invocation' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-invocation" of deployment "service-invocation" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-invocation in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5579_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-invocation
   5 │   labels:
   6 └     testapp: service-invocation
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-invocation in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-invocation in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5579_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-invocation in deployment service-invocation (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5579_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: service-invocation
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5580_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-invocation-external' of Deployment 'service-invocation-external' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-invocation-external' of 'deployment' 'service-invocation-external' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-invocation-external' of Deployment 'service-invocation-external' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-invocation-external" of deployment "service-invocation-external" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-invocation-external in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5580_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-invocation-external
   5 │   labels:
   6 └     testapp: service-invocation-external
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-invocation-external in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-invocation-external in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5580_1.yaml:19-24
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-invocation-external in deployment service-invocation-external (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5580_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: service-invocation-external
  21 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_external:dev
  22 │         ports:
  23 │         - containerPort: 3000
  24 └         imagePullPolicy: Always
────────────────────────────────────────



service5581_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-invocation' of 'deployment' 'service-invocation' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-invocation' of Deployment 'service-invocation' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-invocation" of deployment "service-invocation" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-invocation in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5581_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-invocation
   5 │   labels:
   6 └     testapp: service-invocation
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-invocation in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-invocation in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5581_1.yaml:22-27
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-invocation in deployment service-invocation (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5581_1.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: service-invocation
  24 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc:dev
  25 │         ports:
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────



service5582_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-invocation-grpc-proxy-client' of 'deployment' 'service-invocation-grpc-proxy-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-invocation-grpc-proxy-client' of Deployment 'service-invocation-grpc-proxy-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-invocation-grpc-proxy-client" of deployment "service-invocation-grpc-proxy-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-invocation-grpc-proxy-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5582_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-invocation-grpc-proxy-client
   5 │   labels:
   6 └     testapp: service-invocation-grpc-proxy-client
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-invocation-grpc-proxy-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-invocation-grpc-proxy-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5582_1.yaml:21-27
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-invocation-grpc-proxy-client in deployment service-invocation-grpc-proxy-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5582_1.yaml:22-27
────────────────────────────────────────
  22 ┌       - name: service-invocation-grpc-proxy-client
  23 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proyx_client:dev
  24 │         ports:
  25 │         - containerPort: 50051
  26 │         - containerPort: 3000
  27 └         imagePullPolicy: Always
────────────────────────────────────────



service5583.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-invocation-grpc-proxy-server' of 'deployment' 'service-invocation-grpc-proxy-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-invocation-grpc-proxy-server' of Deployment 'service-invocation-grpc-proxy-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-invocation-grpc-proxy-server" of deployment "service-invocation-grpc-proxy-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-invocation-grpc-proxy-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5583.yaml:7-9
────────────────────────────────────────
   7 ┌   name: service-invocation-grpc-proxy-server
   8 │   labels:
   9 └     testapp: service-invocation-grpc-proxy-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-invocation-grpc-proxy-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-invocation-grpc-proxy-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5583.yaml:25-30
────────────────────────────────────────
  25 ┌       containers:
  26 │       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-invocation-grpc-proxy-server in deployment service-invocation-grpc-proxy-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5583.yaml:26-30
────────────────────────────────────────
  26 ┌       - name: service-invocation-grpc-proxy-server
  27 │         image: docker.io/[YOUR ALIAS]/e2e-service_invocation_grpc_proxy_server:dev
  28 │         ports:
  29 │         - containerPort: 50051
  30 └         imagePullPolicy: Always
────────────────────────────────────────



service5584_1.yaml (kubernetes)
===============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stateapp' of Deployment 'stateapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stateapp' of Deployment 'stateapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stateapp' of 'deployment' 'stateapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stateapp' of Deployment 'stateapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stateapp' of Deployment 'stateapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stateapp' of Deployment 'stateapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stateapp' of Deployment 'stateapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stateapp' of Deployment 'stateapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stateapp' of Deployment 'stateapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stateapp' of Deployment 'stateapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stateapp' of Deployment 'stateapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stateapp" of deployment "stateapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stateapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5584_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: stateapp
   5 │   labels:
   6 └     testapp: stateapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stateapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stateapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5584_1.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stateapp in deployment stateapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service5584_1.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: stateapp
  23 │         image: docker.io/YOUR_DOCKER_ALIAS/e2e-stateapp:dev
  24 │         ports:
  25 │         - containerPort: 3000
  26 └         imagePullPolicy: Always
────────────────────────────────────────



service5775.yaml (kubernetes)
=============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'proxmox' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service5815.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service5815.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5815.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service5815.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



service6000.yaml (kubernetes)
=============================
Tests: 96 (SUCCESSES: 95, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-state-metrics' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service6000.yaml:11-20
────────────────────────────────────────
  11 ┌   clusterIP: None
  12 │   ports:
  13 │   - name: http-metrics
  14 │     port: 8080
  15 │     targetPort: http-metrics
  16 │   - name: telemetry
  17 │     port: 8081
  18 │     targetPort: telemetry
  19 │   selector:
  20 └     app.kubernetes.io/name: kube-state-metrics
────────────────────────────────────────


