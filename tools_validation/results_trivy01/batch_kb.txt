
Report Summary

┌───────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                          Target                           │    Type    │ Misconfigurations │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service15.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service15_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service16.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service16_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service17.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service17_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service18.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service18_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service19.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service19_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service1_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service2.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service20.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service20_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service21.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service21_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service22.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service22_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service23.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service23_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service24.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service24_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service25.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service25_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service26.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service26_1.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service27.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service27_1.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service28.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service29.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service29_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service2_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service3.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service30.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service30_1.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service31.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service31_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service32.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service32_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service33.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service33_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service34.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service34_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service35.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service35_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service36.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service36_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service37.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service37_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service38.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service38_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service39.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service39_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service3_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service4.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service40.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service40_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service41.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service41_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service42.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service42_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service43.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service43_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service44.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service44_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service45.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service45_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service46.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service46_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service47.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service47_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service48.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service48_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service49.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service49_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service4_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service5.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service50.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service50_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service51.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service51_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service52.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service52_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service53.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service53_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service54.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service54_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service55.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service55_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service56.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service56_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service57.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service57_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service58.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service58_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service59.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service59_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service5_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service6.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service60.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service60_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service61.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service61_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service62.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service62_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service63.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service63_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service64.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service64_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service65.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service65_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service66.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service66_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service67.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service67_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service68.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service68_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service69.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service69_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service6_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service7.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service70.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service70_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service71.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service71_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service72.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service72_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service73.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service73_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service74.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service74_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service75.yaml                               │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service75_1.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service76.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service76_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service77.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service77_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service78.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service78_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service79.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service79_1.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service7_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service8.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service80.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service80_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service81.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service81_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service82.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service82_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service83.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service83_1.yaml                             │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service8_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service9.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service9_1.yaml                              │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stockmanager-service_1.yaml                               │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ stopvm-cronjob.yaml                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-admin-bind.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-admin-bind1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-admin-role.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-admin-role1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws10.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws10_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws11.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws11_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws12.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws12_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws13.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws13_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws14.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws14_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws15.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws15_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws16.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws16_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws1_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws2.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws2_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws3.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws3_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws4.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws4_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws5.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws5_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws6.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws6_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws7.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws7_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws8.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws8_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws9.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws9_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-aws_1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-aws.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-definition.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-definition1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ebs-io1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ebs-io11.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ebs-io11_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ebs-io12.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ebs-io12_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ebs-io1_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ebs.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-glusterfs.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-glusterfs1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-my.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-nfs.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-nfs1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-retain.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-retain1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-retain2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-retain3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-retain4.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-retain5.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-retain6.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-smb.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class-ssd.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class10.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class11.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class12.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class13.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class13_1.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class14.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class15.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class16.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class17.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class18.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class19.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class19_1.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class1_1.yaml                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class20.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class20_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class20_2.yaml                                    │ kubernetes │        19         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class20_3.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class20_4.yaml                                    │ kubernetes │        19         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class20_5.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class21.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class22.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class23.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class24.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class25.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class26.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class27.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class28.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class28_1.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class29.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class2_1.yaml                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class30.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class31.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class32.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class33.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class34.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class35.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class36.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class37.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class38.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class39.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class3_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class4.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class40.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class41.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class41_1.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class42.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class43.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class43_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class44.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class44_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class45.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class46.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class47.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class48.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class49.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class5.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class50.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class51.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class52.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class53.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class54.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class55.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class56.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class57.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class58.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class59.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class6.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class60.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class61.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class62.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class62_1.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class63.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class63_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class64.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class65.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class66.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class67.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class68.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class69.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class6_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class7.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class70.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class71.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class73.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class74.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class75.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class76.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class76_1.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class77.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class78.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class79.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class7_1.yaml                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class8.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class8_1.yaml                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class9.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class9_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-class_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-classes.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-classes1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-classes1_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-classes1_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-classes2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-cls1.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-cluster-role.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-cluster-role1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-clusterrolebinding.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-clusterrolebinding1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-configuration.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-database.yaml                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-deployment.yaml                                   │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-ebs.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-ebs1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-ebs1_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-efs.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-gcp.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-gcp1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-gcp1_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-gcp_1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-gluster-ns.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-location.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-location_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-mgmt-serv-depl.yaml                               │ kubernetes │        19         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-mgmt-serv-depl1.yaml                              │ kubernetes │        19         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-mgmt-serv-depl1_1.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-mgmt-serv-depl_1.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-mgmt-serv-nodeport.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-mgmt-serv-nodeport1.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-namespace.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-pre.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-pre_1.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-pre_2.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-pre_3.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-quota.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-quota1.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-ceph-toolbox.yaml                            │ kubernetes │        13         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster_2.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster_3.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster_4.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster_5.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster_6.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-cluster_7.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_10.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_11.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_12.yaml                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_13.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_14.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_15.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_16.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_17.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_18.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_19.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_2.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_20.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_21.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_22.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_23.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_24.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_25.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_26.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_27.yaml                               │ kubernetes │         5         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_28.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_29.yaml                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_3.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_30.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_31.yaml                               │ kubernetes │         5         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_32.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_33.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_34.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_35.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_36.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_37.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_38.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_39.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_4.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_40.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_41.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_42.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_43.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_44.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_45.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_46.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_47.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_48.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_49.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_5.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_50.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_51.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_52.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_53.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_6.yaml                                │ kubernetes │         5         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_7.yaml                                │ kubernetes │         5         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_8.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-common_9.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-operator.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-operator_1.yaml                              │ kubernetes │        13         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-s3_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-rook-storageclass.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-service-claim0-persistentvolumeclaim.yaml         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-service-deployment.yaml                           │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-service-service.yaml                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-service.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage-user.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver1.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver10.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver11.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver12.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver13.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver14.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver15.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver16.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver17.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver18.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver19.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver2.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver20.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver21.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver22.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver23.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver24.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver25.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver26.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver27.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver28.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver29.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver3.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver33.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver34.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver35.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver36.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver37.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver38.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver39.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver4.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver40.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver41.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver42.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver43.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver44.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver45.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver46.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver47.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver48.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver49.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver5.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver50.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver6.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver7.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver8.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIDriver9.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode1.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode10.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode11.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode12.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode13.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode14.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode15.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode16.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode17.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode18.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode19.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode2.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode20.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode21.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode22.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode23.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode24.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode25.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode26.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode27.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode28.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode29.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode3.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode30.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode34.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode35.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode36.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode37.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode38.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode39.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode4.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode40.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode41.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode42.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode43.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode44.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode45.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode46.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode47.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode48.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode49.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode5.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode50.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode51.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode6.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode7.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode8.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSINode9.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity10.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity11.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity12.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity13.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity14.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity15.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity16.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity17.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity18.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity19.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity2.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity20.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity21.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity22.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity23.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity27.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity28.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity29.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity3.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity30.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity31.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity32.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity33.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity34.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity35.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity36.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity37.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity38.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity39.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity4.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity40.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity41.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity5.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity6.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity7.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity8.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.CSIStorageCapacity9.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass.after_roundtrip.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass.after_roundtrip1.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass10.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass11.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass12.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass13.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass14.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass15.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass16.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass17.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass18.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass19.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass20.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass21.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass22.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass23.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass24.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass25.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass26.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass27.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass28.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass29.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass30.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass31.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass32.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass33.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass34.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass35.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass39.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass40.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass41.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass42.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass43.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass44.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass45.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass46.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass47.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass48.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass49.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass5.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass50.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass51.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass52.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass53.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass54.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass55.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass56.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass7.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass8.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1.StorageClass9.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass1.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass10.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass11.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass12.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass13.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass14.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass15.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass16.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass17.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass18.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass19.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass2.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass20.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass21.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass22.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass3.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass4.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass5.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass6.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass7.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass8.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1alpha1.VolumeAttributesClass9.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass.after_roundtrip.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass.after_roundtrip1.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass10.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass11.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass12.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass13.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass14.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass15.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass16.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass17.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass18.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass19.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass20.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass21.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass22.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass23.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass24.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass25.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass26.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass27.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass28.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass29.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass30.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass31.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass32.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass33.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass34.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass35.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass39.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass4.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass40.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass41.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass42.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass43.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass44.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass45.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass46.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass47.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass48.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass49.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass5.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass50.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass51.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass52.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass53.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass54.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass55.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass56.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass6.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass7.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass8.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage.k8s.io.v1beta1.StorageClass9.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage10.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage100.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage100_1.yaml                                         │ kubernetes │        20         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage101.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage102.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage103.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage103_1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage104.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage105.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage105_1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage106.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage106_1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage106_2.yaml                                         │ kubernetes │        18         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage108.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage108_1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage109.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage10_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage11.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage110.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage111.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage112.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage114.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage114_1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage116.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage116_1.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage116_2.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage117.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage118.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage11_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage12.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage12_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage13.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage13_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage14.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage14_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage15.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage15_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage16.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage16_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage17.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage17_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage18.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage18_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage19.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage19_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage19_2.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage19_3.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage19_4.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage19_5.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage2.yaml                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage20.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage20_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage22.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage23.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage24.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage24_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage24_2.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage25.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage25_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage25_2.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage25_3.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage25_4.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage25_5.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage25_6.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage26.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage26_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage27.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage27_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage28.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage28_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage29.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage3.yaml                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage30.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage31.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage31_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage32.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage32_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage33.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage33_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage34.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage34_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage35.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage35_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage36.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage36_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage37.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage37_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage38.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage38_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage39.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage39_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage3_1.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage3_2.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage4.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage40.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage40_1.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage40_2.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage40_3.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage40_4.yaml                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ storage40_5.yaml                                          │ kubernetes │         1         │
└───────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


stockmanager-service15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service15.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service15_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service15_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service15_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service15_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service15_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service16.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service16.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service16_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service16_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service16_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service16_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service16_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service17.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service17.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service17_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service17_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service17_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service17_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service17_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────



stockmanager-service18.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service18.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service18_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service18_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service18_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service18_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service18_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service19.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service19.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service19_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service19_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service19_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service19_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service19_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service1_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service1_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service1_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service1_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service1_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service2.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service20.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service20.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service20_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service20_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service20_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service20_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service20_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service21.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service21.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service21_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service21_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service21_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service21_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service21_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: karthick090420/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service22.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service22.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service22_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service22_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service22_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service22_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service22_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: dipakpp22/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service23.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service23.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service23_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service23_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service23_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service23_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service23_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service24.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service24.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service24_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service24_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service24_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service24_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service24_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service25.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service25.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service25_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service25_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service25_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service25_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service25_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: danielbryantuk/djstockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service26.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service26.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service26_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'replicationcontroller' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service26_1.yaml:6-22
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   template:
   8 │     metadata:
   9 │       labels:
  10 │         app: stockmanager
  11 │     spec:
  12 │       containers:
  13 │       - name: stockmanager
  14 └         image: danielbryantuk/djstockmanager:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of replicationcontroller "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service26_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service26_1.yaml:12-22
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in replicationcontroller stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service26_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service27.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service27.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service27_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'replicationcontroller' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service27_1.yaml:6-22
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   template:
   8 │     metadata:
   9 │       labels:
  10 │         app: stockmanager
  11 │     spec:
  12 │       containers:
  13 │       - name: stockmanager
  14 └         image: danielbryantuk/djstockmanager:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of replicationcontroller "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service27_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service27_1.yaml:12-22
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in replicationcontroller stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service27_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: danielbryantuk/djstockmanager:1.0
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service28.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service28.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service29.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service29.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service29_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service29_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service29_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service29_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service29_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service2_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service2_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service2_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service2_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service2_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service3.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service30.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service30.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service30_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service30_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service30_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service30_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service30_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: santospardos/sanvalero:stockmanager
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service31.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service31.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service31_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service31_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service31_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service31_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service31_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service32.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service32.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service32_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service32_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service32_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service32_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service32_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service33.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service33.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service33_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service33_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service33_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service33_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service33_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anujchourasia15/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service34.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service34.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service34_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service34_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service34_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service34_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service34_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service35.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service35.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service35_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service35_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service35_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service35_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service35_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service36.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service36.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service36_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service36_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service36_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service36_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service36_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: suhasjv9/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service37.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service37.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service37_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service37_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service37_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service37_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service37_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service38.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service38.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service38_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service38_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service38_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service38_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service38_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service39.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service39.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service39_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service39_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service39_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service39_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service39_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service3_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service3_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service3_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service3_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service3_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service4.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service4.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service40.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service40.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service40_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service40_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service40_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service40_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service40_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: vwtraining/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service41.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service41.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service41_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service41_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service41_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service41_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service41_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service42.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service42.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service42_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service42_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service42_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service42_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service42_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service43.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service43.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service43_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service43_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service43_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service43_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service43_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service44.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service44.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service44_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service44_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service44_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service44_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service44_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service45.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service45.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service45_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service45_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service45_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service45_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service45_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: aniruddha0711/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service46.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service46.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service46_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service46_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service46_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service46_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service46_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: faijanpatel/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service47.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service47.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service47_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service47_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service47_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service47_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service47_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service48.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service48.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service48_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service48_1.yaml:6-27
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service48_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service48_1.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service48_1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: avinashcherukuru/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           failureThreshold: 1
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /health
  ..   
────────────────────────────────────────



stockmanager-service49.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service49.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service49_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service49_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service49_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service49_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service49_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service4_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service4_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service4_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service4_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service4_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service5.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service5.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service50.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service50.yaml:8-15
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 │     targetPort: 8030
  15 └     name: http
────────────────────────────────────────



stockmanager-service50_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service50_1.yaml:6-25
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service50_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service50_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service50_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mniet2009/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service51.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service51.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service51_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service51_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service51_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service51_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service51_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service52.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service52.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service52_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service52_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service52_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service52_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service52_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service53.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service53.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service53_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service53_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service53_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service53_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service53_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: shaheer951/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service54.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service54.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service54_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service54_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service54_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service54_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service54_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service55.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service55.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service55_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service55_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service55_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service55_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service55_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service56.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service56.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service56_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service56_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service56_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service56_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service56_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service57.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service57.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service57_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service57_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service57_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service57_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service57_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service58.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service58.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service58_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service58_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service58_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service58_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service58_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service59.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service59.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service59_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service59_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service59_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service59_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service59_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service5_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service5_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service5_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service5_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service5_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kavyareddy789/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /actuator/health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service6.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service6.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service60.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service60.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service60_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service60_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service60_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service60_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service60_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: raju895/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service61.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service61.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service61_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service61_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service61_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service61_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service61_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service62.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service62.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service62_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service62_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service62_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service62_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service62_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service63.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service63.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service63_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service63_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service63_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service63_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service63_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: taniaduggal60/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service64.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service64.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service64_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service64_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service64_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service64_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service64_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service65.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service65.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service65_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service65_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service65_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service65_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service65_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service66.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service66.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service66_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service66_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service66_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service66_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service66_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service67.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service67.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service67_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service67_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service67_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service67_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service67_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: kalyaneluri/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service68.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service68.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service68_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service68_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service68_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service68_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service68_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service69.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service69.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service69_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service69_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service69_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service69_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service69_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service6_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service6_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service6_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service6_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service6_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: anirudhce/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /healthcheckSM
  23 │             port: 8030
  24 │           initialDelaySeconds: 50
  25 └           timeoutSeconds: 30
────────────────────────────────────────



stockmanager-service7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service7.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service70.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service70.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service70_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service70_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service70_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service70_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service70_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service71.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service71.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service71_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service71_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service71_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service71_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service71_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: mriyank/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service72.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service72.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service72_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service72_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service72_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service72_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service72_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service73.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service73.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service73_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service73_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service73_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service73_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service73_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service74.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service74.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service74_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service74_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service74_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service74_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service74_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service75.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service75.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service75.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service75.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service75.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: acrcw/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service75_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service75_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service76.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service76.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service76_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service76_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service76_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service76_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service76_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: saikishore789/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service77.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service77.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service77_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'replicationcontroller' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of ReplicationController 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of ReplicationController 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service77_1.yaml:6-22
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   template:
   8 │     metadata:
   9 │       labels:
  10 │         app: stockmanager
  11 │     spec:
  12 │       containers:
  13 │       - name: stockmanager
  14 └         image: rajkumar207/stmanager:latest
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of replicationcontroller "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service77_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service77_1.yaml:12-22
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in replicationcontroller stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service77_1.yaml:13-22
────────────────────────────────────────
  13 ┌       - name: stockmanager
  14 │         image: rajkumar207/stmanager:latest
  15 │         ports:
  16 │         - containerPort: 8030
  17 │         livenessProbe:
  18 │           httpGet:
  19 │             path: /health
  20 │             port: 8030
  21 │           initialDelaySeconds: 30
  22 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service78.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service78.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service78_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service78_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service78_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service78_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service78_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: jyothimadhuriyerroju02553/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service79.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service79.yaml:8-14
────────────────────────────────────────
   8 ┌   type: LoadBalancer
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 80
  14 └     targetPort: 8030
────────────────────────────────────────



stockmanager-service79_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service79_1.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: stockmanager
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: stockmanager
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service79_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: stockmanager
   5 │   labels:
   6 └     app: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service79_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service79_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: stockmanager
  19 │         image: 533267044690.dkr.ecr.eu-west-1.amazonaws.com/ecommerce-app-repo:stockmanager-latest
  20 │         ports:
  21 └         - containerPort: 8030
────────────────────────────────────────



stockmanager-service7_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service7_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service7_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service7_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service7_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: rajashekar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service8.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service8.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service80.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service80.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service80_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service80_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service80_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service80_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service80_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service81.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service81.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service81_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service81_1.yaml:6-26
────────────────────────────────────────
   6 ┌   spec: null
   7 │   selector:
   8 │     matchLabels:
   9 │       app: stockmanager
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: stockmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service81_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service81_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service81_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: stockmanager
  18 │         image: thetips4you/stockmanager:latest
  19 │         ports:
  20 │         - containerPort: 8030
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health
  24 │             port: 8030
  25 │           initialDelaySeconds: 30
  26 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service82.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service82.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service82_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service82_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service82_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service82_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service82_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: ramkuumar/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service83.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service83.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service83_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service83_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service83_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service83_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service83_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service8_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service8_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service8_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service8_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service8_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: praveensingam1994/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service9.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service9.yaml:8-14
────────────────────────────────────────
   8 ┌   type: NodePort
   9 │   selector:
  10 │     app: stockmanager
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8030
  14 └     name: http
────────────────────────────────────────



stockmanager-service9_1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service9_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service9_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service9_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service9_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: gopalagabbita/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stockmanager-service_1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stockmanager' of 'deployment' 'stockmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stockmanager' of Deployment 'stockmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stockmanager' of Deployment 'stockmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stockmanager-service_1.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: stockmanager
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: stockmanager
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stockmanager" of deployment "stockmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment stockmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 stockmanager-service_1.yaml:4
────────────────────────────────────────
   4 [   name: stockmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stockmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment stockmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stockmanager-service_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 └             port: 8030
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stockmanager in deployment stockmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stockmanager-service_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: stockmanager
  17 │         image: tohidaws/stockmanager:latest
  18 │         ports:
  19 │         - containerPort: 8030
  20 │         livenessProbe:
  21 │           httpGet:
  22 │             path: /health
  23 │             port: 8030
  24 │           initialDelaySeconds: 30
  25 └           timeoutSeconds: 1
────────────────────────────────────────



stopvm-cronjob.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stop-vm' of CronJob 'stop-vm' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stop-vm' of CronJob 'stop-vm' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stop-vm' of 'cronjob' 'stop-vm' in 'dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stop-vm' of CronJob 'stop-vm' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stop-vm' of CronJob 'stop-vm' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stop-vm' of CronJob 'stop-vm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stop-vm' of CronJob 'stop-vm' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stop-vm' of CronJob 'stop-vm' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stop-vm' of CronJob 'stop-vm' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stop-vm' of CronJob 'stop-vm' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stop-vm' of CronJob 'stop-vm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 stopvm-cronjob.yaml:7-23
────────────────────────────────────────
   7 ┌   schedule: "0 18 * * 1-5" ## Run at 6:00 PM PST M-F
   8 │   timeZone: "US/Pacific"
   9 │   jobTemplate:
  10 │     spec:
  11 │       template:
  12 │         spec:
  13 │           containers:
  14 │           - name: stop-vm
  15 └             image: ghcr.io/govindkailas/kubectl-virtctl:main
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stop-vm" of cronjob "stop-vm" in "dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container stop-vm in dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob stop-vm in dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stopvm-cronjob.yaml:13-23
────────────────────────────────────────
  13 ┌           containers:
  14 │           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 │               - |
  20 │                 for vm  in $(kubectl get vm -o jsonpath='{.items[*].metadata.name}') ; do
  21 └                   virtctl stop "$vm"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stop-vm in cronjob stop-vm (namespace: dev) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 stopvm-cronjob.yaml:14-19
────────────────────────────────────────
  14 ┌           - name: stop-vm
  15 │             image: ghcr.io/govindkailas/kubectl-virtctl:main
  16 │             imagePullPolicy: Always
  17 │             command: ["/bin/sh","-c"]
  18 │             args:
  19 └               - |
────────────────────────────────────────



storage-aws.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws10.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws10.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws11.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws11.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws12.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws12.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws13.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws13.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws14.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws14.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws15_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws15_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws16.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws16.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws2.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws3.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws4.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws4.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws5.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws5.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws6.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws6.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws7.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws7.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws8.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws8.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-aws9.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-aws9.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-class13_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class13_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class19_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class19_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class1_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class1_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class20.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class20.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteMany
   8 │   storageClassName: ebs-sc
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



storage-class20_2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-mongo-container' of 'deployment' 'mongo-spring-boot-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class20_2.yaml:6-27
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: spring-mongo-app
  10 │   template:
  11 │     metadata:
  12 │       name: spring-app-pod
  13 │       labels:
  14 └         app: spring-mongo-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-mongo-container" of deployment "mongo-spring-boot-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mongo-spring-boot-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage-class20_2.yaml:4
────────────────────────────────────────
   4 [   name: mongo-spring-boot-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo-spring-boot-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo-spring-boot-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-class20_2.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 └         - name: MONGO_DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-mongo-container in deployment mongo-spring-boot-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 storage-class20_2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────



storage-class20_3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class20_3.yaml:6-14
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: spring-mongo-app
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 │     targetPort: 8080
  13 │     nodePort: 30032
  14 └     protocol: TCP
────────────────────────────────────────



storage-class20_4.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb-container' of 'deployment' 'mongo-db-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class20_4.yaml:6-32
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: mongo
  10 │   template:
  11 │     metadata:
  12 │       name: mongodb-pod
  13 │       labels:
  14 └         app: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb-container" of deployment "mongo-db-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mongo-db-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage-class20_4.yaml:4
────────────────────────────────────────
   4 [   name: mongo-db-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo-db-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-class20_4.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo-db-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-class20_4.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────



storage-class20_5.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class20_5.yaml:6-13
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: mongo
   9 │   ports:
  10 │   - name: http
  11 │     port: 27017
  12 │     targetPort: 27017
  13 └     protocol: TCP
────────────────────────────────────────



storage-class27.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class27.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage-class28_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class28_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class2_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class2_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class41_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class41_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class42.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class42.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage-class62_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class62_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class69.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class69.yaml:8-13
────────────────────────────────────────
   8 ┌   storageClassName: standard
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 20Gi
────────────────────────────────────────



storage-class76_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class76_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class7_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class7_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-class8_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-class8_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 100Gi
  11 └   storageClassName: storage-class-name
────────────────────────────────────────



storage-database.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-database.yaml:7-12
────────────────────────────────────────
   7 ┌   storageClassName: manual
   8 │   capacity: 500M
   9 │   accessModes:
  10 │   - ReadWriteMany
  11 │   hostPath:
  12 └     path: "mnt/data"
────────────────────────────────────────



storage-deployment.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'storage' of Deployment 'storage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'storage' of Deployment 'storage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'storage' of 'deployment' 'storage' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'storage' of Deployment 'storage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'storage' of Deployment 'storage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'storage' of Deployment 'storage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'storage' of Deployment 'storage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'storage' of Deployment 'storage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'storage' of Deployment 'storage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'storage' of Deployment 'storage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'storage' of Deployment 'storage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'storage' of Deployment 'storage' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-deployment.yaml:12-38
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: storage
  16 │   strategy: {}
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 └         kompose.cmd: kompose-linux-amd64 convert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "storage" of deployment "storage" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment storage in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose-linux-amd64 convert
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: storage
  10 └   name: storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container storage in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment storage in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-deployment.yaml:27-38
────────────────────────────────────────
  27 ┌       containers:
  28 │         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 └               hostPort: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container storage in deployment storage (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 storage-deployment.yaml:28-37
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PORT
  30 │               value: "8081"
  31 │           image: quay.apps.mgmt1.ocp.trafikverket.local/registry-1.docker.io/alswl/excalidraw-storage-backend:v2023.11.11
  32 │           name: storage
  33 │           ports:
  34 │             - containerPort: 8081
  35 │               hostPort: 8081
  36 │               protocol: TCP
  37 └           resources: {}
────────────────────────────────────────



storage-ebs1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-ebs1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 5Gi
────────────────────────────────────────



storage-gcp.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-gcp.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-gcp1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-gcp1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: cloud-ssd
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 7Gi
────────────────────────────────────────



storage-mgmt-serv-depl.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'storage-mgmt-serv' of 'deployment' 'storage-mgmt-serv-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:6-17
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: storage-mgmt-serv
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: storage-mgmt-serv
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "storage-mgmt-serv" of deployment "storage-mgmt-serv-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment storage-mgmt-serv-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:4
────────────────────────────────────────
   4 [   name: storage-mgmt-serv-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container storage-mgmt-serv-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment storage-mgmt-serv-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-mgmt-serv-depl.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────



storage-mgmt-serv-depl1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'storage-mgmt-serv' of 'deployment' 'storage-mgmt-serv-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'storage-mgmt-serv' of Deployment 'storage-mgmt-serv-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:6-17
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: storage-mgmt-serv
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: storage-mgmt-serv
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "storage-mgmt-serv" of deployment "storage-mgmt-serv-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment storage-mgmt-serv-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:4
────────────────────────────────────────
   4 [   name: storage-mgmt-serv-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container storage-mgmt-serv-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment storage-mgmt-serv-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-mgmt-serv-depl1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: storage-mgmt-serv
  17 └         image: us.gcr.io/photogallery-409112/storagemgmtserv
────────────────────────────────────────



storage-mgmt-serv-depl1_1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-mgmt-serv-depl1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: storage-mgmt-serv
   8 │   ports:
   9 │   - name: storage-mgmt-serv
  10 │     protocol: TCP
  11 │     port: 4001
  12 └     targetPort: 4001
────────────────────────────────────────



storage-mgmt-serv-depl_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-mgmt-serv-depl_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: storage-mgmt-serv
   8 │   ports:
   9 │   - name: storage-mgmt-serv
  10 │     protocol: TCP
  11 │     port: 4001
  12 └     targetPort: 4001
────────────────────────────────────────



storage-mgmt-serv-nodeport.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-mgmt-serv-nodeport.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: storage-mgmt-serv
   9 │   ports:
  10 │     - name: storage-mgmt-serv
  11 │       protocol: TCP
  12 │       port: 4001
  13 └       targetPort: 4001
────────────────────────────────────────



storage-mgmt-serv-nodeport1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-mgmt-serv-nodeport1.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: storage-mgmt-serv
   9 │   ports:
  10 │     - name: storage-mgmt-serv
  11 │       protocol: TCP
  12 │       port: 4001
  13 └       targetPort: 4001
────────────────────────────────────────



storage-pre_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-pre_1.yaml:7-12
────────────────────────────────────────
   7 ┌   storageClassName: nfs-csi
   8 │   accessModes:
   9 │   - ReadWriteMany
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────



storage-pre_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-pre_2.yaml:7-12
────────────────────────────────────────
   7 ┌   storageClassName: nfs-csi
   8 │   accessModes:
   9 │   - ReadWriteMany
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────



storage-pre_3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-pre_3.yaml:7-12
────────────────────────────────────────
   7 ┌   storageClassName: nfs-csi
   8 │   accessModes:
   9 │   - ReadWriteMany
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────



storage-quota.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-quota.yaml:7-8
────────────────────────────────────────
   7 ┌     persistentvolumeclaims: "10"
   8 └     requests.storage: "500Mi"
────────────────────────────────────────



storage-quota1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-quota1.yaml:7-8
────────────────────────────────────────
   7 ┌     persistentvolumeclaims: "10"
   8 └     requests.storage: "500Mi"
────────────────────────────────────────



storage-rook-ceph-toolbox.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rook-ceph-tools' of Deployment 'rook-ceph-tools' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:94-215
────────────────────────────────────────
  94 ┌   replicas: 1
  95 │   selector:
  96 │     matchLabels:
  97 │       app: rook-ceph-tools
  98 │   template:
  99 │     metadata:
 100 │       labels:
 101 │         app: rook-ceph-tools
 102 └     spec:
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rook-ceph-tools" of deployment "rook-ceph-tools" in "rook-ceph" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rook-ceph-tools in rook-ceph namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:103-215
────────────────────────────────────────
 103 ┌       dnsPolicy: ClusterFirstWithHostNet
 104 │       containers:
 105 │         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 └               # Replicate the script from toolbox.sh inline so the ceph image
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rook-ceph-tools in deployment rook-ceph-tools (namespace: rook-ceph) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 storage-rook-ceph-toolbox.yaml:105-194
────────────────────────────────────────
 105 ┌         - name: rook-ceph-tools
 106 │           image: quay.io/ceph/ceph:v18.2.1
 107 │           command:
 108 │             - /bin/bash
 109 │             - -c
 110 │             - |
 111 │               # Replicate the script from toolbox.sh inline so the ceph image
 112 │               # can be run directly, instead of requiring the rook toolbox
 113 └               CEPH_CONFIG="/etc/ceph/ceph.conf"
 ...   
────────────────────────────────────────



storage-rook-cluster_2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-cluster_2.yaml:6-22
────────────────────────────────────────
   6 ┌   storageClassName: rook-storage-mon
   7 │   capacity:
   8 │     storage: 1Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   volumeMode: Filesystem
  13 │   local:
  14 └     path: /dev/vdd
  ..   
────────────────────────────────────────



storage-rook-cluster_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-cluster_3.yaml:6-22
────────────────────────────────────────
   6 ┌   storageClassName: rook-storage-osd
   7 │   capacity:
   8 │     storage: 4Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   volumeMode: Block
  13 │   local:
  14 └     path: /dev/vde
  ..   
────────────────────────────────────────



storage-rook-cluster_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-cluster_4.yaml:6-22
────────────────────────────────────────
   6 ┌   storageClassName: rook-storage-mon
   7 │   capacity:
   8 │     storage: 1Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   volumeMode: Filesystem
  13 │   local:
  14 └     path: /dev/vdf
  ..   
────────────────────────────────────────



storage-rook-cluster_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-cluster_5.yaml:6-22
────────────────────────────────────────
   6 ┌   storageClassName: rook-storage-osd
   7 │   capacity:
   8 │     storage: 4Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   volumeMode: Block
  13 │   local:
  14 └     path: /dev/vdg
  ..   
────────────────────────────────────────



storage-rook-cluster_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-cluster_6.yaml:6-22
────────────────────────────────────────
   6 ┌   storageClassName: rook-storage-mon
   7 │   capacity:
   8 │     storage: 1Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   volumeMode: Filesystem
  13 │   local:
  14 └     path: /dev/vdh
  ..   
────────────────────────────────────────



storage-rook-cluster_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-cluster_7.yaml:6-22
────────────────────────────────────────
   6 ┌   storageClassName: rook-storage-osd
   7 │   capacity:
   8 │     storage: 4Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   volumeMode: Block
  13 │   local:
  14 └     path: /dev/vdi
  ..   
────────────────────────────────────────



storage-rook-common_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-object-bucket' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 storage-rook-common_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-object-bucket' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 storage-rook-common_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────



storage-rook-common_12.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0053 (HIGH): ClusterRole 'rook-ceph-system' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 storage-rook-common_12.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - pods/exec
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



storage-rook-common_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cephfs-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 storage-rook-common_2.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 └   - list
────────────────────────────────────────



storage-rook-common_26.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 storage-rook-common_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────



storage-rook-common_27.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 storage-rook-common_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_27.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 │   - watch
  28 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_27.yaml:59-66
────────────────────────────────────────
  59 ┌ - apiGroups:
  60 │   - apps
  61 │   resources:
  62 │   - deployments/scale
  63 │   - deployments
  64 │   verbs:
  65 │   - patch
  66 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-mgr' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 storage-rook-common_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────



storage-rook-common_28.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-osd' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 storage-rook-common_28.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'rook-ceph-osd' shouldn't have access to manage secrets in namespace 'rook-ceph'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 storage-rook-common_28.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 └   - update
────────────────────────────────────────



storage-rook-common_29.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_29.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - apps
  15 │   resources:
  16 │   - deployments
  17 │   verbs:
  18 │   - get
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_29.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - delete
────────────────────────────────────────



storage-rook-common_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'objectstorage-provisioner-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 storage-rook-common_3.yaml:39-48
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - secrets
  43 │   - events
  44 │   verbs:
  45 │   - get
  46 │   - delete
  47 │   - update
  48 └   - create
────────────────────────────────────────



storage-rook-common_31.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_31.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_31.yaml:25-39
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - apps
  27 │   - extensions
  28 │   resources:
  29 │   - daemonsets
  30 │   - statefulsets
  31 │   - deployments
  32 │   verbs:
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_31.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - cronjobs
  44 │   verbs:
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 storage-rook-common_31.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-system' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 storage-rook-common_31.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────



storage-rook-common_4.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-csi-nodeplugin' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 storage-rook-common_4.yaml:10-16
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   verbs:
  15 │   - get
  16 └   - list
────────────────────────────────────────



storage-rook-common_5.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 storage-rook-common_5.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 └   - watch
────────────────────────────────────────



storage-rook-common_6.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-cluster-mgmt' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 storage-rook-common_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 storage-rook-common_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 storage-rook-common_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 storage-rook-common_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────



storage-rook-common_7.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-global' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 storage-rook-common_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 storage-rook-common_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_7.yaml:46-58
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - batch
  48 │   resources:
  49 │   - jobs
  50 │   - cronjobs
  51 │   verbs:
  52 │   - get
  53 │   - list
  54 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 storage-rook-common_7.yaml:126-141
────────────────────────────────────────
 126 ┌ - apiGroups:
 127 │   - policy
 128 │   - apps
 129 │   - extensions
 130 │   resources:
 131 │   - poddisruptionbudgets
 132 │   - deployments
 133 │   - replicasets
 134 └   verbs:
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-global' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 storage-rook-common_7.yaml:22-37
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - events
  26 │   - persistentvolumes
  27 │   - persistentvolumeclaims
  28 │   - endpoints
  29 │   - services
  30 └   verbs:
  ..   
────────────────────────────────────────



storage-rook-common_8.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 storage-rook-common_8.yaml:10-20
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - persistentvolumes
  17 │   verbs:
  18 └   - get
  ..   
────────────────────────────────────────



storage-rook-operator.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rook-ceph-operator-config' in 'rook-ceph' namespace stores sensitive contents in key(s) or value(s) '{"CSIADDONS_PORT", "CSI_CEPHFS_LIVENESS_METRICS_PORT", "CSI_GRPC_TIMEOUT_SECONDS", "CSI_RBD_LIVENESS_METRICS_PORT", "ROOK_LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



storage-rook-operator_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rook-ceph-operator' of Deployment 'rook-ceph-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-rook-operator_1.yaml:14-74
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app: rook-ceph-operator
  17 │   strategy:
  18 │     type: Recreate
  19 │   replicas: 1
  20 │   template:
  21 │     metadata:
  22 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rook-ceph-operator" of deployment "rook-ceph-operator" in "rook-ceph" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rook-ceph-operator in rook-ceph namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-rook-operator_1.yaml:25-74
────────────────────────────────────────
  25 ┌       tolerations:
  26 │       - effect: NoExecute
  27 │         key: node.kubernetes.io/unreachable
  28 │         operator: Exists
  29 │         tolerationSeconds: 5
  30 │       serviceAccountName: rook-ceph-system
  31 │       containers:
  32 │       - name: rook-ceph-operator
  33 └         image: rook/ceph:v1.13.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rook-ceph-operator in deployment rook-ceph-operator (namespace: rook-ceph) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 storage-rook-operator_1.yaml:32-69
────────────────────────────────────────
  32 ┌       - name: rook-ceph-operator
  33 │         image: rook/ceph:v1.13.3
  34 │         args:
  35 │         - ceph
  36 │         - operator
  37 │         securityContext:
  38 │           runAsNonRoot: true
  39 │           runAsUser: 2016
  40 └           runAsGroup: 2016
  ..   
────────────────────────────────────────



storage-service-claim0-persistentvolumeclaim.yaml (kubernetes)
==============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-service-claim0-persistentvolumeclaim.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 100Mi
────────────────────────────────────────



storage-service-deployment.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'storage' of Deployment 'storage-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'storage' of Deployment 'storage-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'storage' of 'deployment' 'storage-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'storage' of Deployment 'storage-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'storage' of Deployment 'storage-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'storage' of Deployment 'storage-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'storage' of Deployment 'storage-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'storage' of Deployment 'storage-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'storage' of Deployment 'storage-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'storage' of Deployment 'storage-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'storage' of Deployment 'storage-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'storage' of Deployment 'storage-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'storage' of Deployment 'storage-service' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-service-deployment.yaml:12-43
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: storage-service
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "storage" of deployment "storage-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment storage-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage-service-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\Users\nadun\AppData\Local\Microsoft\WinGet\Links\kompose.exe convert
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: storage-service
  10 └   name: storage-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container storage-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-service-deployment.yaml:29-38
────────────────────────────────────────
  29 ┌         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 │           volumeMounts:
  37 │             - mountPath: /app
  38 └               name: storage-service-claim0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment storage-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage-service-deployment.yaml:28-43
────────────────────────────────────────
  28 ┌       containers:
  29 │         - image: storage-service
  30 │           name: storage
  31 │           ports:
  32 │             - containerPort: 2345
  33 │               hostPort: 2345
  34 │               protocol: TCP
  35 │           resources: {}
  36 └           volumeMounts:
  ..   
────────────────────────────────────────



storage-service-service.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-service-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     - name: "2345"
  14 │       port: 2345
  15 │       targetPort: 2345
  16 │   selector:
  17 └     io.kompose.service: storage-service
────────────────────────────────────────



storage-service.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     - name: "8081"
  14 │       port: 8081
  15 │       targetPort: 8081
  16 │   selector:
  17 └     io.kompose.service: storage
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver1.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver10.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver10.yaml:33-42
────────────────────────────────────────
  33 ┌   attachRequired: false
  34 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  35 │   podInfoOnMount: false
  36 │   requiresRepublish: false
  37 │   storageCapacity: true
  38 │   tokenRequests:
  39 │   - audience: "20"
  40 │     expirationSeconds: -8506428344202195448
  41 │   volumeLifecycleModes:
  42 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver11.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver11.yaml:36-45
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   storageCapacity: true
  41 │   tokenRequests:
  42 │   - audience: audienceValue
  43 │     expirationSeconds: 2
  44 │   volumeLifecycleModes:
  45 └   - volumeLifecycleModesValue
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver12.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver12.yaml:37-46
────────────────────────────────────────
  37 ┌   attachRequired: true
  38 │   fsGroupPolicy: fsGroupPolicyValue
  39 │   podInfoOnMount: true
  40 │   requiresRepublish: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 │     expirationSeconds: 2
  45 │   volumeLifecycleModes:
  46 └   - volumeLifecycleModesValue
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver13.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver13.yaml:34-43
────────────────────────────────────────
  34 ┌   attachRequired: false
  35 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  36 │   podInfoOnMount: false
  37 │   requiresRepublish: false
  38 │   storageCapacity: true
  39 │   tokenRequests:
  40 │   - audience: "20"
  41 │     expirationSeconds: -8506428344202195448
  42 │   volumeLifecycleModes:
  43 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver14.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver14.yaml:34-43
────────────────────────────────────────
  34 ┌   attachRequired: false
  35 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  36 │   podInfoOnMount: false
  37 │   requiresRepublish: false
  38 │   storageCapacity: true
  39 │   tokenRequests:
  40 │   - audience: "20"
  41 │     expirationSeconds: -8506428344202195448
  42 │   volumeLifecycleModes:
  43 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver15.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver15.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver16.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver16.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver17.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver17.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver18.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver18.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver19.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver19.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver2.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver2.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver20.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver20.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver21.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver21.yaml:37-46
────────────────────────────────────────
  37 ┌   attachRequired: true
  38 │   fsGroupPolicy: fsGroupPolicyValue
  39 │   podInfoOnMount: true
  40 │   requiresRepublish: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 │     expirationSeconds: 2
  45 │   volumeLifecycleModes:
  46 └   - volumeLifecycleModesValue
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver22.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver22.yaml:34-43
────────────────────────────────────────
  34 ┌   attachRequired: false
  35 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  36 │   podInfoOnMount: false
  37 │   requiresRepublish: false
  38 │   storageCapacity: true
  39 │   tokenRequests:
  40 │   - audience: "20"
  41 │     expirationSeconds: -8506428344202195448
  42 │   volumeLifecycleModes:
  43 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver23.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver23.yaml:34-43
────────────────────────────────────────
  34 ┌   attachRequired: false
  35 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  36 │   podInfoOnMount: false
  37 │   requiresRepublish: false
  38 │   storageCapacity: true
  39 │   tokenRequests:
  40 │   - audience: "20"
  41 │     expirationSeconds: -8506428344202195448
  42 │   volumeLifecycleModes:
  43 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver24.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver24.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver25.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver25.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver26.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver26.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver27.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver27.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver28.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver28.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver29.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver29.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver3.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver3.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver33.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver33.yaml:33-42
────────────────────────────────────────
  33 ┌   attachRequired: false
  34 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  35 │   podInfoOnMount: false
  36 │   requiresRepublish: false
  37 │   storageCapacity: true
  38 │   tokenRequests:
  39 │   - audience: "19"
  40 │     expirationSeconds: -8506428344202195448
  41 │   volumeLifecycleModes:
  42 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver34.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver34.yaml:33-38
────────────────────────────────────────
  33 ┌   attachRequired: false
  34 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  35 │   podInfoOnMount: false
  36 │   storageCapacity: true
  37 │   volumeLifecycleModes:
  38 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver35.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver35.yaml:33-42
────────────────────────────────────────
  33 ┌   attachRequired: false
  34 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  35 │   podInfoOnMount: false
  36 │   requiresRepublish: false
  37 │   storageCapacity: true
  38 │   tokenRequests:
  39 │   - audience: "19"
  40 │     expirationSeconds: -8506428344202195448
  41 │   volumeLifecycleModes:
  42 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver36.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver36.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver37.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver37.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver38.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver38.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver39.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver39.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver4.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver4.yaml:33-42
────────────────────────────────────────
  33 ┌   attachRequired: false
  34 │   fsGroupPolicy: /ʕVŚ(ĿȊ甞谐颋ǅSǡ
  35 │   podInfoOnMount: false
  36 │   requiresRepublish: false
  37 │   storageCapacity: true
  38 │   tokenRequests:
  39 │   - audience: "20"
  40 │     expirationSeconds: -8506428344202195448
  41 │   volumeLifecycleModes:
  42 └   - r鯹)晿<o,c鮽ort昍řČ扷5ƗǸ
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver40.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver40.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver41.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver41.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver42.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver42.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver43.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver43.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver44.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver44.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver45.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver45.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver46.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver46.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver47.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver47.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver48.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver48.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver49.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver49.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver5.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver5.yaml:36-45
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   storageCapacity: true
  41 │   tokenRequests:
  42 │   - audience: audienceValue
  43 │     expirationSeconds: 2
  44 │   volumeLifecycleModes:
  45 └   - volumeLifecycleModesValue
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver50.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver50.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver6.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver6.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver7.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver7.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver8.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver8.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSIDriver9.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSIDriver9.yaml:36-46
────────────────────────────────────────
  36 ┌   attachRequired: true
  37 │   fsGroupPolicy: fsGroupPolicyValue
  38 │   podInfoOnMount: true
  39 │   requiresRepublish: true
  40 │   seLinuxMount: true
  41 │   storageCapacity: true
  42 │   tokenRequests:
  43 │   - audience: audienceValue
  44 └     expirationSeconds: 2
  ..   
────────────────────────────────────────



storage.k8s.io.v1.CSINode.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode1.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode10.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode10.yaml:33-39
────────────────────────────────────────
  33 ┌   drivers:
  34 │   - allocatable:
  35 │       count: 1305381319
  36 │     name: "20"
  37 │     nodeID: "21"
  38 │     topologyKeys:
  39 └     - "22"
────────────────────────────────────────



storage.k8s.io.v1.CSINode11.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode11.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode12.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode12.yaml:37-43
────────────────────────────────────────
  37 ┌   drivers:
  38 │   - allocatable:
  39 │       count: 1
  40 │     name: nameValue
  41 │     nodeID: nodeIDValue
  42 │     topologyKeys:
  43 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode13.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode13.yaml:34-40
────────────────────────────────────────
  34 ┌   drivers:
  35 │   - allocatable:
  36 │       count: 1305381319
  37 │     name: "20"
  38 │     nodeID: "21"
  39 │     topologyKeys:
  40 └     - "22"
────────────────────────────────────────



storage.k8s.io.v1.CSINode14.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode14.yaml:34-40
────────────────────────────────────────
  34 ┌   drivers:
  35 │   - allocatable:
  36 │       count: 1305381319
  37 │     name: "20"
  38 │     nodeID: "21"
  39 │     topologyKeys:
  40 └     - "22"
────────────────────────────────────────



storage.k8s.io.v1.CSINode15.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode15.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode16.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode16.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode17.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode17.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode18.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode18.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode19.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode19.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode2.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode2.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode20.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode20.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode21.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode21.yaml:33-39
────────────────────────────────────────
  33 ┌   drivers:
  34 │   - allocatable:
  35 │       count: 1305381319
  36 │     name: "19"
  37 │     nodeID: "20"
  38 │     topologyKeys:
  39 └     - "21"
────────────────────────────────────────



storage.k8s.io.v1.CSINode22.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode22.yaml:37-43
────────────────────────────────────────
  37 ┌   drivers:
  38 │   - allocatable:
  39 │       count: 1
  40 │     name: nameValue
  41 │     nodeID: nodeIDValue
  42 │     topologyKeys:
  43 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode23.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode23.yaml:34-40
────────────────────────────────────────
  34 ┌   drivers:
  35 │   - allocatable:
  36 │       count: 1305381319
  37 │     name: "20"
  38 │     nodeID: "21"
  39 │     topologyKeys:
  40 └     - "22"
────────────────────────────────────────



storage.k8s.io.v1.CSINode24.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode24.yaml:34-40
────────────────────────────────────────
  34 ┌   drivers:
  35 │   - allocatable:
  36 │       count: 1305381319
  37 │     name: "20"
  38 │     nodeID: "21"
  39 │     topologyKeys:
  40 └     - "22"
────────────────────────────────────────



storage.k8s.io.v1.CSINode25.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode25.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode26.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode26.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode27.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode27.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode28.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode28.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode29.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode29.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode3.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode3.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode30.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode30.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode34.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode34.yaml:33-39
────────────────────────────────────────
  33 ┌   drivers:
  34 │   - allocatable:
  35 │       count: 1305381319
  36 │     name: "19"
  37 │     nodeID: "20"
  38 │     topologyKeys:
  39 └     - "21"
────────────────────────────────────────



storage.k8s.io.v1.CSINode35.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode35.yaml:33-39
────────────────────────────────────────
  33 ┌   drivers:
  34 │   - allocatable:
  35 │       count: 1305381319
  36 │     name: "19"
  37 │     nodeID: "20"
  38 │     topologyKeys:
  39 └     - "21"
────────────────────────────────────────



storage.k8s.io.v1.CSINode36.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode36.yaml:33-39
────────────────────────────────────────
  33 ┌   drivers:
  34 │   - allocatable:
  35 │       count: 1305381319
  36 │     name: "19"
  37 │     nodeID: "20"
  38 │     topologyKeys:
  39 └     - "21"
────────────────────────────────────────



storage.k8s.io.v1.CSINode37.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode37.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode38.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode38.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode39.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode39.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode4.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode4.yaml:33-39
────────────────────────────────────────
  33 ┌   drivers:
  34 │   - allocatable:
  35 │       count: 1305381319
  36 │     name: "20"
  37 │     nodeID: "21"
  38 │     topologyKeys:
  39 └     - "22"
────────────────────────────────────────



storage.k8s.io.v1.CSINode40.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode40.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode41.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode41.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode42.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode42.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode43.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode43.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode44.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode44.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode45.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode45.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode46.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode46.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode47.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode47.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode48.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode48.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode49.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode49.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode5.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode50.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode50.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode51.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode51.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode6.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode7.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode7.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode8.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode8.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage.k8s.io.v1.CSINode9.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage.k8s.io.v1.CSINode9.yaml:36-42
────────────────────────────────────────
  36 ┌   drivers:
  37 │   - allocatable:
  38 │       count: 1
  39 │     name: nameValue
  40 │     nodeID: nodeIDValue
  41 │     topologyKeys:
  42 └     - topologyKeysValue
────────────────────────────────────────



storage10.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage10.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   storageClassName: mongo-storage
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage100_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-c' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-c' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-c' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-c' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-c' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-c' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-c' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-c' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-c' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-c' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-c' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-c' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage100_1.yaml:8-31
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: nginx
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-c" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage100_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage100_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 └           mountPath: /usr/share/filebeat
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage100_1.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx-c
  19 │         image: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: filebeat-config-volume
  24 │           mountPath: /usr/share/filebeat
  25 └       volumes:
  ..   
────────────────────────────────────────



storage103.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage103.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 5Gi
────────────────────────────────────────



storage103_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage103_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   capacity:
  10 │     storage: 5Gi
  11 │   hostPath:
  12 │     path: /mnt/some/directory/structure
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage104.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage104.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 30Gi
  11 └   storageClassName: standard-rwo
────────────────────────────────────────



storage105.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage105.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 20Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /mnt/data
────────────────────────────────────────



storage105_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage105_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage106.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage106.yaml:6-12
────────────────────────────────────────
   6 ┌   storageClassName: admstor
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   capacity:
  10 │     storage: 2Gi
  11 │   hostPath:
  12 └     path: /data/pv01
────────────────────────────────────────



storage106_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage106_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: admstor
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



storage106_2.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'democontainer' of Pod 'storagedemo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'democontainer' of Pod 'storagedemo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'democontainer' of 'pod' 'storagedemo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'democontainer' of Pod 'storagedemo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'democontainer' of Pod 'storagedemo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'democontainer' of Pod 'storagedemo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'democontainer' of Pod 'storagedemo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'democontainer' of Pod 'storagedemo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'democontainer' of Pod 'storagedemo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'democontainer' of Pod 'storagedemo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage106_2.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 └     - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "democontainer" of pod "storagedemo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod storagedemo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 storage106_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: storagedemo
   5 │   labels:
   6 └     name: pvcdemo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod storagedemo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container storagedemo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage106_2.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 │     - containerPort: 80
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod storagedemo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 storage106_2.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: democontainer
  10 │     image: nginx:latest
  11 │     resources:
  12 │       limits:
  13 │         memory: 128Mi
  14 │         cpu: 500m
  15 │     ports:
  16 └     - containerPort: 80
  ..   
────────────────────────────────────────



storage108.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage108.yaml:10-17
────────────────────────────────────────
  10 ┌   capacity:
  11 │     storage: 1Gi
  12 │   accessModes:
  13 │   - ReadWriteOnce
  14 │   awsElasticBlockStore:
  15 │     volumeID: vol-0e74f5d1f5d4dbb78
  16 │     fsType: ext4
  17 └   storageClassName: standard
────────────────────────────────────────



storage108_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage108_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   storageClassName: standard
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



storage109.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage109.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 500Mi
────────────────────────────────────────



storage10_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage10_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mongo-storage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   capacity:
  10 │     storage: 10Gi
  11 │   hostPath:
  12 │     path: /some/other/directory
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage11.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage11.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage110.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage110.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 500Mi
────────────────────────────────────────



storage111.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage111.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 1Gi
────────────────────────────────────────



storage112.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage112.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 8Gi
────────────────────────────────────────



storage114.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage114.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: standard
   9 │   capacity:
  10 │     storage: 1Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /data/postgres
────────────────────────────────────────



storage114_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage114_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: standard
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



storage116_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage116_1.yaml:6-22
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 4Gi
   8 │   volumeMode: Filesystem
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   persistentVolumeReclaimPolicy: Retain
  12 │   storageClassName: local-storage
  13 │   hostPath:
  14 └     path: /mnt/lab-data
  ..   
────────────────────────────────────────



storage116_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage116_2.yaml:6-12
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   volumeMode: Filesystem
   9 │   resources:
  10 │     requests:
  11 │       storage: 1Gi
  12 └   storageClassName: local-storage
────────────────────────────────────────



storage117.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage117.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: rook-cephfs
   7 │   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 500Gi
────────────────────────────────────────



storage118.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage118.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: rook-cephfs
   7 │   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 500Gi
────────────────────────────────────────



storage11_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage11_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage12.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage12.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage12_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage12_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage13.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage13.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage13_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage13_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage14.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage14.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage14_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage14_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage15.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage15.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage15_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage15_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage16.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage16.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage16_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage16_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage17.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage17.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage17_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage17_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage18.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage18.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage18_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage18_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/some new/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage19.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage19.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage0
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage19_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage19_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage1
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage19_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage19_2.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage2
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage19_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage19_3.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage0
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/mongo0/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage19_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage19_4.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage1
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/mongo1/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage19_5.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage19_5.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage2
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/mongo2/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage2.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage20.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage20.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage20_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage20_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/some new/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage23.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage23.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage24.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage24.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage24_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage24_1.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 25Gi
────────────────────────────────────────



storage24_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage24_2.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 2.5Gi
────────────────────────────────────────



storage25_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage25_1.yaml:6-22
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 3Gi
   8 │   accessModes:
   9 │   - ReadWriteMany
  10 │   persistentVolumeReclaimPolicy: Retain
  11 │   storageClassName: nfs-media
  12 │   mountOptions:
  13 │   - hard
  14 └   - nolock
  ..   
────────────────────────────────────────



storage25_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage25_2.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 │       storage: 3Gi
  12 │   volumeName: nfs-media
  13 └   storageClassName: nfs-media
────────────────────────────────────────



storage25_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage25_3.yaml:6-22
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 200Mi
   8 │   accessModes:
   9 │   - ReadWriteOnce
  10 │   persistentVolumeReclaimPolicy: Retain
  11 │   storageClassName: nfs-config-youtubedl
  12 │   mountOptions:
  13 │   - hard
  14 └   - nolock
  ..   
────────────────────────────────────────



storage25_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage25_4.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 │       storage: 200Mi
  12 │   volumeName: nfs-config-youtubedl
  13 └   storageClassName: nfs-config-youtubedl
────────────────────────────────────────



storage25_5.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage25_5.yaml:7-25
────────────────────────────────────────
   7 ┌   storageClassName: ''
   8 │   capacity:
   9 │     storage: 2Ti
  10 │   accessModes:
  11 │   - ReadWriteMany
  12 │   persistentVolumeReclaimPolicy: Retain
  13 │   mountOptions:
  14 │   - dir_mode=0777
  15 └   - file_mode=0777
  ..   
────────────────────────────────────────



storage25_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage25_6.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 │       storage: 2Ti
  12 │   volumeName: smb-media
  13 └   storageClassName: ''
────────────────────────────────────────



storage26.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage26.yaml:6-22
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 200Mi
   8 │   accessModes:
   9 │   - ReadWriteOnce
  10 │   persistentVolumeReclaimPolicy: Retain
  11 │   storageClassName: nfs-config-beets
  12 │   mountOptions:
  13 │   - hard
  14 └   - nolock
  ..   
────────────────────────────────────────



storage26_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage26_1.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 │       storage: 200Mi
  12 │   volumeName: nfs-config-beets
  13 └   storageClassName: nfs-config-beets
────────────────────────────────────────



storage27.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage27.yaml:6-22
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 200Mi
   8 │   accessModes:
   9 │   - ReadWriteOnce
  10 │   persistentVolumeReclaimPolicy: Retain
  11 │   storageClassName: nfs-config-overseerr
  12 │   mountOptions:
  13 │   - hard
  14 └   - nolock
  ..   
────────────────────────────────────────



storage27_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage27_1.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 │       storage: 200Mi
  12 │   volumeName: nfs-config-overseerr
  13 └   storageClassName: nfs-config-overseerr
────────────────────────────────────────



storage28.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage28.yaml:6-22
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 500Mi
   8 │   accessModes:
   9 │   - ReadWriteOnce
  10 │   persistentVolumeReclaimPolicy: Retain
  11 │   storageClassName: nfs-data-pgadmin
  12 │   mountOptions:
  13 │   - hard
  14 └   - nolock
  ..   
────────────────────────────────────────



storage28_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage28_1.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 │       storage: 500Mi
  12 │   volumeName: nfs-data-pgadmin
  13 └   storageClassName: nfs-data-pgadmin
────────────────────────────────────────



storage3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage3.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage31.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage31.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   storageClassName: mongo-storage
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage31_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage31_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mongo-storage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   capacity:
  10 │     storage: 10Gi
  11 │   hostPath:
  12 │     path: /some/other/directory
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage32.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage32.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage32_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage32_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage33.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage33.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage33_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage33_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage34.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage34.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage34_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage34_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage35.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage35.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage35_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage35_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage36.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage36.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage36_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage36_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage37.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage37.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage37_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage37_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage38.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage38.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 10Gi
────────────────────────────────────────



storage38_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage38_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 10Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/anew/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage39.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage39.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage39_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage39_1.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/some new/directory/structure/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage3_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage3_1.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 25Gi
────────────────────────────────────────



storage3_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage3_2.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 2.5Gi
────────────────────────────────────────



storage40.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage40.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage0
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage40_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage40_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage1
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage40_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage40_2.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage2
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 20Gi
────────────────────────────────────────



storage40_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage40_3.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage0
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/mongo0/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage40_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage40_4.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage1
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/mongo1/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────



storage40_5.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 storage40_5.yaml:6-13
────────────────────────────────────────
   6 ┌   storageClassName: mylocalstorage2
   7 │   capacity:
   8 │     storage: 20Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 │     path: /mnt/mongo2/
  13 └     type: DirectoryOrCreate
────────────────────────────────────────


