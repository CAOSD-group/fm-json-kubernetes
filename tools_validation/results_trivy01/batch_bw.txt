
Report Summary

┌───────────────────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                                  Target                                   │    Type    │ Misconfigurations │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole612.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole95.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess3.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess4.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess5.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess6.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess7.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-ReadOnlyAccess8.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-admin-user.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-argocd-application-controller.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-argocd-notifications-controller.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-argocd-server.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-cilium-operator.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-cilium.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-hubble-ui.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-k8s-gateway.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-nfs-csi-provisioner-binding.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-onepassword-connect-operator.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-tailscale-operator.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding-traefik-traefik.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding.pod-reader.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding155.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding236.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding319.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding320.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding321.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding322.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding323.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding324.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding326.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding327.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding396.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding406.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding415.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding521.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding557.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding581.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding80.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_11.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_12.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_13.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_14.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_2.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_21.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoleBinding_3.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_11.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_12.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_13.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_14.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_15.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_1_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_2.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_21.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_22.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_3.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_3_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_ClusterRoleBinding.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_ClusterRoleBinding1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_ClusterRoleBinding1_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_ClusterRoleBinding2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_ClusterRoleBinding2_2.yaml                                    │ kubernetes │         4         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_ClusterRoleBinding_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_RoleBinding.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_RoleBinding1.yaml                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_RoleBinding1_1.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRole_RoleBinding_1.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ClusterRoles3.yaml                                                        │ kubernetes │         3         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-Deployment.yaml                                           │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-Deployment_1.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-Ingress.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-MYSQL-Deployment.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-MYSQL-Deployment_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-MYSQL-Deployment_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-MYSQL-Secret.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-PVC.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Employee-Service.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-Deployment.yaml                                           │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-Deployment_1.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-MYSQL-Deployment.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-MYSQL-Deployment_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-MYSQL-Deployment_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-MYSQL-Secret.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-PVC.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Identity-Service.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Ingress.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-Deployment.yaml                                           │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-Deployment_1.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-Ingress.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-MYSQL-Deployment.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-MYSQL-Deployment_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-MYSQL-Deployment_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-MYSQL-Secret.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-PVC.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Clutch-Position-Service.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Co5W.yaml                                                                 │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole60_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole61.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole61_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole636.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole636_1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole66.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole66_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole67.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole67_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole76.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole9.yaml                                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole92.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole92_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRole9_1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRoleBinding181.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRoleBinding234.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterRoleBinding370.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_admin_rolebinding.yaml                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_bootstrap_token.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip.yaml                                                           │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip1.yaml                                                          │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip1_1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip2.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip3.yaml                                                          │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip3_1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip4.yaml                                                          │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip4_1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_ip_1.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role1.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role10.yaml                                                       │ kubernetes │        12         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role2.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role3.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role4.yaml                                                        │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role5.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role7.yaml                                                        │ kubernetes │         4         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role8.yaml                                                        │ kubernetes │        13         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role9.yaml                                                        │ kubernetes │         4         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding1.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding10.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding2.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding3.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding5.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding6.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding7.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding8.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_role_binding9.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_roles.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_roles_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_serviceaccount_token.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_serviceaccount_token_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_serviceaccount_token_2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_v1_tls.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_v1_tls_2.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cluster_v1_tls_3.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole605.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole607.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole608.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole609.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole611.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole613.yaml                                                       │ kubernetes │         3         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole614.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole615.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole630.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole632.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole64.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole647.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole648.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole653.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole68.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole69.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole70.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole71.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole72.yaml                                                        │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole73.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole75.yaml                                                        │ kubernetes │         3         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole77.yaml                                                        │ kubernetes │         4         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole78.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole79.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole8.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole80.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole81.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole94.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole94_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole98.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole_binding5.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrole_binding6.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-0.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-01.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-02.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-03.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-04.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-access-cluster-admin.yaml                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-access.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-anvesh.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-attacher2.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-kcp-admin-maximal-permission-policy.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-node-provider-labeler.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-platform.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-pod-reader-sa.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-podviewer-courselabs.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-provisioner2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-tenancy-apiexport-bind.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-tenancy-maximal-permission-policy.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-tenancy-workspace-reader.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-topology-apiexport-bind.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-topology-maximal-permission-policy.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-union.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-workspace-home-create.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-workspacetype-use.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding-workspacetype-use1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding103.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding11.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding119.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding120.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding121.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding122.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding123.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding14.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding145.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding16.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding17.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding170.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding18.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding180.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding19.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding20.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding21.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding2100.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding2101.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding22.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding237.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding237_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding25.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding250.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding26.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding27.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding28.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding284.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding300.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding303.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding311.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding312.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding314.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding315.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding329.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding350.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding351.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding352.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding353.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding354.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding354_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding355.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding355_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding356.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding356_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding369.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding377.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding379.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding386.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding397.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding402.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding404.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding405.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding408.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding417.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding425.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding445.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding446.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding447.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding448.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding448_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding449.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding449_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding450.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding450_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding460.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding461.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding469.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding470.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding483.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding484.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding485.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding486.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding487.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding488.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding49.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding493.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding500.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding504.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding51.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding522.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding531.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding533.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding536.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding537.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding538.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding54.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding542.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding543.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding544.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding547.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding548.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding550.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding551.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding552.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding552_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding553.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding553_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding553_2.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding553_3.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding554.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding554_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding555.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding555_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding559.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding56.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding560.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding561.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding565.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding565_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding566.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding566_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding567.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding568.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding569.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding57.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding570.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding570_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding570_2.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding571.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding572.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding576.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding577.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding58.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding580.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding582.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding583.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding584.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding585.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding59.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding60.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding602.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding61.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding618.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding619.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding62.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding623.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding65.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding66.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding67.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding68.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding9.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding_vault-tokenreview.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebinding_vault-tokenreview1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolebing-eks-user.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolericardo.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterrolericardo_1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad.yaml                                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad1.yaml                                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad1_1.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad2.yaml                                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad2_1.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad3.yaml                                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad3_1.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad4.yaml                                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad4_1.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-bad_1.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-good.yaml                                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-good1.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-good2.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-good3.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles-good4.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles1_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles4.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles4_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles4_2.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles4_3.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles4_4.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles4_5.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterroles_1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscaler1.yaml                                                       │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role11.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role2.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role3.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role4.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role5.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role6.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role7.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role8.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_editor_role9.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role11.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role2.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role3.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role4.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role5.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role6.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role7.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role8.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterscan_viewer_role9.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterservice.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterserviceaccount.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterserviceaccount_1.yaml                                              │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterserviceaccount_2.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterset_editor_role.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clusterset_viewer_role.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clustertoken_editor_role.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ clustertoken_viewer_role.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-1.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-11.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-2.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-21.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad1_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad2.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad3.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad3_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad4.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad5.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad5_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad6.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad7.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad7_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad8.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad9.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-bad9_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-comment.yaml                                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-definition.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-demo1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-demo2.yaml                                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-demo3.yaml                                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-demo4.yaml                                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-demo5.yaml                                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-envfrom-pod.yaml                                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-envfrom-pod1.yaml                                                      │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-from-commandline.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-from-commandline2.yaml                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good1_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good1_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good2.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good2_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good2_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good3.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good3_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good3_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good4.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good4_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good4_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good5.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good5_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good5_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good6.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good6_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good6_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good7.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good7_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good7_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good8.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good8_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good8_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good9.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good9_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good9_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-good_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-keyref-pod.yaml                                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-keyref-pod1.yaml                                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-landpage.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-literal.yaml                                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-literal1.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-literal2.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-mysql.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-mysql1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-env.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-env1.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-env1_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-env1_2.yaml                                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-env_1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-env_2.yaml                                                       │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-vol.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx-vol_1.yaml                                                       │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-nginx_1.yaml                                                           │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-one-configmap.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-one.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-one1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-one2.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-one3.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-one4.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched.yaml                                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched1.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched2.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched3.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched4.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched5.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched6.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched7.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched8.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-patched9.yaml                                                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-rawstring.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role1_1.yaml                                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role1_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role1_3.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role2.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role2_1.yaml                                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role2_2.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role2_3.yaml                                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role_1.yaml                                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-role_3.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-samba.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-sample.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-shared-clusters.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-template.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-test-pod.yaml                                                          │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-to-env-all.yaml                                                        │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-to-env-selective.yaml                                                  │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-to-volume-all.yaml                                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-to-volume-selective.yaml                                               │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-two.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-two1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-two2.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-two3.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-two4.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-volume-pod.yaml                                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm-volume-pod1.yaml                                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.aggregate-responses.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.aggregate-responses1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-config.complete.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-config.complete1.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-config.envFrom.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-config.envFrom1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-config.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-config1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config.yaml                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config1.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config10.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config11.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config12.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config13.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config14.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config15.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config2.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config3.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config4.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config5.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config6.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config7.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config8.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.kiada-envoy-config9.yaml                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm.yaml                                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm1.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm100.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm102.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm103.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm106.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm107.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm108.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm11.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm110.yaml                                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm111.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm112.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm113.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm114.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm115.yaml                                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm116.yaml                                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm117.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm11_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm12.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm13.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm15.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm16.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm19.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm2.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm20.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm21.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm210.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm210_1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm22.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm23.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm24.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm26.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm27.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm28.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm29.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm29_1.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm3.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm30.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm31.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm31_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm32.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm33.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm34.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm35.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm36.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm37.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm38.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm38_1.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm39.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm4.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm40.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm40_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm41.yaml                                                                 │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm42.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm43.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm44.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm44_1.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm45.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm46.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm46_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm47.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm48.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm49.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm49_1.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm5.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm50.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm51.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm51_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm52.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm53.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm54.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm54_1.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm55.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm56.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm56_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm58.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm6.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm62.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm63.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm64.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm65.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm66.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm67.yaml                                                                 │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm68.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm7.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm72.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm73.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm74.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm75.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm76.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm77.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm78.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm79.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm8.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm80.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm81.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm82.yaml                                                                 │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm83.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm84.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm85.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm88.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm89.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm9.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm90.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm91.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm92.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm93.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm94.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm95.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm96.yaml                                                                 │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm97.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm98.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm99.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_file.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_prod.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_rtmp-config.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_rtmp-config1.yaml                                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_secret_keyref.yaml                                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_secret_keyref1.yaml                                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_secret_volume.yaml                                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_secret_volume1.yaml                                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cm_test.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmap.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmap1.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmap2.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmap3.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmap4.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmd-args.yaml                                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmfile-volume-pod.yaml                                                    │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmfile-volume-pod1.yaml                                                   │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmfile-volume-pod2.yaml                                                   │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmp-cue-sidecar.yaml                                                      │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmp-cue.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s_1.yaml                                                            │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s_3.yaml                                                            │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s_4.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s_5.yaml                                                            │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s_6.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-k8s_7.yaml                                                            │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-operator-controller-manager-metrics-service_v1_service.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cms-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmtest-pod.yaml                                                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cmtest-pod1.yaml                                                          │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnfmap.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cni-daemonset.yaml                                                        │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cni2.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cni2_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cni2_2.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cni2_3.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cni2_4.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cni2_5.yaml                                                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11_10.yaml                                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11_11.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11_12.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11_5.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11_6.yaml                                                       │ kubernetes │        11         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11_7.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.11_9.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1_10.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1_11.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1_12.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1_5.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1_6.yaml                                                        │ kubernetes │        11         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1_7.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.22.1_9.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1_11.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1_12.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1_13.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1_14.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1_7.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1_8.yaml                                                        │ kubernetes │         9         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnpg-1.24.1_9.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnwo.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cnwo_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroach.yaml                                                            │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroach_1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset-clean.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset-clean_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset-clean_2.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset-clean_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset-clean_4.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset-clean_6.yaml                                      │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset1_1.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset1_3.yaml                                           │ kubernetes │        34         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_1.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_2.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_3.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_4.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_5.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_6.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_7.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_8.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset2_9.yaml                                           │ kubernetes │        30         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset3.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset3_1.yaml                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset3_2.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset3_3.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset3_4.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset3_5.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset3_6.yaml                                           │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset4.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset4_1.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset4_3.yaml                                           │ kubernetes │        34         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset_1.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cockroachdb-statefulset_3.yaml                                            │ kubernetes │        34         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ code.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ code_server.yaml                                                          │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ code_server_1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ code_volume.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ codegen.yaml                                                              │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ codegen1.yaml                                                             │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ codegen1_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ codegen_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coder-ingress.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coder-logstream-kube-role.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coder-logstream-kube-role_1.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coderd-role.yaml                                                          │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coderd-role_1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coderuser.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coderuser_1.yaml                                                          │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-deploy.yaml                                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-ingress.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-minion.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-nodeport.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-service-deployment.yaml                                            │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-service-deployment_1.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-shop-web-loadbalancer.yaml                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-shop-web-v1-deployment.yaml                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coffee-shop-web-v2-deployment.yaml                                        │ kubernetes │        17         │
└───────────────────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


ClusterRoleBinding-admin-user.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 ClusterRoleBinding-admin-user.yaml:5
────────────────────────────────────────
   5 [   name: admin-user
────────────────────────────────────────



ClusterRoleBinding319.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 ClusterRoleBinding319.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



ClusterRoleBinding320.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 ClusterRoleBinding320.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



ClusterRole_12.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'secret-reader' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ClusterRole_12.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   #
   9 │   # at the HTTP level, the name of the resource for accessing Secret
  10 │   # objects is "secrets"
  11 │   resources: ["secrets"]
  12 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



ClusterRole_13.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'allowdeletepodcr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 ClusterRole_13.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ""
   9 │   resources:
  10 │   - pods
  11 │   verbs:
  12 └   - delete
────────────────────────────────────────



ClusterRole_14.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'pod-reader-clusterwide' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ClusterRole_14.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources: ["pods", "secrets"]
   8 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



ClusterRole_22.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'mon-endpoints' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 ClusterRole_22.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ""
  18 │   resources:
  19 │   - pods
  20 │   - pods/log
  21 │   verbs:
  22 │   - list
  23 └   - update
────────────────────────────────────────



ClusterRole_ClusterRoleBinding2.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'reader' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ClusterRole_ClusterRoleBinding2.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - deployments
  10 │   - configmaps
  11 │   - pods
  12 │   - secrets
  13 │   - services
  14 └   verbs:
  ..   
────────────────────────────────────────



ClusterRole_ClusterRoleBinding2_2.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'writer' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ClusterRole_ClusterRoleBinding2_2.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - deployments
  10 │   - configmaps
  11 │   - pods
  12 │   - secrets
  13 │   - services
  14 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'writer' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 ClusterRole_ClusterRoleBinding2_2.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - deployments
  10 │   - configmaps
  11 │   - pods
  12 │   - secrets
  13 │   - services
  14 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'writer' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ClusterRole_ClusterRoleBinding2_2.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - deployments
  10 │   - configmaps
  11 │   - pods
  12 │   - secrets
  13 │   - services
  14 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'writer' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 ClusterRole_ClusterRoleBinding2_2.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - deployments
  10 │   - configmaps
  11 │   - pods
  12 │   - secrets
  13 │   - services
  14 └   verbs:
  ..   
────────────────────────────────────────



ClusterRole_RoleBinding1.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0050 (CRITICAL): ClusterRole 'role-grantor' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 ClusterRole_RoleBinding1.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - rbac.authorization.k8s.io
   8 │   resources:
   9 │   - rolebindings
  10 │   verbs:
  11 └   - create
────────────────────────────────────────



ClusterRoles3.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'argo-custom-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 ClusterRoles3.yaml:8-29
────────────────────────────────────────
   8 ┌   - apiGroups:
   9 │       - "*"
  10 │     resources:
  11 │       - cronjobs
  12 │       - pods
  13 │       - services
  14 │       - deployments
  15 │       - statefulsets
  16 └       - daemonsets
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argo-custom-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ClusterRoles3.yaml:8-29
────────────────────────────────────────
   8 ┌   - apiGroups:
   9 │       - "*"
  10 │     resources:
  11 │       - cronjobs
  12 │       - pods
  13 │       - services
  14 │       - deployments
  15 │       - statefulsets
  16 └       - daemonsets
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'argo-custom-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 ClusterRoles3.yaml:8-29
────────────────────────────────────────
   8 ┌   - apiGroups:
   9 │       - "*"
  10 │     resources:
  11 │       - cronjobs
  12 │       - pods
  13 │       - services
  14 │       - deployments
  15 │       - statefulsets
  16 └       - daemonsets
  ..   
────────────────────────────────────────



Clutch-Employee-Deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'clutch-employee' of 'deployment' 'clutch-employee-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'clutch-employee' of Deployment 'clutch-employee-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "clutch-employee" of deployment "clutch-employee-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment clutch-employee-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: clutch-employee-deployment
   5 │   labels:
   6 └     app: clutch-employee
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment clutch-employee-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container clutch-employee-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment clutch-employee-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container clutch-employee in deployment clutch-employee-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Clutch-Employee-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-employee
  19 │         image: dragg54/clutch-employee:14.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



Clutch-Employee-MYSQL-Deployment.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'clutch-emp-mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'clutch-emp-mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "clutch-emp-mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment clutch-emp-mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:4
────────────────────────────────────────
   4 [   name: clutch-emp-mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container clutch-emp-mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment clutch-emp-mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Employee-MYSQL-Deployment.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-emp-mysql-secret
  23 └               key: password
  ..   
────────────────────────────────────────



Clutch-Identity-Deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'clutch-identity' of 'deployment' 'clutch-identity-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'clutch-identity' of Deployment 'clutch-identity-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "clutch-identity" of deployment "clutch-identity-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment clutch-identity-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: clutch-identity-deployment
   5 │   labels:
   6 └     app: clutch-identity
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment clutch-identity-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container clutch-identity-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment clutch-identity-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container clutch-identity in deployment clutch-identity-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Clutch-Identity-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-identity
  19 │         image: dragg54/clutch-identity:5.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



Clutch-Identity-MYSQL-Deployment.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'clutch-idty-mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'clutch-idty-mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "clutch-idty-mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment clutch-idty-mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:4
────────────────────────────────────────
   4 [   name: clutch-idty-mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container clutch-idty-mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment clutch-idty-mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Identity-MYSQL-Deployment.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-idty-mysql-secret
  23 └               key: password
  ..   
────────────────────────────────────────



Clutch-Position-Deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'clutch-position' of Deployment 'clutch-position-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'clutch-position' of 'deployment' 'clutch-position-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'clutch-position' of Deployment 'clutch-position-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "clutch-position" of deployment "clutch-position-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment clutch-position-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: clutch-position-deployment
   5 │   labels:
   6 └     app: clutch-position
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment clutch-position-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container clutch-position-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment clutch-position-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container clutch-position in deployment clutch-position-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Clutch-Position-Deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: clutch-position
  19 │         image: dragg54/clutch-position:7.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



Clutch-Position-MYSQL-Deployment.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'clutch-pos-mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'clutch-pos-mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "clutch-pos-mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment clutch-pos-mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:4
────────────────────────────────────────
   4 [   name: clutch-pos-mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container clutch-pos-mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 │               key: password
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment clutch-pos-mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Clutch-Position-MYSQL-Deployment.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:latest
  18 │         env:
  19 │         - name: MYSQL_ROOT_PASSWORD
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: clutch-pos-mysql-secret
  23 └               key: password
  ..   
────────────────────────────────────────



Co5W.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 7, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'order-service-app' of Deployment 'order-service-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'order-service-app' of Deployment 'order-service-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'order-service-app' of 'deployment' 'order-service-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'order-service-app' of Deployment 'order-service-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'order-service-app' of Deployment 'order-service-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'order-service-app' of Deployment 'order-service-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'order-service-app' of Deployment 'order-service-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'order-service-app' of Deployment 'order-service-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'order-service-app' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 Co5W.yaml:9-74
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: order-service-app
  12 │   replicas: 1
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxSurge: 25%
  16 │       maxUnavailable: 25%
  17 └     type: RollingUpdate
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "order-service-app" of deployment "order-service-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment order-service-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Co5W.yaml:4-7
────────────────────────────────────────
   4 ┌   name: order-service-app
   5 │   namespace: default
   6 │   labels:
   7 └     app: order-service-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment order-service-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order-service-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Co5W.yaml:24-69
────────────────────────────────────────
  24 ┌       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 │           limits:
  32 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment order-service-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Co5W.yaml:23-74
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: order-service-app
  25 │         image: myjob:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         resources:
  28 │           requests:
  29 │             cpu: 100m
  30 │             memory: 100Mi
  31 └           limits:
  ..   
────────────────────────────────────────



clusterRole61.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterRole61.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



clusterRole636.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterRole636.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



clusterRole66.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterRole66.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



clusterRole67.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterRole67.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



clusterRole76.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterRole76.yaml:7-14
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs: ["get", "list", "watch"]
────────────────────────────────────────



clusterRole9.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterRole9.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



clusterRole92.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterRole92.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes
  10 │   - nodes/proxy
  11 │   - services
  12 │   - endpoints
  13 │   - pods
  14 └   verbs:
  ..   
────────────────────────────────────────



cluster_admin_rolebinding.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-patcher' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 cluster_admin_rolebinding.yaml:4
────────────────────────────────────────
   4 [   name: cluster-patcher
────────────────────────────────────────



cluster_ip.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cluster_ip.yaml:4
────────────────────────────────────────
   4 [   name: my-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



cluster_ip1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cluster_ip1.yaml:4
────────────────────────────────────────
   4 [   name: my-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



cluster_ip3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cluster_ip3.yaml:4
────────────────────────────────────────
   4 [   name: my-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip3.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



cluster_ip4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Deployment 'my-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cluster_ip4.yaml:4
────────────────────────────────────────
   4 [   name: my-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cluster_ip4.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-container
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



cluster_role1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 cluster_role1.yaml:15-25
────────────────────────────────────────
  15 ┌   - apiGroups:
  16 │       - ""
  17 │     resources:
  18 │       - nodes/metrics
  19 │       - nodes/spec
  20 │       - nodes/stats
  21 │       - nodes/proxy
  22 │       - nodes/pods
  23 └       - nodes/healthz
  ..   
────────────────────────────────────────



cluster_role10.yaml (kubernetes)
================================
Tests: 120 (SUCCESSES: 108, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 0, MEDIUM: 6, HIGH: 2, CRITICAL: 4)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ibm-cp4a-pfs-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cluster_role10.yaml:120-131
────────────────────────────────────────
 120 ┌ - apiGroups:
 121 │   - ""
 122 │   resources:
 123 │   - secrets
 124 │   verbs:
 125 │   - create
 126 │   - delete
 127 │   - get
 128 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cluster_role10.yaml:65-70
────────────────────────────────────────
  65 ┌ - apiGroups:
  66 │   - batch
  67 │   resources:
  68 │   - jobs
  69 │   verbs:
  70 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role10.yaml:21-32
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - apps
  23 │   resources:
  24 │   - deployments
  25 │   verbs:
  26 │   - create
  27 │   - delete
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role10.yaml:33-44
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - apps
  35 │   resources:
  36 │   - replicasets
  37 │   verbs:
  38 │   - create
  39 │   - delete
  40 │   - get
  41 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role10.yaml:45-56
────────────────────────────────────────
  45 ┌ - apiGroups:
  46 │   - apps
  47 │   resources:
  48 │   - statefulsets
  49 │   verbs:
  50 │   - create
  51 │   - delete
  52 │   - get
  53 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role10.yaml:65-70
────────────────────────────────────────
  65 ┌ - apiGroups:
  66 │   - batch
  67 │   resources:
  68 │   - jobs
  69 │   verbs:
  70 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role10.yaml:108-119
────────────────────────────────────────
 108 ┌ - apiGroups:
 109 │   - ""
 110 │   resources:
 111 │   - pods
 112 │   verbs:
 113 │   - create
 114 │   - delete
 115 │   - get
 116 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cluster_role10.yaml:83-95
────────────────────────────────────────
  83 ┌ - apiGroups:
  84 │   - ""
  85 │   resources:
  86 │   - configmaps
  87 │   - persistentvolumeclaims
  88 │   verbs:
  89 │   - create
  90 │   - delete
  91 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cluster_role10.yaml:236-247
────────────────────────────────────────
 236 ┌ - apiGroups:
 237 │   - rbac.authorization.k8s.io
 238 │   resources:
 239 │   - rolebindings
 240 │   verbs:
 241 │   - create
 242 │   - delete
 243 │   - get
 244 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cluster_role10.yaml:248-259
────────────────────────────────────────
 248 ┌ - apiGroups:
 249 │   - rbac.authorization.k8s.io
 250 │   resources:
 251 │   - roles
 252 │   verbs:
 253 │   - create
 254 │   - delete
 255 │   - get
 256 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role10.yaml:144-155
────────────────────────────────────────
 144 ┌ - apiGroups:
 145 │   - ""
 146 │   resources:
 147 │   - services
 148 │   verbs:
 149 │   - create
 150 │   - delete
 151 │   - get
 152 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ibm-cp4a-pfs-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role10.yaml:180-192
────────────────────────────────────────
 180 ┌ - apiGroups:
 181 │   - networking.k8s.io
 182 │   resources:
 183 │   - ingresses
 184 │   - networkpolicies
 185 │   verbs:
 186 │   - create
 187 │   - delete
 188 └   - get
 ...   
────────────────────────────────────────



cluster_role2.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 cluster_role2.yaml:15-25
────────────────────────────────────────
  15 ┌   - apiGroups:
  16 │       - ""
  17 │     resources:
  18 │       - nodes/metrics
  19 │       - nodes/spec
  20 │       - nodes/stats
  21 │       - nodes/proxy
  22 │       - nodes/pods
  23 └       - nodes/healthz
  ..   
────────────────────────────────────────



cluster_role4.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'mongodb-kubernetes-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cluster_role4.yaml:6-19
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ""
   8 │   resources:
   9 │   - services
  10 │   - configmaps
  11 │   - secrets
  12 │   verbs:
  13 │   - create
  14 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mongodb-kubernetes-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role4.yaml:20-31
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - apps
  22 │   resources:
  23 │   - statefulsets
  24 │   verbs:
  25 │   - create
  26 │   - delete
  27 │   - get
  28 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mongodb-kubernetes-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role4.yaml:32-42
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ""
  34 │   resources:
  35 │   - pods
  36 │   verbs:
  37 │   - delete
  38 │   - get
  39 │   - list
  40 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'mongodb-kubernetes-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cluster_role4.yaml:6-19
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ""
   8 │   resources:
   9 │   - services
  10 │   - configmaps
  11 │   - secrets
  12 │   verbs:
  13 │   - create
  14 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'mongodb-kubernetes-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role4.yaml:6-19
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ""
   8 │   resources:
   9 │   - services
  10 │   - configmaps
  11 │   - secrets
  12 │   verbs:
  13 │   - create
  14 └   - delete
  ..   
────────────────────────────────────────



cluster_role5.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'all-permission-on-secrets' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cluster_role5.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups: [""]
   9 │   #
  10 │   # at the HTTP level, the name of the resource for accessing Secret
  11 │   # objects is "secrets"
  12 │   resources: ["secrets"]
  13 └   verbs: ["create", "delete", "get", "watch", "list"]
────────────────────────────────────────



cluster_role7.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ibm-cp4a-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cluster_role7.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ""
  50 │   resources:
  51 │   - configmaps
  52 │   - secrets
  53 │   - persistentvolumes
  54 │   verbs:
  55 │   - get
  56 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-cp4a-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role7.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ""
  62 │   resources:
  63 │   - pods
  64 │   - namespaces
  65 │   verbs:
  66 │   - get
  67 │   - list
  68 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'ibm-cp4a-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cluster_role7.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ""
  50 │   resources:
  51 │   - configmaps
  52 │   - secrets
  53 │   - persistentvolumes
  54 │   verbs:
  55 │   - get
  56 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ibm-cp4a-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role7.yaml:31-41
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - extensions
  33 │   resources:
  34 │   - podsecuritypolicies
  35 │   - ingresses
  36 │   verbs:
  37 │   - get
  38 │   - list
  39 └   - update
  ..   
────────────────────────────────────────



cluster_role8.yaml (kubernetes)
===============================
Tests: 121 (SUCCESSES: 108, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 6, HIGH: 3, CRITICAL: 4)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ibm-workflow-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cluster_role8.yaml:72-89
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - ""
  74 │   resources:
  75 │   - configmaps
  76 │   - events
  77 │   - persistentvolumeclaims
  78 │   - pods
  79 │   - secrets
  80 └   - serviceaccounts
  ..   
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'ibm-workflow-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cluster_role8.yaml:90-106
────────────────────────────────────────
  90 ┌ - apiGroups:
  91 │   - ""
  92 │   resources:
  93 │   - events
  94 │   - persistentvolumeclaims
  95 │   - pods
  96 │   - secrets
  97 │   - serviceaccounts
  98 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cluster_role8.yaml:42-47
────────────────────────────────────────
  42 ┌ - apiGroups:
  43 │   - batch
  44 │   resources:
  45 │   - jobs
  46 │   verbs:
  47 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-workflow-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role8.yaml:90-106
────────────────────────────────────────
  90 ┌ - apiGroups:
  91 │   - ""
  92 │   resources:
  93 │   - events
  94 │   - persistentvolumeclaims
  95 │   - pods
  96 │   - secrets
  97 │   - serviceaccounts
  98 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-workflow-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role8.yaml:72-89
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - ""
  74 │   resources:
  75 │   - configmaps
  76 │   - events
  77 │   - persistentvolumeclaims
  78 │   - pods
  79 │   - secrets
  80 └   - serviceaccounts
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-workflow-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role8.yaml:42-47
────────────────────────────────────────
  42 ┌ - apiGroups:
  43 │   - batch
  44 │   resources:
  45 │   - jobs
  46 │   verbs:
  47 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-workflow-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role8.yaml:22-35
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - apps
  24 │   resources:
  25 │   - deployments
  26 │   - replicasets
  27 │   - statefulsets
  28 │   verbs:
  29 │   - create
  30 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'ibm-workflow-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cluster_role8.yaml:72-89
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - ""
  74 │   resources:
  75 │   - configmaps
  76 │   - events
  77 │   - persistentvolumeclaims
  78 │   - pods
  79 │   - secrets
  80 └   - serviceaccounts
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'ibm-workflow-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cluster_role8.yaml:60-71
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ""
  62 │   resources:
  63 │   - configmaps
  64 │   verbs:
  65 │   - create
  66 │   - delete
  67 │   - get
  68 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'ibm-workflow-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cluster_role8.yaml:289-301
────────────────────────────────────────
 289 ┌ - apiGroups:
 290 │   - rbac.authorization.k8s.io
 291 │   resources:
 292 │   - rolebindings
 293 │   - roles
 294 │   verbs:
 295 │   - create
 296 │   - delete
 297 └   - get
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ibm-workflow-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role8.yaml:244-256
────────────────────────────────────────
 244 ┌ - apiGroups:
 245 │   - networking.k8s.io
 246 │   resources:
 247 │   - ingresses
 248 │   - networkpolicies
 249 │   verbs:
 250 │   - create
 251 │   - delete
 252 └   - get
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ibm-workflow-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role8.yaml:90-106
────────────────────────────────────────
  90 ┌ - apiGroups:
  91 │   - ""
  92 │   resources:
  93 │   - events
  94 │   - persistentvolumeclaims
  95 │   - pods
  96 │   - secrets
  97 │   - serviceaccounts
  98 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ibm-workflow-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role8.yaml:72-89
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - ""
  74 │   resources:
  75 │   - configmaps
  76 │   - events
  77 │   - persistentvolumeclaims
  78 │   - pods
  79 │   - secrets
  80 └   - serviceaccounts
  ..   
────────────────────────────────────────



cluster_role9.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ibm-content-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cluster_role9.yaml:47-58
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - configmaps
  51 │   - secrets
  52 │   - persistentvolumes
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'ibm-content-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cluster_role9.yaml:59-66
────────────────────────────────────────
  59 ┌ - apiGroups:
  60 │   - ""
  61 │   resources:
  62 │   - pods
  63 │   verbs:
  64 │   - get
  65 │   - list
  66 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'ibm-content-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cluster_role9.yaml:47-58
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ""
  49 │   resources:
  50 │   - configmaps
  51 │   - secrets
  52 │   - persistentvolumes
  53 │   verbs:
  54 │   - get
  55 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'ibm-content-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cluster_role9.yaml:30-40
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - extensions
  32 │   resources:
  33 │   - podsecuritypolicies
  34 │   - ingresses
  35 │   verbs:
  36 │   - get
  37 │   - list
  38 └   - update
  ..   
────────────────────────────────────────



clusterrole607.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 clusterrole607.yaml:6-8
────────────────────────────────────────
   6 ┌   - apiGroups: ['*']
   7 │     resources: ['*']
   8 └     verbs: ['*']
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'frp-operator' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole607.yaml:6-8
────────────────────────────────────────
   6 ┌   - apiGroups: ['*']
   7 │     resources: ['*']
   8 └     verbs: ['*']
────────────────────────────────────────



clusterrole608.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 clusterrole608.yaml:9-11
────────────────────────────────────────
   9 ┌   - apiGroups: ["*"]
  10 │     resources: ["*"]
  11 └     verbs: ["*"]
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kube-secrets-exporter-cr' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole608.yaml:9-11
────────────────────────────────────────
   9 ┌   - apiGroups: ["*"]
  10 │     resources: ["*"]
  11 └     verbs: ["*"]
────────────────────────────────────────



clusterrole609.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrole609.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



clusterrole611.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 clusterrole611.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'jx-boot-job' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole611.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



clusterrole613.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterrole613.yaml:14-16
────────────────────────────────────────
  14 ┌   - apiGroups: [""]
  15 │     resources: ["pods", "services"]
  16 └     verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dragonfly-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterrole613.yaml:17-19
────────────────────────────────────────
  17 ┌   - apiGroups: ["apps"]
  18 │     resources: ["statefulsets"]
  19 └     verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dragonfly-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 clusterrole613.yaml:14-16
────────────────────────────────────────
  14 ┌   - apiGroups: [""]
  15 │     resources: ["pods", "services"]
  16 └     verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
────────────────────────────────────────



clusterrole614.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'gatus' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterrole614.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: [""]
   9 │     resources: ["configmaps", "secrets"]
  10 └     verbs: ["get", "watch", "list"]
────────────────────────────────────────



clusterrole630.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 clusterrole630.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: ["*"]
   7 │   resources: ["*"]
   8 └   verbs: ["*"]
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'home-idp' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole630.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: ["*"]
   7 │   resources: ["*"]
   8 └   verbs: ["*"]
────────────────────────────────────────



clusterrole64.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 clusterrole64.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'jx-boot-job' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole64.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



clusterrole647.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dummysite-controller-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterrole647.yaml:7-11
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   # at the HTTP level, the name of the resource for accessing Pod
   9 │   # objects is "pods"
  10 │   resources: ["pods"]
  11 └   verbs: ["get", "list", "delete"]
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dummysite-controller-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterrole647.yaml:12-16
────────────────────────────────────────
  12 ┌ - apiGroups: ["batch"]
  13 │   # at the HTTP level, the name of the resource for accessing Job
  14 │   # objects is "jobs"
  15 │   resources: ["jobs"]
  16 └   verbs: ["get", "list", "watch", "create", "delete"]
────────────────────────────────────────



clusterrole648.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 clusterrole648.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'jx-boot-job' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole648.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



clusterrole653.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterrole653.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources: ["pods", "nodes", "nodes/proxy", "services", "endpoints"]
   8 └   verbs: ["get", "list", "watch"]
────────────────────────────────────────



clusterrole68.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'traefik-ingress-traefik' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterrole68.yaml:40-47
────────────────────────────────────────
  40 ┌   - apiGroups:
  41 │       - ""
  42 │     resources:
  43 │       - secrets
  44 │     verbs:
  45 │       - get
  46 │       - list
  47 └       - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'traefik-ingress-traefik' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterrole68.yaml:82-92
────────────────────────────────────────
  82 ┌   - apiGroups:
  83 │       - ""
  84 │     resources:
  85 │       - namespaces
  86 │       - secrets
  87 │       - services
  88 │       - configmaps
  89 │     verbs:
  90 └       - get
  ..   
────────────────────────────────────────



clusterrole70.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-prometheus-stack-plutono-clusterrole' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterrole70.yaml:18-20
────────────────────────────────────────
  18 ┌   - apiGroups: [""] # "" indicates the core API group
  19 │     resources: ["configmaps", "secrets"]
  20 └     verbs: ["get", "watch", "list"]
────────────────────────────────────────



clusterrole72.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-prometheus-stack-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterrole72.yaml:51-57
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ""
  53 │   resources:
  54 │   - configmaps
  55 │   - secrets
  56 │   verbs:
  57 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 clusterrole72.yaml:45-50
────────────────────────────────────────
  45 ┌ - apiGroups:
  46 │   - apps
  47 │   resources:
  48 │   - statefulsets
  49 │   verbs:
  50 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 clusterrole72.yaml:51-57
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ""
  53 │   resources:
  54 │   - configmaps
  55 │   - secrets
  56 │   verbs:
  57 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kube-prometheus-stack-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterrole72.yaml:45-50
────────────────────────────────────────
  45 ┌ - apiGroups:
  46 │   - apps
  47 │   resources:
  48 │   - statefulsets
  49 │   verbs:
  50 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'kube-prometheus-stack-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterrole72.yaml:58-64
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ""
  60 │   resources:
  61 │   - pods
  62 │   verbs:
  63 │   - list
  64 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'kube-prometheus-stack-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 clusterrole72.yaml:51-57
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ""
  53 │   resources:
  54 │   - configmaps
  55 │   - secrets
  56 │   verbs:
  57 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'kube-prometheus-stack-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 clusterrole72.yaml:65-75
────────────────────────────────────────
  65 ┌ - apiGroups:
  66 │   - ""
  67 │   resources:
  68 │   - services
  69 │   - services/finalizers
  70 │   - endpoints
  71 │   verbs:
  72 │   - get
  73 └   - create
  ..   
────────────────────────────────────────



clusterrole73.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'kube-prometheus-stack-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 clusterrole73.yaml:24-31
────────────────────────────────────────
  24 ┌   - apiGroups:
  25 │       - admissionregistration.k8s.io
  26 │     resources:
  27 │       - validatingwebhookconfigurations
  28 │       - mutatingwebhookconfigurations
  29 │     verbs:
  30 │       - get
  31 └       - update
────────────────────────────────────────



clusterrole75.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 3)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kubequery-cluster-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole75.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: ["", "admissionregistration.k8s.io", "apps", "autoscaling", "batch", "events.k8s.io", "networking.k8s.io", "policy", "rbac.authorization.k8s.io", "storage.k8s.io", "apiextensions.k8s.io", "templates.gatekeeper.sh", "constraints.gatekeeper.sh"]
   7 │   resources: ["*"]
   8 └   verbs: ["get", "watch"]
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubequery-cluster-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole75.yaml:18-20
────────────────────────────────────────
  18 ┌ - apiGroups: ["constraints.gatekeeper.sh"]
  19 │   resources: ["*"]
  20 └   verbs: ["create", "patch", "update", "watch"]
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubequery-cluster-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole75.yaml:21-23
────────────────────────────────────────
  21 ┌ - apiGroups: ["*"]
  22 │   resources: ["*"]
  23 └   verbs: ["list"]
────────────────────────────────────────



clusterrole77.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterrole77.yaml:15-17
────────────────────────────────────────
  15 ┌   - apiGroups: [""]
  16 │     resources: ["nodes/proxy"]
  17 └     verbs: ["get"]
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'otel-ci-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 clusterrole77.yaml:18-20
────────────────────────────────────────
  18 ┌   - apiGroups: [""]
  19 │     resources: ["nodes/stats", "configmaps", "events"]
  20 └     verbs: ["create", "get"]
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'otel-ci-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 clusterrole77.yaml:21-23
────────────────────────────────────────
  21 ┌   - apiGroups: [""]
  22 │     resources: ["configmaps"]
  23 └     verbs: ["update"]
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'otel-ci-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 clusterrole77.yaml:24-27
────────────────────────────────────────
  24 ┌   - apiGroups: [""]
  25 │     resources: ["configmaps"]
  26 │     resourceNames: ["otel-container-insight-clusterleader"]
  27 └     verbs: ["get","update", "create"]
────────────────────────────────────────



clusterrole78.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 clusterrole78.yaml:6-17
────────────────────────────────────────
   6 ┌   - apiGroups:
   7 │       - ""
   8 │     resources:
   9 │       - nodes
  10 │       - nodes/proxy
  11 │       - services
  12 │       - endpoints
  13 │       - pods
  14 └     verbs:
  ..   
────────────────────────────────────────



clusterrole79.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 clusterrole79.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'jx-boot-job' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterrole79.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - '*'
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



clusterrole81.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'secret-access-cr' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterrole81.yaml:6-12
────────────────────────────────────────
   6 ┌   - apiGroups:
   7 │       - ""
   8 │     resources:
   9 │       - secrets
  10 │     verbs:
  11 │       - get
  12 └       - list
────────────────────────────────────────



clusterrole98.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'secret-access-cr' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterrole98.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ""
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 └   - list
────────────────────────────────────────



clusterrolebinding-access-cluster-admin.yaml (kubernetes)
=========================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'faros-controllers-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding-access-cluster-admin.yaml:4
────────────────────────────────────────
   4 [   name: faros-controllers-cluster-admin
────────────────────────────────────────



clusterrolebinding2100.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'sa-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding2100.yaml:4-5
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 └   name: sa-cluster-admin
────────────────────────────────────────



clusterrolebinding2101.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'sa-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding2101.yaml:4-5
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 └   name: sa-cluster-admin
────────────────────────────────────────



clusterrolebinding250.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'testadminclusterbinding' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding250.yaml:4
────────────────────────────────────────
   4 [   name: testadminclusterbinding
────────────────────────────────────────



clusterrolebinding460.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cloudcasa-io' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding460.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     component: kubeagent-backup-helper
   6 └   name: cloudcasa-io
────────────────────────────────────────



clusterrolebinding470.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'user-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding470.yaml:5-6
────────────────────────────────────────
   5 ┌   name: user-admin
   6 └   namespace: default
────────────────────────────────────────



clusterrolebinding493.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user-kubernetes-dashboard' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding493.yaml:4
────────────────────────────────────────
   4 [   name: admin-user-kubernetes-dashboard
────────────────────────────────────────



clusterrolebinding559.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'dynamic_parameters-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding559.yaml:4
────────────────────────────────────────
   4 [   name: dynamic_parameters-admin
────────────────────────────────────────



clusterrolebinding560.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'dynamic_parameters-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 clusterrolebinding560.yaml:4
────────────────────────────────────────
   4 [   name: dynamic_parameters-admin
────────────────────────────────────────



clusterroles-bad.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad1_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad1_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad2.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad2_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad2_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad3.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad3_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad3_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad4.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad4_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad4_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-bad_1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-bad02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-bad_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



clusterroles-good.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-good01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-good.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources: ["secrets"]
   8 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



clusterroles-good1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-good01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-good1.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources: ["secrets"]
   8 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



clusterroles-good2.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-good01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-good2.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources: ["secrets"]
   8 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



clusterroles-good3.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-good01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-good3.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources: ["secrets"]
   8 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



clusterroles-good4.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crole-good01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterroles-good4.yaml:6-8
────────────────────────────────────────
   6 ┌ - apiGroups: [""]
   7 │   resources: ["secrets"]
   8 └   verbs: ["get", "watch", "list"]
────────────────────────────────────────



clusterroles4.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aggregate-antrea-policies-edit' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 clusterroles4.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - crd.antrea.io
  12 │   resources:
  13 │   - clusternetworkpolicies
  14 │   - networkpolicies
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
  ..   
────────────────────────────────────────



clusterscaler1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pause' of Deployment 'overprovisioning' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pause' of Deployment 'overprovisioning' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pause' of 'deployment' 'overprovisioning' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pause' of Deployment 'overprovisioning' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pause' of Deployment 'overprovisioning' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pause' of Deployment 'overprovisioning' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pause' of Deployment 'overprovisioning' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pause' of Deployment 'overprovisioning' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pause' of Deployment 'overprovisioning' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pause" of deployment "overprovisioning" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment overprovisioning in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 clusterscaler1.yaml:6-7
────────────────────────────────────────
   6 ┌   name: overprovisioning 
   7 └   namespace: default 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container overprovisioning in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment overprovisioning in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 clusterscaler1.yaml:18-25
────────────────────────────────────────
  18 ┌       priorityClassName: overprovisioning 
  19 │       containers: 
  20 │       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pause in deployment overprovisioning (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 clusterscaler1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: pause 
  21 │         image: registry.k8s.io/pause:3.6  #k8s image for a pause pod
  22 │         resources: 
  23 │           requests: 
  24 │             cpu: '3400m' #set to occupy most of the spare node, only allowing system pods to be in the same node
  25 └             memory: '6G' #similar to cpu requests, set high to keep the spare node occupied in the start state
────────────────────────────────────────



clusterserviceaccount_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'jenkins' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 clusterserviceaccount_1.yaml:40-49
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - secrets
  44 │   verbs:
  45 │   - get
  46 │   - create
  47 │   - delete
  48 │   - list
  49 └   - watch
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'jenkins' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 clusterserviceaccount_1.yaml:64-69
────────────────────────────────────────
  64 ┌ - apiGroups:
  65 │   - ''
  66 │   resources:
  67 │   - '*'
  68 │   verbs:
  69 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'jenkins' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterserviceaccount_1.yaml:8-19
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - pods
  12 │   verbs:
  13 │   - create
  14 │   - delete
  15 │   - get
  16 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'jenkins' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 clusterserviceaccount_1.yaml:50-63
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - extensions
  52 │   - apps
  53 │   resources:
  54 │   - replicasets
  55 │   - deployments
  56 │   verbs:
  57 │   - create
  58 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'jenkins' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 clusterserviceaccount_1.yaml:20-31
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - pods/exec
  24 │   verbs:
  25 │   - create
  26 │   - delete
  27 │   - get
  28 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'jenkins' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 clusterserviceaccount_1.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - networking.k8s.io
  72 │   resources:
  73 │   - ingresses
  74 │   verbs:
  75 └   - '*'
────────────────────────────────────────



cm-comment.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'feature-flags' in 'tekton-pipelines' namespace stores secrets in key(s) or value(s) '{"require-git-ssh-secret-known-hosts"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm-demo2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'testcm1' of Pod 'testcm1-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'testcm1' of Pod 'testcm1-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'testcm1' of 'pod' 'testcm1-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'testcm1' of Pod 'testcm1-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'testcm1' of Pod 'testcm1-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'testcm1' of Pod 'testcm1-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'testcm1' of Pod 'testcm1-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'testcm1' of Pod 'testcm1-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'testcm1' of Pod 'testcm1-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'testcm1' of Pod 'testcm1-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'testcm1' of Pod 'testcm1-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'testcm1' of Pod 'testcm1-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "testcm1" of pod "testcm1-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod testcm1-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-demo2.yaml:4
────────────────────────────────────────
   4 [   name: testcm1-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container testcm1-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo2.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod testcm1-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: testcm1
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 └           name: cm-demo4
  ..   
────────────────────────────────────────



cm-demo3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'testcm2' of Pod 'testcm2-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'testcm2' of Pod 'testcm2-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'testcm2' of 'pod' 'testcm2-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'testcm2' of Pod 'testcm2-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'testcm2' of Pod 'testcm2-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'testcm2' of Pod 'testcm2-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'testcm2' of Pod 'testcm2-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'testcm2' of Pod 'testcm2-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'testcm2' of Pod 'testcm2-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'testcm2' of Pod 'testcm2-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'testcm2' of Pod 'testcm2-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'testcm2' of Pod 'testcm2-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "testcm2" of pod "testcm2-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod testcm2-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-demo3.yaml:4
────────────────────────────────────────
   4 [   name: testcm2-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container testcm2-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo3.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: cm-demo4
  15 └           key: db.host
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod testcm2-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo3.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: testcm2
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "echo $(DB_HOST) $(DB_PORT)"]
  10 │     env:
  11 │     - name: DB_HOST
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 └           name: cm-demo4
  ..   
────────────────────────────────────────



cm-demo4.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'testcm4' of Pod 'testcm4-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'testcm4' of Pod 'testcm4-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'testcm4' of 'pod' 'testcm4-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'testcm4' of Pod 'testcm4-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'testcm4' of Pod 'testcm4-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'testcm4' of Pod 'testcm4-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'testcm4' of Pod 'testcm4-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'testcm4' of Pod 'testcm4-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'testcm4' of Pod 'testcm4-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'testcm4' of Pod 'testcm4-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'testcm4' of Pod 'testcm4-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'testcm4' of Pod 'testcm4-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "testcm4" of pod "testcm4-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod testcm4-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-demo4.yaml:4
────────────────────────────────────────
   4 [   name: testcm4-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container testcm4-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo4.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod testcm4-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo4.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: testcm4
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/redis.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 │       mountPath: /etc/config
  13 │   volumes:
  14 └   - name: config-volume
  ..   
────────────────────────────────────────



cm-demo5.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'testcm5' of Pod 'testcm5-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'testcm5' of Pod 'testcm5-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'testcm5' of 'pod' 'testcm5-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'testcm5' of Pod 'testcm5-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'testcm5' of Pod 'testcm5-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'testcm5' of Pod 'testcm5-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'testcm5' of Pod 'testcm5-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'testcm5' of Pod 'testcm5-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'testcm5' of Pod 'testcm5-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'testcm5' of Pod 'testcm5-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'testcm5' of Pod 'testcm5-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'testcm5' of Pod 'testcm5-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "testcm5" of pod "testcm5-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod testcm5-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-demo5.yaml:4
────────────────────────────────────────
   4 [   name: testcm5-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container testcm5-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo5.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod testcm5-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-demo5.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: testcm5
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c", "cat /etc/config/path/to/mysql.conf"]
  10 │     volumeMounts:
  11 │     - name: config-volume
  12 │       mountPath: /etc/config
  13 │   volumes:
  14 └   - name: config-volume
  ..   
────────────────────────────────────────



cm-envfrom-pod.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cm-envfrom-pod' of 'pod' 'cm-envfrom-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cm-envfrom-pod" of pod "cm-envfrom-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-envfrom-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-envfrom-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: cm-envfrom-pod
   6 └   name: cm-envfrom-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-envfrom-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-envfrom-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-envfrom-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-envfrom-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-envfrom-pod.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: cm-envfrom-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: k8s-env
────────────────────────────────────────



cm-envfrom-pod1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cm-envfrom-pod' of 'pod' 'cm-envfrom-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cm-envfrom-pod' of Pod 'cm-envfrom-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cm-envfrom-pod" of pod "cm-envfrom-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-envfrom-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-envfrom-pod1.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: cm-envfrom-pod
   7 └   name: cm-envfrom-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-envfrom-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-envfrom-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-envfrom-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-envfrom-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-envfrom-pod1.yaml:9-19
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx:1.25.3-alpine
  11 │     name: cm-envfrom-pod
  12 │     ports:
  13 │     - containerPort: 80
  14 │     envFrom:
  15 │     - configMapRef:
  16 │         name: k8s-env
  17 └     resources: {}
  ..   
────────────────────────────────────────



cm-from-commandline.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm-from-commandline' in 'test' namespace stores sensitive contents in key(s) or value(s) '{"keyA", "keyB", "keyc"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-from-commandline2.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm-from-commandline2' in 'test' namespace stores sensitive contents in key(s) or value(s) '{"keyA", "keyB", "keyc"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-keyref-pod.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cm-keyref-container' of 'pod' 'cm-keyref-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cm-keyref-container" of pod "cm-keyref-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-keyref-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-keyref-pod.yaml:4
────────────────────────────────────────
   4 [   name: cm-keyref-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-keyref-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-keyref-pod.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-keyref-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-keyref-pod.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────



cm-keyref-pod1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cm-keyref-container' of 'pod' 'cm-keyref-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cm-keyref-container' of Pod 'cm-keyref-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cm-keyref-container" of pod "cm-keyref-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-keyref-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-keyref-pod1.yaml:4
────────────────────────────────────────
   4 [   name: cm-keyref-pod 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-keyref-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-keyref-pod1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-keyref-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-keyref-pod1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: cm-keyref-container
   8 │       image: busybox
   9 │       command: [ "/bin/sh", "-c", "env" ]
  10 │       env:
  11 │         - name: RUNTIME_METHOD
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: k8s-env
  15 └               key: runtime
────────────────────────────────────────



cm-literal.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'service-ansible' in 'configmap' namespace stores secrets in key(s) or value(s) '{"aws_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm-literal1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'service-ansible' in 'configmap' namespace stores secrets in key(s) or value(s) '{"aws_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm-literal2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'service-ansible' in 'configmap' namespace stores secrets in key(s) or value(s) '{"aws_token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm-nginx-env1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-nginx-env1_2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-nginx-env1_2.yaml:4-8
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kubernetes.io/change-cause: annotations
   6 │   name: deployment-test
   7 │   labels:
   8 └     app: front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx-env1_2.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 │               key: db_host
  28 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx-env1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: nginx
  21 │         image: nginx:alpine
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: vars
  27 └               key: db_host
  ..   
────────────────────────────────────────



cm-nginx-env_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-nginx-env_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: deployment-test
   5 │   labels:
   6 └     app: front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx-env_2.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 │               key: db_host
  26 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx-env_2.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:alpine
  20 │         env:
  21 │         - name: DB_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: vars
  25 └               key: db_host
  ..   
────────────────────────────────────────



cm-nginx-vol_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-nginx-vol_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: deployment-test
   5 │   labels:
   6 └     app: front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx-vol_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx-vol_1.yaml:17-29
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:alpine
  20 │         volumeMounts:
  21 │         - name: nginx-vol
  22 │           mountPath: /etc/nginx/conf.d
  23 │       volumes:
  24 │       - name: nginx-vol
  25 └         configMap:
  ..   
────────────────────────────────────────



cm-nginx.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-nginx_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-nginx_1.yaml:4-8
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kubernetes.io/change-cause: annotations
   6 │   name: deployment-test
   7 │   labels:
   8 └     app: front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx_1.yaml:20-24
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 └           mountPath: /etc/nginx/conf.d
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-nginx_1.yaml:19-28
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: nginx
  21 │         image: nginx:alpine
  22 │         volumeMounts:
  23 │         - name: nginx-volume
  24 │           mountPath: /etc/nginx/conf.d
  25 │       volumes:
  26 │       - name: nginx-volume
  27 │         configMap:
  28 └           name: nginx-config
────────────────────────────────────────



cm-patched.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched4.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched8.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-patched9.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-role1_1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cm-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cm-role1_1.yaml:7-16
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 │   - list
  15 │   - patch
  16 └   - delete
────────────────────────────────────────



cm-role2_1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cm-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cm-role2_1.yaml:7-16
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 │   - list
  15 │   - patch
  16 └   - delete
────────────────────────────────────────



cm-role2_3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'vars' in 'dev' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm-role_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cm-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cm-role_1.yaml:7-16
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 │   - list
  15 │   - patch
  16 └   - delete
────────────────────────────────────────



cm-test-pod.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test1' of Pod 'test1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test1' of Pod 'test1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test1' of 'pod' 'test1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test1' of Pod 'test1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test1' of Pod 'test1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test1' of Pod 'test1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test1' of Pod 'test1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test1' of Pod 'test1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test1' of Pod 'test1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test1' of Pod 'test1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test1' of Pod 'test1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test1' of Pod 'test1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test1" of pod "test1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod test1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-test-pod.yaml:4
────────────────────────────────────────
   4 [   name: test1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-test-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod test1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-test-pod.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test1
   8 │     image: cirros
   9 │     command: ["/bin/sh", "-c", "env"]
  10 │     envFrom:
  11 │       - configMapRef:
  12 └           name: variables
────────────────────────────────────────



cm-to-env-all.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'cm-to-env-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'cm-to-env-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'cm-to-env-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'cm-to-env-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'cm-to-env-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'cm-to-env-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'cm-to-env-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'cm-to-env-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'cm-to-env-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'cm-to-env-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'cm-to-env-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'cm-to-env-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "cm-to-env-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-to-env-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-to-env-all.yaml:4
────────────────────────────────────────
   4 [   name: cm-to-env-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-to-env-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-to-env-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-env-all.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in pod cm-to-env-all (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cm-to-env-all.yaml:7-14
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       envFrom: ## 컨피그맵에 정의된 모든 키-값 쌍을 가져와서 환경변수로 설정
  11 │         - configMapRef:
  12 │             name: log-level-configmap ## LOG_LEVEL=DEBUG
  13 │         - configMapRef:
  14 └             name: config-k8s ## k8s=kubernetes, container=docker
────────────────────────────────────────



cm-to-env-selective.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'cm-to-env-selective' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'cm-to-env-selective' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'cm-to-env-selective' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'cm-to-env-selective' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'cm-to-env-selective' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'cm-to-env-selective' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'cm-to-env-selective' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'cm-to-env-selective' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'cm-to-env-selective' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'cm-to-env-selective' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'cm-to-env-selective' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'cm-to-env-selective' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "cm-to-env-selective" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-to-env-selective in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-to-env-selective.yaml:4
────────────────────────────────────────
   4 [   name: cm-to-env-selective
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-to-env-selective in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-to-env-selective in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-env-selective.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 └               name: log-level-configmap ## 참조할 컨피그맵의 이름
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in pod cm-to-env-selective (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cm-to-env-selective.yaml:7-20
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       env:
  11 │         - name: NEW_LOG_LEVEL ## 새롭게 설정할 환경변수의 이름
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: log-level-configmap ## 참조할 컨피그맵의 이름
  15 └               key: LOG_LEVEL ## 가져올 데이터의 키
  ..   
────────────────────────────────────────



cm-to-volume-all.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'cm-to-volume-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'cm-to-volume-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "cm-to-volume-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-to-volume-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-to-volume-all.yaml:4
────────────────────────────────────────
   4 [   name: cm-to-volume-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-to-volume-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-to-volume-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-volume-all.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 │           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
  13 │   volumes:
  14 └     - name: configmap-volume ## (1) 컨피그맵 볼륨을 정의
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in pod cm-to-volume-all (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cm-to-volume-all.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────



cm-to-volume-selective.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'cm-to-volume-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'cm-to-volume-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'cm-to-volume-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "cm-to-volume-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-to-volume-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-to-volume-selective.yaml:4
────────────────────────────────────────
   4 [   name: cm-to-volume-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-to-volume-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-to-volume-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-to-volume-selective.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 │           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
  13 │   volumes:
  14 └     - name: configmap-volume ## (1) 컨피그맵 볼륨을 정의
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in pod cm-to-volume-all (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cm-to-volume-selective.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: my-container
   8 │       image: docker.io/busybox
   9 │       args: ["tail", "-f", "/dev/null"]
  10 │       volumeMounts:
  11 │         - name: configmap-volume ## (1)에서 정의한 컨피그맵 볼륨의 이름
  12 └           mountPath: /etc/config ## 컨피그맵 데이터가 위치할 경로
────────────────────────────────────────



cm-volume-pod.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cm-volume-pod' of 'pod' 'cm-volume-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cm-volume-pod" of pod "cm-volume-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-volume-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-volume-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: cm-volume-pod
   6 └   name: cm-volume-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-volume-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-volume-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-volume-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-volume-pod.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 │       mountPath: /etc/config
  16 └   volumes:
  ..   
────────────────────────────────────────



cm-volume-pod1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cm-volume-pod' of 'pod' 'cm-volume-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cm-volume-pod' of Pod 'cm-volume-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cm-volume-pod" of pod "cm-volume-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-volume-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm-volume-pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: cm-volume-pod
   6 └   name: cm-volume-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-volume-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-volume-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-volume-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm-volume-pod1.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: cm-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: cm-volume
  15 │       mountPath: /etc/config
  16 └   volumes:
  ..   
────────────────────────────────────────



cm.kiada-envoy-config.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config1.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config10.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config11.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config12.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config13.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config14.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config15.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config3.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config4.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config5.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config6.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config7.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config8.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm.kiada-envoy-config9.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kiada-envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"              private_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm11.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'oauth2-proxy-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"pass_access_token "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm110.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bootcamp-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm115.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rust-cm' in 'rust-server' namespace stores sensitive contents in key(s) or value(s) '{"RUST_APP_PORT", "RUST_RCON_PORT", "RUST_SERVER_MAXPLAYERS", "RUST_SERVER_SAVE_INTERVAL", "RUST_SERVER_SEED", "RUST_SERVER_WORLDSIZE"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 cm115.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



cm116.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'environ-map-1' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"XYZ1"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm15.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'registry-env' in 'jenkins-stack' namespace stores sensitive contents in key(s) or value(s) '{"REGISTRY_HTTP_TLS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm27.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm29.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm29_1.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmone' in 'foo' namespace stores sensitive contents in key(s) or value(s) '{"keyone"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm36.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm38.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm38_1.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmone' in 'foo' namespace stores sensitive contents in key(s) or value(s) '{"keyone"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm41.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"      pwd", "    const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm42.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm44.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm44_1.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmone' in 'foo' namespace stores sensitive contents in key(s) or value(s) '{"keyone"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm47.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm49.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm49_1.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmone' in 'foo' namespace stores sensitive contents in key(s) or value(s) '{"keyone"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm52.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm01' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm54.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmtwo' in 'bar' namespace stores sensitive contents in key(s) or value(s) '{"keytwo"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm54_1.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cmone' in 'foo' namespace stores sensitive contents in key(s) or value(s) '{"keyone"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm58.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"db-port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm66.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"db-port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm67.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm67.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm67.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm67.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 │         mountPath: /etc/config
  13 │   volumes:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



cm82.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm82.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm82.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm82.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox
   9 │       command: [ "/bin/sh","-c","cat /etc/config/redis.properties" ]
  10 │       volumeMounts:
  11 │       - name: config-volume
  12 │         mountPath: /etc/config
  13 │   volumes:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



cm85.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'db-secrets-credentials' in 'django-app' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm89.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'common-conf' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"NFS_PGID", "NFS_PUID", "PGID", "PUID"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm96.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'artifact-repositories' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    key", "minio"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'artifact-repositories' in 'default' namespace stores secrets in key(s) or value(s) '{"  accessKeySecret", "  secretKeySecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm_file.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-cm-file' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"db-port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cm_rtmp-config.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'rtmp-server-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  pass"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm_rtmp-config1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'rtmp-server-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  pass"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cm_secret_keyref.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'env-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'env-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'env-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'env-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "env-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm_secret_keyref.yaml:4
────────────────────────────────────────
   4 [   name: env-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_keyref.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_keyref.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 └         valueFrom:
  ..   
────────────────────────────────────────



cm_secret_keyref1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'env-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'env-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'env-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'env-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "env-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm_secret_keyref1.yaml:4
────────────────────────────────────────
   4 [   name: env-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_keyref1.yaml:7-22
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 │         valueFrom:
  15 └           configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_keyref1.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do echo configmap is: $CONFIGMAPVAR and Secret is $SECRETVAR; sleep 10; done']
  10 │     # command: ['sh', '-c','echo Name is $CONFIGMAPVAR and Secret is $SECRETVAR && sleep 3600']
  11 │ 
  12 │     env:
  13 │       - name: CONFIGMAPVAR
  14 └         valueFrom:
  ..   
────────────────────────────────────────



cm_secret_volume.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'env-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'env-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'env-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'env-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "env-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm_secret_volume.yaml:4
────────────────────────────────────────
   4 [   name: env-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_volume.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
  ..   
────────────────────────────────────────



cm_secret_volume1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'env-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'env-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'env-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'env-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "env-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cm_secret_volume1.yaml:4
────────────────────────────────────────
   4 [   name: env-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cm_secret_volume1.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'while true; do sleep 10; done']
  10 │     volumeMounts:
  11 │     - name: configmap-volume
  12 │       mountPath: /k8s/config/configmap
  13 │     - name: secret-volume
  14 └       mountPath: /k8s/secret/secret
  ..   
────────────────────────────────────────



cmd-args.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-container' of Pod 'hello-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-container' of Pod 'hello-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-container' of 'pod' 'hello-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-container' of Pod 'hello-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-container' of Pod 'hello-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-container' of Pod 'hello-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-container' of Pod 'hello-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-container' of Pod 'hello-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-container' of Pod 'hello-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-container' of Pod 'hello-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-container' of Pod 'hello-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-container' of Pod 'hello-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-container" of pod "hello-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cmd-args.yaml:4
────────────────────────────────────────
   4 [   name: hello-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmd-args.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmd-args.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: hello-container
   8 │     image: busybox
   9 └     command: ['sh', '-c', 'echo Hello Krowdy! && sleep 3600']
────────────────────────────────────────



cmfile-volume-pod.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cmfile-volume-pod' of 'pod' 'cmfile-volume-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cmfile-volume-pod' of Pod 'cmfile-volume-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cmfile-volume-pod" of pod "cmfile-volume-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cmfile-volume-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cmfile-volume-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: cmfile-volume-pod
   6 └   name: cmfile-volume-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cmfile-volume-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cmfile-volume-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmfile-volume-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cmfile-volume-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmfile-volume-pod.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 │       mountPath: /opt/redis/config
  16 └   volumes:
  ..   
────────────────────────────────────────



cmfile-volume-pod1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cmfile-volume-pod' of 'pod' 'cm-file-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cmfile-volume-pod' of Pod 'cm-file-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cmfile-volume-pod" of pod "cm-file-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-file-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cmfile-volume-pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: cm-file-pod
   6 └   name: cm-file-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-file-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-file-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmfile-volume-pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 └       mountPath: /opt/redis/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-file-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmfile-volume-pod1.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod
  11 │     ports:
  12 │     - containerPort: 80
  13 │     volumeMounts:
  14 │     - name: redis-volume
  15 │       mountPath: /opt/redis/config
  16 └   volumes:
  ..   
────────────────────────────────────────



cmfile-volume-pod2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cmfile-volume-pod2' of 'pod' 'cm-volume-pod2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cmfile-volume-pod2' of Pod 'cm-volume-pod2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cmfile-volume-pod2" of pod "cm-volume-pod2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-volume-pod2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cmfile-volume-pod2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: cm-volume2-pod2
   6 └   name: cm-volume-pod2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-volume-pod2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-volume-pod2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmfile-volume-pod2.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-volume-pod2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmfile-volume-pod2.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx:1.25.3-alpine
  10 │     name: cmfile-volume-pod2
  11 │     ports:
  12 │     - containerPort: 80
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: game-config-env-file
────────────────────────────────────────



cmp-cue-sidecar.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cmp' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cmp' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cmp' of 'deployment' 'argocd-repo-server' in 'argocd' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cmp' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cmp' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cmp' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cmp' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cmp' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cmp' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cmp' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cmp' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cmp" of deployment "argocd-repo-server" in "argocd" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in argocd namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmp-cue-sidecar.yaml:9-32
────────────────────────────────────────
   9 ┌       containers:
  10 │         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cmp in deployment argocd-repo-server (namespace: argocd) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cmp-cue-sidecar.yaml:10-26
────────────────────────────────────────
  10 ┌         - name: cmp
  11 │           securityContext:
  12 │             runAsNonRoot: true
  13 │             runAsUser: 999
  14 │           image: skywalker25/cuelang:latest
  15 │           imagePullPolicy: IfNotPresent
  16 │           command: [/var/run/argocd/argocd-cmp-server]
  17 │           volumeMounts:
  18 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────



cms-k8s_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of Deployment 'backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of Deployment 'backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'deployment' 'backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'backend' of Deployment 'backend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend' of Deployment 'backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of Deployment 'backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of deployment "backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment backend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cms-k8s_1.yaml:4
────────────────────────────────────────
   4 [   name: backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_1.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 │           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  24 └         - name: CLIENT_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment backend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_1.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: backend
  17 │         image: projektcms-v01-backend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3001
  21 │         env:
  22 │         - name: CLIENT_ID
  23 └           value: d579615447442-5fitnfqgobfsnqsh7h1tfvjj0ncelfqb.apps.googleusercontent.com
  ..   
────────────────────────────────────────



cms-k8s_3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend' of Deployment 'frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cms-k8s_3.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_3.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: frontend
  17 │         image: projektcms-v01-frontend:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: REACT_APP_BACKEND_URL
  23 └           value: http://backend:3001
────────────────────────────────────────



cms-k8s_5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'database' of Deployment 'database' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'database' of Deployment 'database' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'database' of 'deployment' 'database' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'database' of Deployment 'database' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'database' of Deployment 'database' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'database' of Deployment 'database' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'database' of Deployment 'database' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'database' of Deployment 'database' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'database' of Deployment 'database' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'database' of Deployment 'database' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'database' of Deployment 'database' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'database' of Deployment 'database' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "database" of deployment "database" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment database in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cms-k8s_5.yaml:4
────────────────────────────────────────
   4 [   name: database
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container database in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment database in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_5.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: database
  17 │         image: projektcms-v01-database:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ALLOW_EMPTY_PASSWORD
  23 └           value: 'true'
────────────────────────────────────────



cms-k8s_7.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'proxy' of Deployment 'proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'proxy' of 'deployment' 'proxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'proxy' of Deployment 'proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'proxy' of Deployment 'proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'proxy' of Deployment 'proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'proxy' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 cms-k8s_7.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: proxy
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: proxy
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "proxy" of deployment "proxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cms-k8s_7.yaml:4
────────────────────────────────────────
   4 [   name: proxy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment proxy in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container proxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_7.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 │         - name: nginx-certs
  24 └           mountPath: /etc/nginx/certs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment proxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cms-k8s_7.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: proxy
  17 │         image: nginx:alpine
  18 │         ports:
  19 │         - containerPort: 443
  20 │         volumeMounts:
  21 │         - name: nginx-conf
  22 │           mountPath: /etc/nginx/nginx.conf
  23 └         - name: nginx-certs
  ..   
────────────────────────────────────────



cmtest-pod.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cmtest-pod' of 'pod' 'cmtest-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cmtest-pod" of pod "cmtest-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cmtest-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cmtest-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: cmtest-pod
   6 └   name: cmtest-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cmtest-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cmtest-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmtest-pod.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cmtest-pod in pod cmtest-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cmtest-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - image: dbgurum/mynode:fc.2.0
  10 │     name: cmtest-pod
  11 │     ports:
  12 │     - containerPort: 8000
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: api-key  
────────────────────────────────────────



cmtest-pod1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cmtest-pod' of 'pod' 'cmtest-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cmtest-pod' of Pod 'cmtest-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cmtest-pod" of pod "cmtest-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cmtest-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cmtest-pod1.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: cmtest-pod
   7 └   name: cmtest-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cmtest-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cmtest-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cmtest-pod1.yaml:9-19
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cmtest-pod in pod cmtest-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cmtest-pod1.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: dbgurum/mynode:fc.2.0
  11 │     name: cmtest-pod
  12 │     ports:
  13 │     - containerPort: 8000
  14 │     resources: {}
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: api-key
────────────────────────────────────────



cnfmap.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



cni-daemonset.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demystifying-cni' of 'daemonset' 'demystifying-cni' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'demystifying-cni' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 cni-daemonset.yaml:7-41
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: demystifying-cni
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: demystifying-cni
  14 │     spec:
  15 └       # running in hostNetwork avoids dependency on CNI (solve chicken-egg problem) 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demystifying-cni' of DaemonSet 'demystifying-cni' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'demystifying-cni' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 cni-daemonset.yaml:7-41
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: demystifying-cni
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: demystifying-cni
  14 │     spec:
  15 └       # running in hostNetwork avoids dependency on CNI (solve chicken-egg problem) 
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'demystifying-cni' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 cni-daemonset.yaml:7-41
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: demystifying-cni
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: demystifying-cni
  14 │     spec:
  15 └       # running in hostNetwork avoids dependency on CNI (solve chicken-egg problem) 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demystifying-cni" of daemonset "demystifying-cni" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container demystifying-cni in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cni-daemonset.yaml:27-33
────────────────────────────────────────
  27 ┌       - name: demystifying-cni
  28 │         image: demystifying-cni:0.0.1
  29 │         volumeMounts:
  30 │         - name: netd
  31 │           mountPath: /etc/cni/net.d
  32 │         - name: cnibin
  33 └           mountPath: /opt/cni/bin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset demystifying-cni in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cni-daemonset.yaml:16-41
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       tolerations:
  18 │       # ensure to schedule on nodes that are not ready (nodes without a CNI are not ready)
  19 │       - key: node.kubernetes.io/not-ready
  20 │         operator: Exists
  21 │         effect: NoSchedule
  22 │       # ensure to schedule on control-plane nodes
  23 │       - key: node-role.kubernetes.io/control-plane
  24 └         operator: Exists
  ..   
────────────────────────────────────────



cni2_5.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'install-cni' of DaemonSet 'linkerd-cni' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'install-cni' of 'daemonset' 'linkerd-cni' in 'linkerd-cni' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'install-cni' of DaemonSet 'linkerd-cni' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'linkerd-cni' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 cni2_5.yaml:12-85
────────────────────────────────────────
  12 ┌   revisionHistoryLimit: 10
  13 │   selector:
  14 │     matchLabels:
  15 │       k8s-app: linkerd-cni
  16 │   updateStrategy:
  17 │     type: RollingUpdate
  18 │     rollingUpdate:
  19 │       maxUnavailable: 1
  20 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container install-cni in daemonset linkerd-cni (namespace: linkerd-cni) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cni2_5.yaml:38-75
────────────────────────────────────────
  38 ┌       - name: install-cni
  39 │         image: cr.l5d.io/linkerd/cni-plugin:v1.5.0
  40 │         imagePullPolicy: null
  41 │         env:
  42 │         - name: DEST_CNI_NET_DIR
  43 │           valueFrom:
  44 │             configMapKeyRef:
  45 │               name: linkerd-cni-config
  46 └               key: dest_cni_net_dir
  ..   
────────────────────────────────────────



cnpg-1.22.11_10.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0125 (MEDIUM): Container manager in deployment cnpg-controller-manager (namespace: cnpg-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cnpg-1.22.11_10.yaml:19-76
────────────────────────────────────────
  19 ┌       - args:
  20 │         - controller
  21 │         - --leader-elect
  22 │         - --config-map-name=cnpg-controller-manager-config
  23 │         - --secret-name=cnpg-controller-manager-config
  24 │         - --webhook-port=9443
  25 │         command:
  26 │         - /manager
  27 └         env:
  ..   
────────────────────────────────────────



cnpg-1.22.11_6.yaml (kubernetes)
================================
Tests: 118 (SUCCESSES: 107, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 2, CRITICAL: 5)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cnpg-manager' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:88-99
────────────────────────────────────────
  88 ┌ - apiGroups:
  89 │   - ''
  90 │   resources:
  91 │   - secrets
  92 │   verbs:
  93 │   - create
  94 │   - delete
  95 │   - get
  96 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:60-70
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resources:
  63 │   - pods
  64 │   verbs:
  65 │   - create
  66 │   - delete
  67 │   - get
  68 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:157-168
────────────────────────────────────────
 157 ┌ - apiGroups:
 158 │   - apps
 159 │   resources:
 160 │   - deployments
 161 │   verbs:
 162 │   - create
 163 │   - delete
 164 │   - get
 165 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:169-179
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - batch
 171 │   resources:
 172 │   - jobs
 173 │   verbs:
 174 │   - create
 175 │   - delete
 176 │   - get
 177 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   verbs:
  11 │   - create
  12 │   - delete
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:305-315
────────────────────────────────────────
 305 ┌ - apiGroups:
 306 │   - rbac.authorization.k8s.io
 307 │   resources:
 308 │   - rolebindings
 309 │   verbs:
 310 │   - create
 311 │   - get
 312 │   - list
 313 └   - patch
 ...   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:316-326
────────────────────────────────────────
 316 ┌ - apiGroups:
 317 │   - rbac.authorization.k8s.io
 318 │   resources:
 319 │   - roles
 320 │   verbs:
 321 │   - create
 322 │   - get
 323 │   - list
 324 └   - patch
 ...   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'cnpg-manager' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:71-81
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - pods/exec
  75 │   verbs:
  76 │   - create
  77 │   - delete
  78 │   - get
  79 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cnpg-manager' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:119-130
────────────────────────────────────────
 119 ┌ - apiGroups:
 120 │   - ''
 121 │   resources:
 122 │   - services
 123 │   verbs:
 124 │   - create
 125 │   - delete
 126 │   - get
 127 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:131-139
────────────────────────────────────────
 131 ┌ - apiGroups:
 132 │   - admissionregistration.k8s.io
 133 │   resources:
 134 │   - mutatingwebhookconfigurations
 135 │   verbs:
 136 │   - get
 137 │   - list
 138 │   - patch
 139 └   - update
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cnpg-1.22.11_6.yaml:140-148
────────────────────────────────────────
 140 ┌ - apiGroups:
 141 │   - admissionregistration.k8s.io
 142 │   resources:
 143 │   - validatingwebhookconfigurations
 144 │   verbs:
 145 │   - get
 146 │   - list
 147 │   - patch
 148 └   - update
────────────────────────────────────────



cnpg-1.22.1_10.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0125 (MEDIUM): Container manager in deployment cnpg-controller-manager (namespace: cnpg-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cnpg-1.22.1_10.yaml:19-76
────────────────────────────────────────
  19 ┌       - args:
  20 │         - controller
  21 │         - --leader-elect
  22 │         - --config-map-name=cnpg-controller-manager-config
  23 │         - --secret-name=cnpg-controller-manager-config
  24 │         - --webhook-port=9443
  25 │         command:
  26 │         - /manager
  27 └         env:
  ..   
────────────────────────────────────────



cnpg-1.22.1_6.yaml (kubernetes)
===============================
Tests: 118 (SUCCESSES: 107, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 2, CRITICAL: 5)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cnpg-manager' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:88-99
────────────────────────────────────────
  88 ┌ - apiGroups:
  89 │   - ''
  90 │   resources:
  91 │   - secrets
  92 │   verbs:
  93 │   - create
  94 │   - delete
  95 │   - get
  96 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:60-70
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resources:
  63 │   - pods
  64 │   verbs:
  65 │   - create
  66 │   - delete
  67 │   - get
  68 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:157-168
────────────────────────────────────────
 157 ┌ - apiGroups:
 158 │   - apps
 159 │   resources:
 160 │   - deployments
 161 │   verbs:
 162 │   - create
 163 │   - delete
 164 │   - get
 165 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:169-179
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - batch
 171 │   resources:
 172 │   - jobs
 173 │   verbs:
 174 │   - create
 175 │   - delete
 176 │   - get
 177 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   verbs:
  11 │   - create
  12 │   - delete
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:305-315
────────────────────────────────────────
 305 ┌ - apiGroups:
 306 │   - rbac.authorization.k8s.io
 307 │   resources:
 308 │   - rolebindings
 309 │   verbs:
 310 │   - create
 311 │   - get
 312 │   - list
 313 └   - patch
 ...   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:316-326
────────────────────────────────────────
 316 ┌ - apiGroups:
 317 │   - rbac.authorization.k8s.io
 318 │   resources:
 319 │   - roles
 320 │   verbs:
 321 │   - create
 322 │   - get
 323 │   - list
 324 └   - patch
 ...   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'cnpg-manager' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:71-81
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - ''
  73 │   resources:
  74 │   - pods/exec
  75 │   verbs:
  76 │   - create
  77 │   - delete
  78 │   - get
  79 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cnpg-manager' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:119-130
────────────────────────────────────────
 119 ┌ - apiGroups:
 120 │   - ''
 121 │   resources:
 122 │   - services
 123 │   verbs:
 124 │   - create
 125 │   - delete
 126 │   - get
 127 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:131-139
────────────────────────────────────────
 131 ┌ - apiGroups:
 132 │   - admissionregistration.k8s.io
 133 │   resources:
 134 │   - mutatingwebhookconfigurations
 135 │   verbs:
 136 │   - get
 137 │   - list
 138 │   - patch
 139 └   - update
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cnpg-1.22.1_6.yaml:140-148
────────────────────────────────────────
 140 ┌ - apiGroups:
 141 │   - admissionregistration.k8s.io
 142 │   resources:
 143 │   - validatingwebhookconfigurations
 144 │   verbs:
 145 │   - get
 146 │   - list
 147 │   - patch
 148 └   - update
────────────────────────────────────────



cnpg-1.24.1_12.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0125 (MEDIUM): Container manager in deployment cnpg-controller-manager (namespace: cnpg-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cnpg-1.24.1_12.yaml:19-76
────────────────────────────────────────
  19 ┌       - args:
  20 │         - controller
  21 │         - --leader-elect
  22 │         - --config-map-name=cnpg-controller-manager-config
  23 │         - --secret-name=cnpg-controller-manager-config
  24 │         - --webhook-port=9443
  25 │         command:
  26 │         - /manager
  27 └         env:
  ..   
────────────────────────────────────────



cnpg-1.24.1_8.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 107, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 2, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cnpg-manager' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:6-19
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   - services
  12 │   verbs:
  13 │   - create
  14 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:44-56
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - ''
  46 │   resources:
  47 │   - persistentvolumeclaims
  48 │   - pods
  49 │   - pods/exec
  50 │   verbs:
  51 │   - create
  52 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:82-93
────────────────────────────────────────
  82 ┌ - apiGroups:
  83 │   - apps
  84 │   resources:
  85 │   - deployments
  86 │   verbs:
  87 │   - create
  88 │   - delete
  89 │   - get
  90 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:94-104
────────────────────────────────────────
  94 ┌ - apiGroups:
  95 │   - batch
  96 │   resources:
  97 │   - jobs
  98 │   verbs:
  99 │   - create
 100 │   - delete
 101 │   - get
 102 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'cnpg-manager' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:6-19
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   - services
  12 │   verbs:
  13 │   - create
  14 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:186-197
────────────────────────────────────────
 186 ┌ - apiGroups:
 187 │   - rbac.authorization.k8s.io
 188 │   resources:
 189 │   - rolebindings
 190 │   - roles
 191 │   verbs:
 192 │   - create
 193 │   - get
 194 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'cnpg-manager' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:44-56
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - ''
  46 │   resources:
  47 │   - persistentvolumeclaims
  48 │   - pods
  49 │   - pods/exec
  50 │   verbs:
  51 │   - create
  52 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cnpg-manager' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:6-19
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - secrets
  11 │   - services
  12 │   verbs:
  13 │   - create
  14 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cnpg-manager' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cnpg-1.24.1_8.yaml:74-81
────────────────────────────────────────
  74 ┌ - apiGroups:
  75 │   - admissionregistration.k8s.io
  76 │   resources:
  77 │   - mutatingwebhookconfigurations
  78 │   - validatingwebhookconfigurations
  79 │   verbs:
  80 │   - get
  81 └   - patch
────────────────────────────────────────



cockroach.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cockroach' of Deployment 'cockroach' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cockroach' of Deployment 'cockroach' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cockroach' of 'deployment' 'cockroach' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cockroach' of Deployment 'cockroach' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cockroach' of Deployment 'cockroach' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cockroach' of Deployment 'cockroach' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cockroach' of Deployment 'cockroach' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cockroach' of Deployment 'cockroach' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cockroach' of Deployment 'cockroach' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cockroach' of Deployment 'cockroach' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cockroach' of Deployment 'cockroach' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cockroach' of Deployment 'cockroach' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cockroach" of deployment "cockroach" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cockroach in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cockroach.yaml:4
────────────────────────────────────────
   4 [   name: cockroach
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroach in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cockroach in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroach.yaml:15-34
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: data
  17 │         emptyDir: {}
  18 │       containers:
  19 │       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 └         - --accept-sql-without-tls
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cockroach in deployment cockroach (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroach.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: cockroach
  20 │         image: cockroachdb/cockroach
  21 │         args:
  22 │         - start-single-node
  23 │         - --accept-sql-without-tls
  24 │         - --sql-addr=0.0.0.0:5432
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /cockroach/cockroach-data
  ..   
────────────────────────────────────────



cockroachdb-statefulset-clean_1.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cockroachdb' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cockroachdb-statefulset-clean_1.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - secrets
  12 │   verbs:
  13 └   - get
────────────────────────────────────────



cockroachdb-statefulset-clean_6.yaml (kubernetes)
=================================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cockroachdb' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cockroachdb" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cockroachdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:4
────────────────────────────────────────
   4 [   name: cockroachdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cockroachdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:16-86
────────────────────────────────────────
  16 ┌       serviceAccountName: cockroachdb
  17 │       affinity:
  18 │         podAntiAffinity:
  19 │           preferredDuringSchedulingIgnoredDuringExecution:
  20 │           - weight: 100
  21 │             podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchExpressions:
  24 └                 - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cockroachdb in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset-clean_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────



cockroachdb-statefulset1_3.yaml (kubernetes)
============================================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bootstrap' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cockroachdb' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bootstrap" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cockroachdb" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cockroachdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cockroachdb
   5 │   labels:
   6 └     app: cockroachdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cockroachdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:18-78
────────────────────────────────────────
  18 ┌       initContainers:
  19 │       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bootstrap in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cockroachdb in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset1_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────



cockroachdb-statefulset2_1.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cockroachdb' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cockroachdb-statefulset2_1.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - secrets
  12 │   verbs:
  13 └   - get
────────────────────────────────────────



cockroachdb-statefulset2_9.yaml (kubernetes)
============================================
Tests: 127 (SUCCESSES: 97, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 17, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locality-checker' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cockroachdb' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locality-checker' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locality-checker' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cockroachdb" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locality-checker" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cockroachdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:4
────────────────────────────────────────
   4 [   name: cockroachdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cockroachdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:16-103
────────────────────────────────────────
  16 ┌       serviceAccountName: cockroachdb
  17 │       affinity:
  18 │         podAntiAffinity:
  19 │           preferredDuringSchedulingIgnoredDuringExecution:
  20 │           - weight: 100
  21 │             podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchExpressions:
  24 └                 - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cockroachdb in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:42-89
────────────────────────────────────────
  42 ┌       - name: cockroachdb
  43 │         image: cockroachdb/cockroach:v24.3.0
  44 │         imagePullPolicy: IfNotPresent
  45 │         resources:
  46 │           requests:
  47 │             cpu: '5'
  48 │             memory: 20Gi
  49 │           limits:
  50 └             cpu: '5'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locality-checker in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset2_9.yaml:30-40
────────────────────────────────────────
  30 ┌       - image: cockroachdb/locality-checker:0.1
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: locality-checker
  33 │         volumeMounts:
  34 │         - mountPath: /etc/cockroach-locality
  35 │           name: cockroach-locality
  36 │         env:
  37 │         - name: KUBERNETES_NODE
  38 └           valueFrom:
  ..   
────────────────────────────────────────



cockroachdb-statefulset3_1.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cockroachdb' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cockroachdb-statefulset3_1.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - secrets
  12 │   verbs:
  13 └   - get
────────────────────────────────────────



cockroachdb-statefulset3_6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cockroachdb' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cockroachdb" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cockroachdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:4
────────────────────────────────────────
   4 [   name: cockroachdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cockroachdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:16-86
────────────────────────────────────────
  16 ┌       serviceAccountName: cockroachdb
  17 │       affinity:
  18 │         podAntiAffinity:
  19 │           preferredDuringSchedulingIgnoredDuringExecution:
  20 │           - weight: 100
  21 │             podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchExpressions:
  24 └                 - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cockroachdb in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset3_6.yaml:30-74
────────────────────────────────────────
  30 ┌       - name: cockroachdb
  31 │         image: cockroachdb/cockroach:v24.3.4
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           requests:
  35 │             cpu: '2'
  36 │             memory: 8Gi
  37 │           limits:
  38 └             cpu: '2'
  ..   
────────────────────────────────────────



cockroachdb-statefulset4_3.yaml (kubernetes)
============================================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bootstrap' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cockroachdb' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bootstrap" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cockroachdb" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cockroachdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cockroachdb
   5 │   labels:
   6 └     app: cockroachdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cockroachdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:18-78
────────────────────────────────────────
  18 ┌       initContainers:
  19 │       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bootstrap in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cockroachdb in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset4_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────



cockroachdb-statefulset_3.yaml (kubernetes)
===========================================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bootstrap' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cockroachdb' of 'statefulset' 'cockroachdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bootstrap' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cockroachdb' of StatefulSet 'cockroachdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bootstrap" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cockroachdb" of statefulset "cockroachdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cockroachdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cockroachdb
   5 │   labels:
   6 └     app: cockroachdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cockroachdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cockroachdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:18-78
────────────────────────────────────────
  18 ┌       initContainers:
  19 │       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bootstrap in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:19-32
────────────────────────────────────────
  19 ┌       - name: bootstrap
  20 │         image: cockroachdb/cockroach-k8s-init:0.2
  21 │         imagePullPolicy: IfNotPresent
  22 │         args:
  23 │         - -on-start=/on-start.sh
  24 │         - -service=cockroachdb
  25 │         env:
  26 │         - name: POD_NAMESPACE
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cockroachdb in statefulset cockroachdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cockroachdb-statefulset_3.yaml:46-60
────────────────────────────────────────
  46 ┌       - name: cockroachdb
  47 │         image: cockroachdb/cockroach:v1.1.0
  48 │         imagePullPolicy: IfNotPresent
  49 │         ports:
  50 │         - containerPort: 26257
  51 │           name: grpc
  52 │         - containerPort: 8080
  53 │           name: http
  54 └         volumeMounts:
  ..   
────────────────────────────────────────



code_server.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'code-server' of Deployment 'code-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'code-server' of Deployment 'code-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'code-server' of 'deployment' 'code-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'code-server' of Deployment 'code-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'code-server' of Deployment 'code-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'code-server' of Deployment 'code-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'code-server' of Deployment 'code-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'code-server' of Deployment 'code-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'code-server' of Deployment 'code-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'code-server' of Deployment 'code-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'code-server' of Deployment 'code-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "code-server" of deployment "code-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment code-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 code_server.yaml:4
────────────────────────────────────────
   4 [   name: code-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container code-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 code_server.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 │         - /bin/sh
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment code-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 code_server.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: code-server
  17 │         image: ubuntu
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           requests:
  21 │             cpu: 100m
  22 │         command:
  23 └         - /bin/sh
  ..   
────────────────────────────────────────



codegen.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-codegen' of Deployment 'codegen' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-codegen' of 'deployment' 'codegen' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-codegen' of Deployment 'codegen' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-codegen" of deployment "codegen" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment codegen in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 codegen.yaml:4
────────────────────────────────────────
   4 [   name: codegen
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container codegen in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 codegen.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment codegen in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 codegen.yaml:14-36
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 └             memory: 1024Mi
  ..   
────────────────────────────────────────



codegen1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-codegen' of Deployment 'codegen' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-codegen' of 'deployment' 'codegen' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-codegen' of Deployment 'codegen' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-codegen' of Deployment 'codegen' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-codegen" of deployment "codegen" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment codegen in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 codegen1.yaml:4
────────────────────────────────────────
   4 [   name: codegen
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container codegen in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 codegen1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 1024Mi
  23 │         volumeMounts:
  24 └         - mountPath: /tango
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment codegen in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 codegen1.yaml:14-36
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-codegen
  17 │         image: tango_code_gen
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 └             memory: 1024Mi
  ..   
────────────────────────────────────────



coder-ingress.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'coder' in 'apps' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



coderd-role.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): Role 'coder-workspaces' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 coderd-role.yaml:6-29
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - networking.k8s.io
  10 │   resources:
  11 │   - persistentvolumeclaims
  12 │   - pods
  13 │   - deployments
  14 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'coder-workspaces' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 coderd-role.yaml:6-29
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - networking.k8s.io
  10 │   resources:
  11 │   - persistentvolumeclaims
  12 │   - pods
  13 │   - deployments
  14 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'coder-workspaces' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 coderd-role.yaml:6-29
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - networking.k8s.io
  10 │   resources:
  11 │   - persistentvolumeclaims
  12 │   - pods
  13 │   - deployments
  14 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'coder-workspaces' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 coderd-role.yaml:6-29
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - networking.k8s.io
  10 │   resources:
  11 │   - persistentvolumeclaims
  12 │   - pods
  13 │   - deployments
  14 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'coder-workspaces' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 coderd-role.yaml:6-29
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - networking.k8s.io
  10 │   resources:
  11 │   - persistentvolumeclaims
  12 │   - pods
  13 │   - deployments
  14 └   - services
  ..   
────────────────────────────────────────



coderuser_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubecontainer' of Deployment 'coderusers' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubecontainer' of Deployment 'coderusers' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubecontainer' of 'deployment' 'coderusers' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubecontainer' of Deployment 'coderusers' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubecontainer' of Deployment 'coderusers' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubecontainer' of Deployment 'coderusers' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubecontainer' of Deployment 'coderusers' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubecontainer' of Deployment 'coderusers' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubecontainer' of Deployment 'coderusers' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubecontainer' of Deployment 'coderusers' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubecontainer' of Deployment 'coderusers' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubecontainer" of deployment "coderusers" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coderusers in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coderuser_1.yaml:4
────────────────────────────────────────
   4 [   name: coderusers
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coderusers in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coderusers in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coderuser_1.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubecontainer in deployment coderusers (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coderuser_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: kubecontainer
  17 │         image: fergiraudo91/userscreator:1.0.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: MONGO_URL
  22 │           value: mongodb+srv://fergiraudo91:Luna.2024@coder.3hytpje.mongodb.net/coder
  23 └         imagePullPolicy: Always
────────────────────────────────────────



coffee-deploy.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of StatefulSet 'coffee-review-website' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of StatefulSet 'coffee-review-website' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'statefulset' 'coffee-review-website' in 'coffee-review' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend' of StatefulSet 'coffee-review-website' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of StatefulSet 'coffee-review-website' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'backend' of StatefulSet 'coffee-review-website' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of StatefulSet 'coffee-review-website' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of StatefulSet 'coffee-review-website' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of StatefulSet 'coffee-review-website' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend' of StatefulSet 'coffee-review-website' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of StatefulSet 'coffee-review-website' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of StatefulSet 'coffee-review-website' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of statefulset "coffee-review-website" in "coffee-review" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coffee-review-website in coffee-review namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset coffee-review-website in coffee-review namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-deploy.yaml:27-34
────────────────────────────────────────
  27 ┌       restartPolicy: Always # Restart polcicy for the Pods
  28 │       containers:
  29 │       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container backend in statefulset coffee-review-website (namespace: coffee-review) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coffee-deploy.yaml:29-34
────────────────────────────────────────
  29 ┌       - name: backend # Name of the container
  30 │         image: cyrof/coffee_review:latest # Docker image for the container
  31 │         imagePullPolicy: Always # Policy for pulliing the container image
  32 │         ports:
  33 │           - name: http # Name of the port
  34 └             containerPort: 4000 # Port number to expose within the container 
────────────────────────────────────────



coffee-service-deployment.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coffee-shop-service' of 'deployment' 'coffee-shop-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coffee-shop-service' of Deployment 'coffee-shop-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coffee-shop-service" of deployment "coffee-shop-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coffee-shop-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coffee-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: coffee-shop-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coffee-shop-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coffee-shop-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-service-deployment.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coffee-shop-service in deployment coffee-shop-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coffee-service-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: coffee-shop-service
  17 │         image: medtest2013/coffeeshop
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
  22 └           value: http://discovery-service:8761/eureka
────────────────────────────────────────



coffee-shop-web-loadbalancer.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'coffee-shop-website-load-balancer' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



coffee-shop-web-v1-deployment.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coffee-shop-website' of 'deployment' 'coffee-shop-website' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coffee-shop-website" of deployment "coffee-shop-website" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coffee-shop-website in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coffee-shop-website
   5 │   labels:
   6 └     tier: static-webpage
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coffee-shop-website in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coffee-shop-website in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coffee-shop-website in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coffee-shop-website in deployment coffee-shop-website (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coffee-shop-web-v1-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v1
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────



coffee-shop-web-v2-deployment.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coffee-shop-website' of 'deployment' 'coffee-shop-website' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coffee-shop-website' of Deployment 'coffee-shop-website' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coffee-shop-website" of deployment "coffee-shop-website" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coffee-shop-website in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coffee-shop-website
   5 │   labels:
   6 └     tier: static-webpage
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coffee-shop-website in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coffee-shop-website in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coffee-shop-website in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coffee-shop-website in deployment coffee-shop-website (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coffee-shop-web-v2-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: coffee-shop-website
  20 │         image: your-company-name/coffee-shop-web:v2
  21 │         resources:
  22 │           limits:
  23 │             memory: "500Mi"
  24 │             cpu: "500m"
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


